{"version":3,"sources":["../src/PrepackPlugin.js"],"names":["defaultConfiguration","prepack","test","PrepackPlugin","constructor","userConfiguration","configuration","apply","compiler","hooks","compilation","tap","optimizeChunkAssets","chunks","forEach","chunk","files","filePath","ModuleFilenameHelpers","matchObject","assets","RawSource","fileContents","source","code"],"mappings":";;;;;;;;AAEA;;;;AACA;;AAGA;;;;AAQA,MAAMA,uBAAuB;AAC3BC,WAAS,EADkB;AAE3BC,QAAM;AAFqB,CAA7B;;AAKe,MAAMC,aAAN,CAAoB;;AAGjCC,cAAaC,iBAAb,EAA8D;AAC5D,SAAKC,aAAL,gBACKN,oBADL,EAEKK,iBAFL;AAID;;AAEDE,QAAOC,QAAP,EAAyB;AACvB,UAAM,EAACF,aAAD,KAAkB,IAAxB;;AAEAE,aAASC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,eAA/B,EAAiDD,WAAD,IAAiB;AAC/DA,kBAAYD,KAAZ,CAAkBG,mBAAlB,CAAsCD,GAAtC,CAA0C,eAA1C,EAA4DE,MAAD,IAAY;AACrEA,eAAOC,OAAP,CAAgBC,KAAD,IAAmB;AAChC;AACAA,gBAAMC,KAAN,CAAYF,OAAZ,CAAqBG,QAAD,IAAc;AAChC;AACA,gBACEC,gCAAsBC,WAAtB,CAAkC;AAChCjB,oBAAMI,cAAcJ;AADY,aAAlC,EAEGe,QAFH,CADF,EAIE;AACA;AACAP,0BAAYU,MAAZ,CAAmBH,QAAnB,IAA+B,IAAII,yBAAJ,CAC7B,6BAAe,CACb;AACEC,8BAAcZ,YAAYU,MAAZ,CAAmBH,QAAnB,EAA6BM,MAA7B,EADhB;AAEEN;AAFF,eADa,CAAf,eAMKX,cAAcL,OANnB,GAOGuB,IAR0B,CAA/B;AAUD;AACF,WAnBD;AAoBD,SAtBD;AAuBD,OAxBD;AAyBD,KA1BD;AA2BD;AAxCgC;kBAAdrB,a","file":"PrepackPlugin.js","sourcesContent":["// @flow\n\nimport ModuleFilenameHelpers from 'webpack/lib/ModuleFilenameHelpers';\nimport {\n  RawSource\n} from 'webpack-sources';\nimport {\n  prepackSources\n} from 'prepack';\nimport type {\n  PluginConfigurationType,\n  UserPluginConfigurationType\n} from './types';\n\nconst defaultConfiguration = {\n  prepack: {},\n  test: /\\.js($|\\?)/i\n};\n\nexport default class PrepackPlugin {\n  configuration: PluginConfigurationType;\n\n  constructor (userConfiguration?: UserPluginConfigurationType) {\n    this.configuration = {\n      ...defaultConfiguration,\n      ...userConfiguration\n    };\n  }\n\n  apply (compiler: Object) {\n    const {configuration} = this;\n\n    compiler.hooks.compilation.tap('PrepackPlugin', (compilation) => {\n      compilation.hooks.optimizeChunkAssets.tap('PrepackPlugin', (chunks) => {\n        chunks.forEach((chunk: Object) => {\n          // prepack every file in chunk\n          chunk.files.forEach((filePath) => {\n            // check if file extension matches to configuration.test\n            if (\n              ModuleFilenameHelpers.matchObject({\n                test: configuration.test\n              }, filePath)\n            ) {\n              // prepack and apply changes\n              compilation.assets[filePath] = new RawSource(\n                prepackSources([\n                  {\n                    fileContents: compilation.assets[filePath].source(),\n                    filePath\n                  }\n                ], {\n                  ...configuration.prepack\n                }).code\n              );\n            }\n          });\n        });\n      });\n    });\n  }\n}\n"]}