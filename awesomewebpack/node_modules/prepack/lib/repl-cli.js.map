{"version":3,"sources":["../src/repl-cli.js"],"names":["serialize","realm","res","context","pushContext","err","value","intrinsics","Error","ToStringPartial","stack","popContext","reactEnabled","reactOutput","start","prompt","input","process","stdin","output","stdout","eval","code","filename","callback","$GlobalEnv","execute","console","error"],"mappings":";;AAWA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AApBA;;;;;;;;;AAsBA,SAASA,SAAT,CAAmBC,KAAnB,EAAiCC,GAAjC,EAAqE;AACnE,MAAIA,OAAOA,4BAAX,EAAiC;AAC/B,WAAOA,IAAIF,SAAJ,EAAP;AACD;;AAED,MAAIE,OAAOA,2CAAX,EAA2C;AACzC,QAAIC,UAAU,6BAAd;AACAF,UAAMG,WAAN,CAAkBD,OAAlB;AACA,QAAIE,GAAJ;AACA,QAAI;AACF,UAAIC,QAAQJ,IAAII,KAAhB;AACA,UAAIA,wCAAgC,+BAAmBL,KAAnB,EAA0BK,KAA1B,EAAiCL,MAAMM,UAAN,CAAiBC,KAAlD,CAApC,EAA8F;AAC5FH,cAAM,uBAAe,eAAGI,eAAH,CAAmBR,KAAnB,EAA0B,gBAAIA,KAAJ,EAAWK,KAAX,EAAkB,SAAlB,CAA1B,CAAf,CAAN;AACAD,YAAIK,KAAJ,GAAY,eAAGD,eAAH,CAAmBR,KAAnB,EAA0B,gBAAIA,KAAJ,EAAWK,KAAX,EAAkB,OAAlB,CAA1B,CAAZ;AACD,OAHD,MAGO;AACLD,cAAM,uBAAe,eAAGI,eAAH,CAAmBR,KAAnB,EAA0BK,KAA1B,CAAf,CAAN;AACD;AACF,KARD,SAQU;AACRL,YAAMU,UAAN,CAAiBR,OAAjB;AACD;AACD,WAAOE,GAAP;AACD;;AAED,SAAOH,GAAP;AACD;;AAED,IAAID,QAAQ,+BAAgB;AAC1BW,gBAAc,IADY;AAE1BC,eAAa;AAFa,CAAhB,CAAZ;AAIA,uBAAkBZ,KAAlB;;AAEA,eAAKa,KAAL,CAAW;AACTC,UAAQ,IADC;AAETC,SAAOC,QAAQC,KAFN;AAGTC,UAAQF,QAAQG,MAHP;AAITC,OAAKC,IAAL,EAAWnB,OAAX,EAAoBoB,QAApB,EAA8BC,QAA9B,EAAwC;AACtC,QAAI;AACF,UAAItB,MAAMD,MAAMwB,UAAN,CAAiBC,OAAjB,CAAyBJ,IAAzB,EAA+B,MAA/B,CAAV;AACApB,YAAMF,UAAUC,KAAV,EAAiBC,GAAjB,CAAN;AACA,UAAIA,eAAeM,KAAnB,EAA0B;AACxBgB,iBAAStB,GAAT;AACD,OAFD,MAEO;AACLsB,iBAAS,IAAT,EAAetB,GAAf;AACD;AACF,KARD,CAQE,OAAOG,GAAP,EAAY;AACZsB,cAAQC,KAAR,CAAcvB,GAAd;AACAmB,eAASnB,GAAT;AACD;AACF;AAjBQ,CAAX","file":"repl-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"./realm.js\";\nimport { FatalError } from \"./errors.js\";\nimport { Get } from \"./methods/index.js\";\nimport { InstanceofOperator } from \"./methods/index.js\";\nimport { AbruptCompletion, ThrowCompletion } from \"./completions.js\";\nimport { Value, ObjectValue } from \"./values/index.js\";\nimport { To } from \"./singletons.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport repl from \"repl\";\n\nfunction serialize(realm: Realm, res: Value | AbruptCompletion): any {\n  if (res && res instanceof Value) {\n    return res.serialize();\n  }\n\n  if (res && res instanceof ThrowCompletion) {\n    let context = new ExecutionContext();\n    realm.pushContext(context);\n    let err;\n    try {\n      let value = res.value;\n      if (value instanceof ObjectValue && InstanceofOperator(realm, value, realm.intrinsics.Error)) {\n        err = new FatalError(To.ToStringPartial(realm, Get(realm, value, \"message\")));\n        err.stack = To.ToStringPartial(realm, Get(realm, value, \"stack\"));\n      } else {\n        err = new FatalError(To.ToStringPartial(realm, value));\n      }\n    } finally {\n      realm.popContext(context);\n    }\n    return err;\n  }\n\n  return res;\n}\n\nlet realm = construct_realm({\n  reactEnabled: true,\n  reactOutput: \"jsx\",\n});\ninitializeGlobals(realm);\n\nrepl.start({\n  prompt: \"> \",\n  input: process.stdin,\n  output: process.stdout,\n  eval(code, context, filename, callback) {\n    try {\n      let res = realm.$GlobalEnv.execute(code, \"repl\");\n      res = serialize(realm, res);\n      if (res instanceof Error) {\n        callback(res);\n      } else {\n        callback(null, res);\n      }\n    } catch (err) {\n      console.error(err);\n      callback(err);\n    }\n  },\n});\n"]}