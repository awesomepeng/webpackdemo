{"version":3,"sources":["../src/prepack-options.js"],"names":["getRealmOptions","getSerializerOptions","compatibility","debugNames","errorHandler","mathRandomSeed","invariantLevel","invariantMode","emitConcreteModel","uniqueSuffix","instantRender","reactEnabled","reactOutput","reactVerbose","reactOptimizeNestedFunctions","residual","serialize","check","strictlyMonotonicDateNow","stripFlow","timeout","maxStackDepth","abstractValueImpliesMax","debuggerConfigArgs","lazyObjectsRuntime","heapGraphFormat","delayInitializations","delayUnsupportedRequires","accelerateUnsupportedRequires","internalDebug","debugScopes","debugIdentifiers","logStatistics","logModules","profile","inlineExpressions","initializeMoreModules","trace","result","undefined"],"mappings":";;;;;QA8DgBA,e,GAAAA,e;QAkDAC,oB,GAAAA,oB;;AAnGhB;;AAiDO,SAASD,eAAT,CAAyB;AAC9BE,kBAAgB,SADc;AAE9BC,eAAa,KAFiB;AAG9BC,cAH8B;AAI9BC,gBAJ8B;AAK9BC,mBAAiB,CALa;AAM9BC,kBAAgB,OANc;AAO9BC,sBAAoB,KAPU;AAQ9BC,cAR8B;AAS9BC,eAT8B;AAU9BC,cAV8B;AAW9BC,aAX8B;AAY9BC,cAZ8B;AAa9BC,8BAb8B;AAc9BC,UAd8B;AAe9BC,cAAY,CAACD,QAfiB;AAgB9BE,OAhB8B;AAiB9BC,0BAjB8B;AAkB9BC,WAlB8B;AAmB9BC,SAnB8B;AAoB9BC,eApB8B;AAqB9BC,yBArB8B;AAsB9BC;AAtB8B,CAAzB,EAuB0B;AAC/B,SAAO;AACLrB,iBADK;AAELC,cAFK;AAGLC,gBAHK;AAILC,kBAJK;AAKLC,kBALK;AAMLC,iBANK;AAOLC,qBAPK;AAQLC,gBARK;AASLC,iBATK;AAULC,gBAVK;AAWLC,eAXK;AAYLC,gBAZK;AAaLC,gCAbK;AAcLC,YAdK;AAeLC,aAfK;AAgBLC,SAhBK;AAiBLC,4BAjBK;AAkBLC,aAlBK;AAmBLC,WAnBK;AAoBLC,iBApBK;AAqBLC,2BArBK;AAsBLC;AAtBK,GAAP;AAwBD,C,CA9GD;;;;;;;;;AASA;;AAuGO,SAAStB,oBAAT,CAA8B;AACnCuB,oBADmC;AAEnCC,iBAFmC;AAGnCC,yBAAuB,KAHY;AAInCC,6BAA2B,KAJQ;AAKnCC,kCAAgC,IALG;AAMnCC,kBAAgB,KANmB;AAOnCC,gBAAc,KAPqB;AAQnCC,kBARmC;AASnCC,kBAAgB,KATmB;AAUnCC,eAAa,KAVsB;AAWnCC,YAAU,KAXyB;AAYnCC,sBAAoB,KAZe;AAanCC,0BAAwB,KAbW;AAcnCC,UAAQ;AAd2B,CAA9B,EAe+B;AACpC,MAAIC,SAA4B;AAC9BZ,wBAD8B;AAE9BC,4BAF8B;AAG9BC,iCAH8B;AAI9BQ,yBAJ8B;AAK9BP,iBAL8B;AAM9BC,eAN8B;AAO9BC,oBAP8B;AAQ9BC,iBAR8B;AAS9BC,cAT8B;AAU9BC,WAV8B;AAW9BC,qBAX8B;AAY9BE;AAZ8B,GAAhC;AAcA,MAAIb,uBAAuBe,SAA3B,EAAsC;AACpCD,WAAOd,kBAAP,GAA4BA,kBAA5B;AACD;AACD,MAAIC,oBAAoBc,SAAxB,EAAmC;AACjCD,WAAOb,eAAP,GAAyBA,eAAzB;AACD;AACD,SAAOa,MAAP;AACD","file":"prepack-options.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { ErrorHandler } from \"./errors.js\";\nimport type { SerializerOptions, RealmOptions, Compatibility, ReactOutputTypes, InvariantModeTypes } from \"./options\";\nimport { Realm } from \"./realm.js\";\nimport type { DebuggerConfigArguments } from \"./types\";\n\nexport type PrepackOptions = {|\n  additionalGlobals?: Realm => void,\n  lazyObjectsRuntime?: string,\n  heapGraphFormat?: \"DotLanguage\" | \"VISJS\",\n  compatibility?: Compatibility,\n  debugNames?: boolean,\n  delayInitializations?: boolean,\n  delayUnsupportedRequires?: boolean,\n  accelerateUnsupportedRequires?: boolean,\n  inputSourceMapFilename?: string,\n  internalDebug?: boolean,\n  debugScopes?: boolean,\n  debugIdentifiers?: Array<string>,\n  logStatistics?: boolean,\n  logModules?: boolean,\n  mathRandomSeed?: string,\n  errorHandler?: ErrorHandler,\n  invariantLevel?: number,\n  invariantMode?: InvariantModeTypes,\n  emitConcreteModel?: boolean,\n  outputFilename?: string,\n  profile?: boolean,\n  instantRender?: boolean,\n  reactEnabled?: boolean,\n  reactOutput?: ReactOutputTypes,\n  reactVerbose?: boolean,\n  reactOptimizeNestedFunctions?: boolean,\n  residual?: boolean,\n  serialize?: boolean,\n  check?: Array<number>,\n  inlineExpressions?: boolean,\n  sourceMaps?: boolean,\n  initializeMoreModules?: boolean,\n  statsFile?: string,\n  strictlyMonotonicDateNow?: boolean,\n  stripFlow?: boolean,\n  timeout?: number,\n  trace?: boolean,\n  uniqueSuffix?: string,\n  maxStackDepth?: number,\n  debugInFilePath?: string,\n  debugOutFilePath?: string,\n  abstractValueImpliesMax?: number,\n  debuggerConfigArgs?: DebuggerConfigArguments,\n|};\n\nexport function getRealmOptions({\n  compatibility = \"browser\",\n  debugNames = false,\n  errorHandler,\n  mathRandomSeed,\n  invariantLevel = 0,\n  invariantMode = \"throw\",\n  emitConcreteModel = false,\n  uniqueSuffix,\n  instantRender,\n  reactEnabled,\n  reactOutput,\n  reactVerbose,\n  reactOptimizeNestedFunctions,\n  residual,\n  serialize = !residual,\n  check,\n  strictlyMonotonicDateNow,\n  stripFlow,\n  timeout,\n  maxStackDepth,\n  abstractValueImpliesMax,\n  debuggerConfigArgs,\n}: PrepackOptions): RealmOptions {\n  return {\n    compatibility,\n    debugNames,\n    errorHandler,\n    mathRandomSeed,\n    invariantLevel,\n    invariantMode,\n    emitConcreteModel,\n    uniqueSuffix,\n    instantRender,\n    reactEnabled,\n    reactOutput,\n    reactVerbose,\n    reactOptimizeNestedFunctions,\n    residual,\n    serialize,\n    check,\n    strictlyMonotonicDateNow,\n    stripFlow,\n    timeout,\n    maxStackDepth,\n    abstractValueImpliesMax,\n    debuggerConfigArgs,\n  };\n}\n\nexport function getSerializerOptions({\n  lazyObjectsRuntime,\n  heapGraphFormat,\n  delayInitializations = false,\n  delayUnsupportedRequires = false,\n  accelerateUnsupportedRequires = true,\n  internalDebug = false,\n  debugScopes = false,\n  debugIdentifiers,\n  logStatistics = false,\n  logModules = false,\n  profile = false,\n  inlineExpressions = false,\n  initializeMoreModules = false,\n  trace = false,\n}: PrepackOptions): SerializerOptions {\n  let result: SerializerOptions = {\n    delayInitializations,\n    delayUnsupportedRequires,\n    accelerateUnsupportedRequires,\n    initializeMoreModules,\n    internalDebug,\n    debugScopes,\n    debugIdentifiers,\n    logStatistics,\n    logModules,\n    profile,\n    inlineExpressions,\n    trace,\n  };\n  if (lazyObjectsRuntime !== undefined) {\n    result.lazyObjectsRuntime = lazyObjectsRuntime;\n  }\n  if (heapGraphFormat !== undefined) {\n    result.heapGraphFormat = heapGraphFormat;\n  }\n  return result;\n}\n"]}