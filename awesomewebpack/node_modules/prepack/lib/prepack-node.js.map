{"version":3,"sources":["../src/prepack-node.js"],"names":["prepackStdin","prepackFile","prepackFileSync","createStatistics","options","gc","global","profile","undefined","Date","now","process","memoryUsage","heapUsed","processSerializedCode","printDiagnostics","sourceMapFilename","inputSourceMapFilename","stdin","setEncoding","resume","on","code","readFile","mapErr","sourceMap","console","warn","filename","serialized","success","filePath","fileContents","sourceMapContents","err","error","stack","exit","callback","fileErrorHandler","compatibility","fileErr","_sourceMap","filenames","length","sourceFiles","map","readFileSync","_e","debugInFilePath","debugOutFilePath","debuggerConfigArgs","ioWrapper","debugChannel","sourcemaps"],"mappings":"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","file":"prepack-node.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/*\n Prepack API functions that require Node as the execution environment for Prepack.\n */\n\n/* @flow */\nimport { defaultOptions } from \"./options\";\nimport { FatalError } from \"./errors.js\";\nimport { type PrepackOptions } from \"./prepack-options\";\nimport { prepackNodeCLI, prepackNodeCLISync } from \"./prepack-node-environment.js\";\nimport { prepackSources } from \"./prepack-standalone.js\";\nimport { type SourceMap } from \"./types.js\";\nimport { DebugChannel } from \"./debugger/server/channel/DebugChannel.js\";\nimport { FileIOWrapper } from \"./debugger/common/channel/FileIOWrapper.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { SerializerStatistics } from \"./serializer/statistics.js\";\n\nimport fs from \"fs\";\n\nexport * from \"./prepack-node-environment\";\nexport * from \"./prepack-standalone\";\n\nfunction createStatistics(options: PrepackOptions) {\n  let gc = global.gc; // eslint-disable-line no-undef\n  return options.profile !== undefined\n    ? new SerializerStatistics(\n        () => Date.now(),\n        () => {\n          if (gc) gc();\n          return process.memoryUsage().heapUsed;\n        },\n        !!gc\n      )\n    : new SerializerStatistics();\n}\n\nexport function prepackStdin(\n  options: PrepackOptions = defaultOptions,\n  processSerializedCode: SerializedResult => void,\n  printDiagnostics: boolean => boolean\n): void | SerializedResult {\n  let sourceMapFilename = options.inputSourceMapFilename || \"\";\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.resume();\n  process.stdin.on(\"data\", function(code) {\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, sourceMap = \"\") {\n      if (mapErr) {\n        //if no sourcemap was provided we silently ignore\n        if (sourceMapFilename !== \"\") console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n      }\n      let filename = \"no-filename-specified\";\n      let serialized;\n      let success;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options,\n          undefined,\n          createStatistics(options)\n        );\n        processSerializedCode(serialized);\n        success = printDiagnostics(false);\n      } catch (err) {\n        printDiagnostics(err instanceof FatalError);\n        if (!(err instanceof FatalError)) {\n          // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n          console.error(err.stack);\n        }\n        success = false;\n      }\n      if (!success) process.exit(1);\n    });\n  });\n}\n\nexport function prepackFile(\n  filename: string,\n  options: PrepackOptions = defaultOptions,\n  callback: (any, ?{ code: string, map?: SourceMap }) => void,\n  fileErrorHandler?: (err: ?Error) => void\n): void {\n  if (options.compatibility === \"node-cli\") {\n    prepackNodeCLI(filename, options, callback);\n    return;\n  }\n  let sourceMapFilename =\n    options.inputSourceMapFilename !== undefined ? options.inputSourceMapFilename : filename + \".map\";\n  fs.readFile(filename, \"utf8\", function(fileErr, code) {\n    if (fileErr) {\n      if (fileErrorHandler) fileErrorHandler(fileErr);\n      return;\n    }\n    fs.readFile(sourceMapFilename, \"utf8\", function(mapErr, _sourceMap) {\n      let sourceMap = _sourceMap;\n      if (mapErr) {\n        console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n        sourceMap = \"\";\n      }\n      let serialized;\n      try {\n        serialized = prepackSources(\n          [{ filePath: filename, fileContents: code, sourceMapContents: sourceMap }],\n          options,\n          undefined,\n          createStatistics(options)\n        );\n      } catch (err) {\n        callback(err, null);\n        return;\n      }\n      callback(null, serialized);\n    });\n  });\n}\n\nexport function prepackFileSync(filenames: Array<string>, options: PrepackOptions = defaultOptions): SerializedResult {\n  if (options.compatibility === \"node-cli\") {\n    if (filenames.length !== 1) {\n      console.error(`Does not support multiple file prepack in node-cli mode.`);\n      process.exit(1);\n    }\n    return prepackNodeCLISync(filenames[0], options);\n  }\n  const sourceFiles = filenames.map(filename => {\n    let code = fs.readFileSync(filename, \"utf8\");\n    let sourceMap = \"\";\n    let sourceMapFilename =\n      options.inputSourceMapFilename !== undefined ? options.inputSourceMapFilename : filename + \".map\";\n    try {\n      sourceMap = fs.readFileSync(sourceMapFilename, \"utf8\");\n    } catch (_e) {\n      if (options.inputSourceMapFilename !== undefined) console.warn(`No sourcemap found at ${sourceMapFilename}.`);\n    }\n    return { filePath: filename, fileContents: code, sourceMapContents: sourceMap };\n  });\n\n  // The existence of debug[In/Out]FilePath represents the desire to use the debugger.\n  if (options.debugInFilePath !== undefined && options.debugOutFilePath !== undefined) {\n    if (options.debuggerConfigArgs === undefined) options.debuggerConfigArgs = {};\n\n    let ioWrapper = new FileIOWrapper(false, options.debugInFilePath, options.debugOutFilePath);\n    options.debuggerConfigArgs.debugChannel = new DebugChannel(ioWrapper);\n    options.debuggerConfigArgs.sourcemaps = sourceFiles;\n  }\n  return prepackSources(sourceFiles, options, options.debuggerConfigArgs, createStatistics(options));\n}\n"]}