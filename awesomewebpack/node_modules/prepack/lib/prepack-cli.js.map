{"version":3,"sources":["../src/prepack-cli.js"],"names":["run","Object","Array","console","JSON","process","prepackStdin","prepackFileSync","FatalError","CompatibilityValues","fs","HELP_STR","map","v","join","args","from","argv","splice","inputFilenames","outputFilename","check","compatibility","mathRandomSeed","inputSourceMap","outputSourceMap","statsFileName","maxStackDepth","timeout","debugIdentifiers","lazyObjectsRuntime","heapGraphFilePath","debugInFilePath","debugOutFilePath","reactOutput","reproFilePath","cpuprofilePath","invariantMode","invariantLevel","flags","initializeMoreModules","trace","debugNames","emitConcreteModel","inlineExpressions","logStatistics","logModules","delayInitializations","delayUnsupportedRequires","accelerateUnsupportedRequires","internalDebug","debugScopes","serialize","residual","profile","instantRender","reactEnabled","reproArguments","reproFileNames","inputFile","fileName","push","basename","debuggerConfigArgs","length","arg","shift","startsWith","inputs","trim","split","input","slice","includes","error","exit","value","isNaN","parseInt","toString","seconds","debugIdentifiersString","range","unshift","pair","Number","MAX_SAFE_INTEGER","start","isInteger","count","invariantLevelString","diagnosticSeverity","buckRoot","options","flag","keys","log","option","undefined","zip","content","readFileSync","file","a","data","generate","base64","compression","writeFileSync","resolvedOptions","assign","inputSourceMapFilename","errorHandler","sourceMaps","heapGraphFormat","compilerDiagnostics","Map","compilerDiagnosticsList","compilerDiagnostic","location","set","printDiagnostics","caughtFatalError","size","informations","warnings","recoverableErrors","fatalErrors","printCompilerDiagnostic","locString","severity","errorCode","message","callStack","eolPos","indexOf","substring","loc","sourceMessage","source","line","column","plural","word","filter","s","profiler","success","require","e","setSamplingInterval","startProfiling","processSerializedCode","serialized","err","stack","stopProfiling","Date","now","stream","createWriteStream","getNextToken","write","token","once","end","code","statistics","stats","RealmStatistics","getRealmStatistics","SerializerStatistics","getSerializerStatistics","TimingStatistics","projectPerformanceTrackers","pt","time","HeapStatistics","memory","MemoryStatistics","getHeapStatistics","stringify","heapGraph","__residual"],"mappings":"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","file":"prepack-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* eslint-disable no-shadow */\n\nimport { CompilerDiagnostic, type ErrorHandlerResult, FatalError } from \"./errors.js\";\nimport {\n  type Compatibility,\n  CompatibilityValues,\n  type ReactOutputTypes,\n  ReactOutputValues,\n  type InvariantModeTypes,\n  InvariantModeValues,\n} from \"./options.js\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { prepackStdin, prepackFileSync } from \"./prepack-node.js\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport fs from \"fs\";\nimport v8 from \"v8\";\nimport { version } from \"../package.json\";\nimport invariant from \"./invariant\";\nimport zipFactory from \"node-zip\";\nimport path from \"path\";\nimport JSONTokenizer from \"./utils/JSONTokenizer.js\";\nimport type { DebuggerConfigArguments } from \"./types\";\n\n// Prepack helper\ndeclare var __residual: any;\n\nfunction run(\n  Object,\n  Array,\n  console,\n  JSON,\n  process,\n  prepackStdin,\n  prepackFileSync,\n  FatalError,\n  CompatibilityValues,\n  fs\n) {\n  let HELP_STR = `\n    input                    The name of the file to run Prepack over (for web please provide the single js bundle file)\n    --out                    The name of the output file\n    --compatibility          The target environment for Prepack [${CompatibilityValues.map(v => `\"${v}\"`).join(\", \")}]\n    --mathRandomSeed         If you want Prepack to evaluate Math.random() calls, please provide a seed.\n    --srcmapIn               The input sourcemap filename. If present, Prepack will output a sourcemap that maps from\n                             the original file (pre-input sourcemap) to Prepack's output\n    --srcmapOut              The output sourcemap filename.\n    --maxStackDepth          Specify the maximum call stack depth.\n    --timeout                The amount of time in seconds until Prepack should time out.\n    --lazyObjectsRuntime     Enable lazy objects feature and specify the JS runtime that support this feature.\n    --debugNames             Changes the output of Prepack so that for named functions and variables that get emitted into\n                             Prepack's output, the original name is appended as a suffix to Prepack's generated identifier.\n    --initializeMoreModules  Enable speculative initialization of modules (for the module system Prepack has builtin\n                             knowledge about). Prepack will try to execute all factory functions it is able to.\n    --trace                  Traces the order of module initialization.\n    --serialize              Serializes the partially evaluated global environment as a program that recreates it.\n                             (default = true)\n    --check [start[, count]] Check residual functions for diagnostic messages. Do not serialize or produce residual code.\n    --residual               Produces the residual program that results after constant folding.\n    --profile                Collect statistics about time and memory usage of the different internal passes\n    --logStatistics          Log statistics to console\n    --statsFile              The name of the output file where statistics will be written to.\n    --heapGraphFilePath      The name of the output file where heap graph will be written to.\n    --inlineExpressions      When generating code, tells prepack to avoid naming expressions when they are only used once,\n                             and instead inline them where they are used.\n    --invariantLevel         0: no invariants (default); 1: checks for abstract values; 2: checks for accessed built-ins; 3: internal consistency\n    --invariantMode          Whether to throw an exception or call a console function to log an invariant violation; default = throw.\n    --emitConcreteModel      Synthesize concrete model values for abstract models(defined by __assumeDataProperty).\n    --version                Output the version number.\n    --repro                  Create a zip file with all information needed to reproduce a Prepack run.\n    --cpuprofile             Create a CPU profile file for the run that can be loaded into the Chrome JavaScript CPU Profile viewer.\n    --debugDiagnosticSeverity  FatalError | RecoverableError | Warning | Information (default = FatalError). Diagnostic level at which debugger will stop.\n    --debugBuckRoot          Root directory that buck assumes when creating sourcemap paths.\n  `;\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  let inputFilenames = [];\n  let outputFilename;\n  let check: void | Array<number>;\n  let compatibility: Compatibility;\n  let mathRandomSeed;\n  let inputSourceMap;\n  let outputSourceMap;\n  let statsFileName;\n  let maxStackDepth: number;\n  let timeout: number;\n  let debugIdentifiers: void | Array<string>;\n  let lazyObjectsRuntime: string;\n  let heapGraphFilePath: void | string;\n  let debugInFilePath: string;\n  let debugOutFilePath: string;\n  let reactOutput: ReactOutputTypes = \"create-element\";\n  let reproFilePath: void | string;\n  let cpuprofilePath: void | string;\n  let invariantMode: void | InvariantModeTypes;\n  let invariantLevel: void | number;\n  let flags = {\n    initializeMoreModules: false,\n    trace: false,\n    debugNames: false,\n    emitConcreteModel: false,\n    inlineExpressions: false,\n    logStatistics: false,\n    logModules: false,\n    delayInitializations: false,\n    delayUnsupportedRequires: false,\n    accelerateUnsupportedRequires: true,\n    internalDebug: false,\n    debugScopes: false,\n    serialize: false,\n    residual: false,\n    profile: false,\n    instantRender: false,\n    reactEnabled: false,\n  };\n\n  let reproArguments = [];\n  let reproFileNames = [];\n  let inputFile = fileName => {\n    reproFileNames.push(fileName);\n    return path.basename(fileName);\n  };\n  let debuggerConfigArgs: DebuggerConfigArguments = {};\n  while (args.length) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      let inputs = arg.trim().split(/\\s+/g); // Split on all whitespace\n      for (let input of inputs) {\n        inputFilenames.push(input);\n        reproArguments.push(inputFile(input));\n      }\n    } else {\n      arg = arg.slice(2);\n      switch (arg) {\n        case \"out\":\n          arg = args.shift();\n          outputFilename = arg;\n          // do not include this in reproArguments needed by --repro, as path is likely not portable between environments\n          break;\n        case \"compatibility\":\n          arg = args.shift();\n          if (!CompatibilityValues.includes(arg)) {\n            console.error(`Unsupported compatibility: ${arg}`);\n            process.exit(1);\n          }\n          compatibility = (arg: any);\n          reproArguments.push(\"--compatibility\", compatibility);\n          break;\n        case \"mathRandomSeed\":\n          mathRandomSeed = args.shift();\n          reproArguments.push(\"--mathRandomSeed\", mathRandomSeed);\n          break;\n        case \"srcmapIn\":\n          inputSourceMap = args.shift();\n          reproArguments.push(\"--srcmapIn\", inputFile(inputSourceMap));\n          break;\n        case \"srcmapOut\":\n          outputSourceMap = args.shift();\n          // do not include this in reproArguments needed by --repro, as path is likely not portable between environments\n          break;\n        case \"statsFile\":\n          statsFileName = args.shift();\n          // do not include this in reproArguments needed by --repro, as path is likely not portable between environments\n          break;\n        case \"maxStackDepth\":\n          let value = args.shift();\n          if (isNaN(value)) {\n            console.error(\"Stack depth value must be a number\");\n            process.exit(1);\n          }\n          maxStackDepth = parseInt(value, 10);\n          reproArguments.push(\"--maxStackDepth\", maxStackDepth.toString());\n          break;\n        case \"timeout\":\n          let seconds = args.shift();\n          if (isNaN(seconds)) {\n            console.error(\"Timeout must be a number\");\n            process.exit(1);\n          }\n          timeout = parseInt(seconds, 10) * 1000;\n          reproArguments.push(\"--timeout\", timeout.toString());\n          break;\n        case \"debugIdentifiers\":\n          let debugIdentifiersString = args.shift();\n          debugIdentifiers = debugIdentifiersString.split(\",\");\n          reproArguments.push(\"--debugIdentifiers\", debugIdentifiersString);\n          break;\n        case \"check\":\n          let range = args.shift();\n          if (range.startsWith(\"--\")) {\n            args.unshift(range);\n            range = \"0\";\n          }\n          let pair: Array<any> = range.split(\",\");\n          if (pair.length === 1) pair.push(Number.MAX_SAFE_INTEGER);\n          let start = +pair[0];\n          if (start < 0 || !Number.isInteger(start)) {\n            console.error(\"check start offset must be a number\");\n            process.exit(1);\n          }\n          let count = +pair[1];\n          if (count < 0 || !Number.isInteger(count)) {\n            console.error(\"check count must be a number\");\n            process.exit(1);\n          }\n          check = [start, count];\n          reproArguments.push(\"--check\", range);\n          break;\n        case \"debugInFilePath\":\n          debugInFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro, as debugger behavior is not currently supported for repros\n          break;\n        case \"debugOutFilePath\":\n          debugOutFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro, as debugger behavior is not currently supported for repros\n          break;\n        case \"lazyObjectsRuntime\":\n          lazyObjectsRuntime = args.shift();\n          reproArguments.push(\"--lazyObjectsRuntime\", lazyObjectsRuntime);\n          break;\n        case \"heapGraphFilePath\":\n          heapGraphFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro, as path is likely not portable between environments\n          break;\n        case \"reactOutput\":\n          arg = args.shift();\n          if (!ReactOutputValues.includes(arg)) {\n            console.error(`Unsupported reactOutput: ${arg}`);\n            process.exit(1);\n          }\n          reactOutput = (arg: any);\n          reproArguments.push(\"--reactOutput\", reactOutput);\n          break;\n        case \"repro\":\n          reproFilePath = args.shift();\n          // do not include this in reproArguments needed by --repro, as we don't need to create a repro from the repro...\n          break;\n        case \"cpuprofile\":\n          cpuprofilePath = args.shift();\n          // do not include this in reproArguments needed by --repro, as path is likely not portable between environments\n          break;\n        case \"invariantMode\":\n          arg = args.shift();\n          if (!InvariantModeValues.includes(arg)) {\n            console.error(`Unsupported invariantMode: ${arg}`);\n            process.exit(1);\n          }\n          invariantMode = (arg: any);\n          reproArguments.push(\"--invariantMode\", invariantMode);\n          break;\n        case \"invariantLevel\":\n          let invariantLevelString = args.shift();\n          if (isNaN(invariantLevelString)) {\n            console.error(\"invariantLevel must be a number\");\n            process.exit(1);\n          }\n          invariantLevel = parseInt(invariantLevelString, 10);\n          reproArguments.push(\"--invariantLevel\", invariantLevel.toString());\n          break;\n        case \"debugDiagnosticSeverity\":\n          arg = args.shift();\n          invariant(\n            arg === \"FatalError\" || arg === \"RecoverableError\" || arg === \"Warning\" || arg === \"Information\",\n            `Invalid debugger diagnostic severity: ${arg}`\n          );\n          debuggerConfigArgs.diagnosticSeverity = arg;\n          break;\n        case \"debugBuckRoot\":\n          debuggerConfigArgs.buckRoot = args.shift();\n          break;\n        case \"help\":\n          const options = [\n            \"-- | input.js\",\n            \"--out output.js\",\n            \"--compatibility jsc\",\n            \"--mathRandomSeed seedvalue\",\n            \"--srcmapIn inputMap\",\n            \"--srcmapOut outputMap\",\n            \"--maxStackDepth depthValue\",\n            \"--timeout seconds\",\n            \"--debugIdentifiers id1,id2,...\",\n            \"--check [start[, number]]\",\n            \"--lazyObjectsRuntime lazyObjectsRuntimeName\",\n            \"--heapGraphFilePath heapGraphFilePath\",\n            \"--reactOutput \" + ReactOutputValues.join(\" | \"),\n            \"--repro reprofile.zip\",\n            \"--cpuprofile name.cpuprofile\",\n            \"--invariantMode \" + InvariantModeValues.join(\" | \"),\n          ];\n          for (let flag of Object.keys(flags)) options.push(`--${flag}`);\n\n          console.log(\"Usage: prepack.js \" + options.map(option => `[ ${option} ]`).join(\" \") + \"\\n\" + HELP_STR);\n          return;\n        case \"version\":\n          console.log(version);\n          return;\n        default:\n          if (arg in flags) {\n            flags[arg] = true;\n            reproArguments.push(\"--\" + arg);\n          } else {\n            console.error(`Unknown option: ${arg}`);\n            process.exit(1);\n          }\n      }\n    }\n  }\n\n  if (reproFilePath !== undefined) {\n    const zip = zipFactory();\n    for (let fileName of reproFileNames) {\n      let content = fs.readFileSync(fileName, \"utf8\");\n      zip.file(path.basename(fileName), content);\n    }\n    zip.file(\n      \"repro.sh\",\n      `#!/bin/bash\nif [ -z \"$PREPACK\" ]; then\n  echo \"Set environment variable PREPACK to bin/prepack.js in your Prepack directory.\"\nelse\n  node \"$PREPACK\" ${reproArguments.map(a => `\"${a}\"`).join(\" \")}\nfi\n`\n    );\n    const data = zip.generate({ base64: false, compression: \"DEFLATE\" });\n    fs.writeFileSync(reproFilePath, data, \"binary\");\n  }\n\n  if (!flags.serialize && !flags.residual) flags.serialize = true;\n  if (check) {\n    flags.serialize = false;\n    flags.residual = false;\n  }\n\n  let resolvedOptions = Object.assign(\n    {},\n    {\n      compatibility,\n      mathRandomSeed,\n      inputSourceMapFilename: inputSourceMap,\n      errorHandler,\n      sourceMaps: !!outputSourceMap,\n      maxStackDepth,\n      timeout,\n      debugIdentifiers,\n      check,\n      lazyObjectsRuntime,\n      debugInFilePath,\n      debugOutFilePath,\n      reactOutput,\n      invariantMode,\n      invariantLevel,\n      debuggerConfigArgs,\n    },\n    flags\n  );\n  if (heapGraphFilePath !== undefined) resolvedOptions.heapGraphFormat = \"DotLanguage\";\n  if (lazyObjectsRuntime !== undefined && (resolvedOptions.delayInitializations || resolvedOptions.inlineExpressions)) {\n    console.error(\"lazy objects feature is incompatible with delayInitializations and inlineExpressions options\");\n    process.exit(1);\n  }\n\n  let compilerDiagnostics: Map<BabelNodeSourceLocation, CompilerDiagnostic> = new Map();\n  let compilerDiagnosticsList: Array<CompilerDiagnostic> = [];\n  function errorHandler(compilerDiagnostic: CompilerDiagnostic): ErrorHandlerResult {\n    if (compilerDiagnostic.location) compilerDiagnostics.set(compilerDiagnostic.location, compilerDiagnostic);\n    else compilerDiagnosticsList.push(compilerDiagnostic);\n    return \"Recover\";\n  }\n\n  function printDiagnostics(caughtFatalError: boolean): boolean {\n    if (compilerDiagnostics.size === 0 && compilerDiagnosticsList.length === 0) {\n      // FatalErrors must have generated at least one CompilerDiagnostic.\n      invariant(!caughtFatalError, \"FatalError must generate at least one CompilerDiagnostic\");\n      return true;\n    }\n\n    let informations = 0;\n    let warnings = 0;\n    let recoverableErrors = 0;\n    let fatalErrors = 0;\n    let printCompilerDiagnostic = (\n      compilerDiagnostic: CompilerDiagnostic,\n      locString?: string = \"At an unknown location\"\n    ) => {\n      switch (compilerDiagnostic.severity) {\n        case \"Information\":\n          informations++;\n          break;\n        case \"Warning\":\n          warnings++;\n          break;\n        case \"RecoverableError\":\n          recoverableErrors++;\n          break;\n        default:\n          invariant(compilerDiagnostic.severity === \"FatalError\");\n          fatalErrors++;\n          break;\n      }\n      console.error(\n        `${locString} ${compilerDiagnostic.severity} ${compilerDiagnostic.errorCode}: ${compilerDiagnostic.message}` +\n          ` (https://github.com/facebook/prepack/wiki/${compilerDiagnostic.errorCode})`\n      );\n      let callStack = compilerDiagnostic.callStack;\n      if (callStack !== undefined) {\n        let eolPos = callStack.indexOf(\"\\n\");\n        if (eolPos > 0) console.error(callStack.substring(eolPos + 1));\n      }\n    };\n    for (let [loc, compilerDiagnostic] of compilerDiagnostics) {\n      let sourceMessage = \"\";\n      switch (loc.source) {\n        case null:\n        case \"\":\n          sourceMessage = \"In an unknown source file\";\n          break;\n        case \"no-filename-specified\":\n          sourceMessage = \"In stdin\";\n          break;\n        default:\n          invariant(loc !== null && loc.source !== null);\n          sourceMessage = `In input file ${loc.source}`;\n          break;\n      }\n\n      let locString = `${sourceMessage}(${loc.start.line}:${loc.start.column + 1})`;\n      printCompilerDiagnostic(compilerDiagnostic, locString);\n    }\n    for (let compilerDiagnostic of compilerDiagnosticsList) printCompilerDiagnostic(compilerDiagnostic);\n    invariant(informations + warnings + recoverableErrors + fatalErrors > 0);\n    let plural = (count, word) => (count === 1 ? word : `${word}s`);\n    console.error(\n      `Prepack ${fatalErrors > 0 ? \"failed\" : \"succeeded\"}, reporting ${[\n        fatalErrors > 0 ? `${fatalErrors} ${plural(fatalErrors, \"fatal error\")}` : undefined,\n        recoverableErrors > 0 ? `${recoverableErrors} ${plural(recoverableErrors, \"recoverable error\")}` : undefined,\n        warnings > 0 ? `${warnings} ${plural(warnings, \"warning\")}` : undefined,\n        informations > 0 ? `${informations} ${plural(informations, \"informational message\")}` : undefined,\n      ]\n        .filter(s => s !== undefined)\n        .join(\", \")}.`\n    );\n\n    return fatalErrors === 0;\n  }\n\n  let profiler;\n  let success;\n  try {\n    if (cpuprofilePath !== undefined) {\n      try {\n        profiler = require(\"v8-profiler\");\n      } catch (e) {\n        // Profiler optional dependency failed\n        console.error(\"v8-profiler doesn't work correctly on Windows, see issue #1695\");\n        throw e;\n      }\n      profiler.setSamplingInterval(100); // default is 1000us\n      profiler.startProfiling(\"\");\n    }\n\n    try {\n      if (inputFilenames.length === 0) {\n        prepackStdin(resolvedOptions, processSerializedCode, printDiagnostics);\n        return;\n      }\n      let serialized = prepackFileSync(inputFilenames, resolvedOptions);\n      success = printDiagnostics(false);\n      if (resolvedOptions.serialize && serialized) processSerializedCode(serialized);\n    } catch (err) {\n      printDiagnostics(err instanceof FatalError);\n      if (!(err instanceof FatalError)) {\n        // if it is not a FatalError, it means prepack failed, and we should display the Prepack stack trace.\n        console.error(err.stack);\n      }\n      success = false;\n    }\n  } finally {\n    if (profiler !== undefined) {\n      let data = profiler.stopProfiling(\"\");\n      let start = Date.now();\n      invariant(cpuprofilePath !== undefined);\n      let stream = fs.createWriteStream(cpuprofilePath);\n      let getNextToken = JSONTokenizer(data);\n      let write = () => {\n        for (let token = getNextToken(); token !== undefined; token = getNextToken()) {\n          if (!stream.write(token)) {\n            stream.once(\"drain\", write);\n            return;\n          }\n        }\n        stream.end();\n        invariant(cpuprofilePath !== undefined);\n        console.log(`Wrote ${cpuprofilePath} in ${Date.now() - start}ms`);\n      };\n      write();\n    }\n  }\n\n  function processSerializedCode(serialized: SerializedResult) {\n    if (serialized.code === \"\") {\n      console.error(\"Prepack returned empty code.\");\n      return;\n    }\n    if (outputFilename) {\n      console.log(`Prepacked source code written to ${outputFilename}.`);\n      fs.writeFileSync(outputFilename, serialized.code);\n    } else {\n      console.log(serialized.code);\n    }\n    if (statsFileName) {\n      let statistics = serialized.statistics;\n      if (statistics === undefined) {\n        return;\n      }\n      let stats = {\n        RealmStatistics: statistics.getRealmStatistics(),\n        SerializerStatistics: statistics.getSerializerStatistics(),\n        TimingStatistics: statistics.projectPerformanceTrackers(\"Time\", pt => pt.time),\n        HeapStatistics: statistics.projectPerformanceTrackers(\"Memory\", pt => pt.memory),\n        MemoryStatistics: v8.getHeapStatistics(),\n      };\n      fs.writeFileSync(statsFileName, JSON.stringify(stats));\n    }\n    if (outputSourceMap) {\n      fs.writeFileSync(outputSourceMap, serialized.map ? JSON.stringify(serialized.map) : \"\");\n    }\n    if (heapGraphFilePath !== undefined) {\n      invariant(serialized.heapGraph);\n      fs.writeFileSync(heapGraphFilePath, serialized.heapGraph);\n    }\n  }\n\n  if (!success) process.exit(1);\n}\n\nif (typeof __residual === \"function\") {\n  // If we're running inside of Prepack. This is the residual function we'll\n  // want to leave untouched in the final program.\n  __residual(\n    \"boolean\",\n    run,\n    Object,\n    Array,\n    console,\n    JSON,\n    process,\n    prepackStdin,\n    prepackFileSync,\n    FatalError,\n    CompatibilityValues,\n    fs\n  );\n} else {\n  run(Object, Array, console, JSON, process, prepackStdin, prepackFileSync, FatalError, CompatibilityValues, fs);\n}\n"]}