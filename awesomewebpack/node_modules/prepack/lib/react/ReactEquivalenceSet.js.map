{"version":3,"sources":["../../src/react/ReactEquivalenceSet.js"],"names":["temporalAliasSymbol","Symbol","ReactEquivalenceSet","constructor","realm","residualReactElementVisitor","objectRoot","Map","arrayRoot","reactElementRoot","reactPropsRoot","temporalAliasRoot","_createNode","map","value","getKey","key","visitedValues","has","set","get","getValue","val","residualHeapVisitor","equivalenceSet","add","_getArrayValue","_getObjectValue","object","reactElementEquivalenceSet","currentMap","result","propName","properties","prop","getEquivalentPropertyValue","symbol","symbols","temporalAlias","undefined","getTemporalAliasValue","react","emptyObject","_getTemporalValue","wasTemporalAliasDeclaredInCurrentScope","temporalBuildNodeEntry","getTemporalBuildNodeEntryFromDerivedValue","temporalArgs","args","length","i","arg","equivalenceArg","values","isTop","kind","childTemporalBuildNodeEntry","array","intrinsicName","lengthValue","element","emptyArray","isFinal","mightBeFinalObject","equivalentProp","reactPropsEquivalenceSet"],"mappings":"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","file":"ReactEquivalenceSet.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ArrayValue,\n  FunctionValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  Value,\n} from \"../values/index.js\";\nimport invariant from \"../invariant.js\";\nimport { hardModifyReactObjectPropertyBinding, isReactElement, isReactPropsObject, getProperty } from \"./utils\";\nimport { ResidualReactElementVisitor } from \"../serializer/ResidualReactElementVisitor.js\";\n\nexport type ReactSetValueMapKey = Value | number | string;\nexport type ReactSetValueMap = Map<ReactSetValueMapKey, ReactSetNode>;\n\nexport type ReactSetKeyMapKey = string | number | Symbol | SymbolValue;\nexport type ReactSetKeyMap = Map<ReactSetKeyMapKey, ReactSetValueMap>;\n\nexport type ReactSetNode = {\n  map: ReactSetKeyMap,\n  value: ObjectValue | ArrayValue | null,\n};\n\nexport const temporalAliasSymbol = Symbol(\"temporalAlias\");\n\n// ReactEquivalenceSet keeps records around of the values\n// of ReactElement/JSX nodes so we can return the same immutable values\n// where possible, i.e. <div /> === <div />\n//\n// Rather than uses hashes, this class uses linked Maps to track equality of objects.\n// It does this by recursively iterating through objects, by their properties/symbols and using\n// each property key as a map, and then from that map, each value as a map. The value\n// then links to the subsequent property/symbol in the object. This approach ensures insertion\n// is maintained through all objects.\nexport class ReactEquivalenceSet {\n  constructor(realm: Realm, residualReactElementVisitor: ResidualReactElementVisitor) {\n    this.realm = realm;\n    this.residualReactElementVisitor = residualReactElementVisitor;\n    this.objectRoot = new Map();\n    this.arrayRoot = new Map();\n    this.reactElementRoot = new Map();\n    this.reactPropsRoot = new Map();\n    this.temporalAliasRoot = new Map();\n  }\n  realm: Realm;\n  objectRoot: ReactSetKeyMap;\n  arrayRoot: ReactSetKeyMap;\n  reactElementRoot: ReactSetKeyMap;\n  reactPropsRoot: ReactSetKeyMap;\n  temporalAliasRoot: ReactSetKeyMap;\n  residualReactElementVisitor: ResidualReactElementVisitor;\n\n  _createNode(): ReactSetNode {\n    return {\n      map: new Map(),\n      value: null,\n    };\n  }\n\n  getKey(key: ReactSetKeyMapKey, map: ReactSetKeyMap, visitedValues: Set<Value>): ReactSetValueMap {\n    if (!map.has(key)) {\n      map.set(key, new Map());\n    }\n    return ((map.get(key): any): ReactSetValueMap);\n  }\n\n  getValue(val: ReactSetValueMapKey, map: ReactSetValueMap, visitedValues: Set<Value>): ReactSetNode {\n    if (val instanceof StringValue || val instanceof NumberValue) {\n      val = val.value;\n    } else if (val instanceof AbstractValue) {\n      val = this.residualReactElementVisitor.residualHeapVisitor.equivalenceSet.add(val);\n    } else if (val instanceof ArrayValue) {\n      val = this._getArrayValue(val, visitedValues);\n    } else if (val instanceof ObjectValue && !(val instanceof FunctionValue)) {\n      val = this._getObjectValue(val, visitedValues);\n    }\n    if (!map.has(val)) {\n      map.set(val, this._createNode());\n    }\n    return ((map.get(val): any): ReactSetNode);\n  }\n\n  // for objects: [key/symbol] -> [key/symbol]... as nodes\n  _getObjectValue(object: ObjectValue, visitedValues: Set<Value>): ObjectValue {\n    if (visitedValues.has(object)) return object;\n    visitedValues.add(object);\n\n    if (isReactElement(object)) {\n      return this.residualReactElementVisitor.reactElementEquivalenceSet.add(object);\n    }\n    let currentMap = this.objectRoot;\n    let result;\n\n    for (let [propName] of object.properties) {\n      currentMap = this.getKey(propName, currentMap, visitedValues);\n      let prop = this.getEquivalentPropertyValue(object, propName);\n      result = this.getValue(prop, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    for (let [symbol] of object.symbols) {\n      currentMap = this.getKey(symbol, currentMap, visitedValues);\n      let prop = getProperty(this.realm, object, symbol);\n      result = this.getValue(prop, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    let temporalAlias = object.temporalAlias;\n\n    if (temporalAlias !== undefined) {\n      currentMap = this.getKey(temporalAliasSymbol, currentMap, visitedValues);\n      result = this.getTemporalAliasValue(temporalAlias, currentMap, visitedValues);\n    }\n\n    if (result === undefined) {\n      // If we have a temporalAlias, we can never return an empty object\n      if (temporalAlias === undefined && this.realm.react.emptyObject !== undefined) {\n        return this.realm.react.emptyObject;\n      }\n      return object;\n    }\n    if (result.value === null) {\n      result.value = object;\n    }\n    return result.value;\n  }\n\n  _getTemporalValue(temporalAlias: AbstractObjectValue, visitedValues: Set<Value>): AbstractObjectValue {\n    // Check to ensure the temporal alias is definitely declared in the current scope\n    if (!this.residualReactElementVisitor.wasTemporalAliasDeclaredInCurrentScope(temporalAlias)) {\n      return temporalAlias;\n    }\n    let temporalBuildNodeEntry = this.realm.getTemporalBuildNodeEntryFromDerivedValue(temporalAlias);\n\n    if (temporalBuildNodeEntry === undefined) {\n      return temporalAlias;\n    }\n    let temporalArgs = temporalBuildNodeEntry.args;\n    if (temporalArgs.length === 0) {\n      return temporalAlias;\n    }\n    let currentMap = this.temporalAliasRoot;\n    let result;\n\n    for (let i = 0; i < temporalArgs.length; i++) {\n      let arg = temporalArgs[i];\n      let equivalenceArg;\n      if (arg instanceof ObjectValue && arg.temporalAlias === temporalAlias) {\n        continue;\n      }\n      if (arg instanceof ObjectValue && isReactElement(arg)) {\n        equivalenceArg = this.residualReactElementVisitor.reactElementEquivalenceSet.add(arg);\n\n        if (arg !== equivalenceArg) {\n          temporalArgs[i] = equivalenceArg;\n        }\n      } else if (arg instanceof AbstractObjectValue && !arg.values.isTop() && arg.kind !== \"conditional\") {\n        // Might be a temporal, so let's check\n        let childTemporalBuildNodeEntry = this.realm.getTemporalBuildNodeEntryFromDerivedValue(arg);\n\n        if (childTemporalBuildNodeEntry !== undefined) {\n          equivalenceArg = this._getTemporalValue(arg, visitedValues);\n          invariant(equivalenceArg instanceof AbstractObjectValue);\n\n          if (equivalenceArg !== arg) {\n            temporalArgs[i] = equivalenceArg;\n          }\n        }\n      } else if (arg instanceof AbstractValue) {\n        equivalenceArg = this.residualReactElementVisitor.residualHeapVisitor.equivalenceSet.add(arg);\n\n        if (arg !== equivalenceArg) {\n          temporalArgs[i] = equivalenceArg;\n        }\n      }\n      currentMap = this.getKey(i, (currentMap: any), visitedValues);\n      invariant(arg instanceof Value && (equivalenceArg instanceof Value || equivalenceArg === undefined));\n      result = this.getValue(equivalenceArg || arg, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    invariant(result !== undefined);\n    if (result.value === null) {\n      result.value = temporalAlias;\n    }\n    // Check to ensure the equivalent temporal alias is definitely declared in the current scope\n    if (!this.residualReactElementVisitor.wasTemporalAliasDeclaredInCurrentScope(result.value)) {\n      result.value = temporalAlias;\n      return temporalAlias;\n    }\n    return result.value;\n  }\n\n  getTemporalAliasValue(\n    temporalAlias: AbstractObjectValue,\n    map: ReactSetValueMap,\n    visitedValues: Set<Value>\n  ): ReactSetNode {\n    let result = this._getTemporalValue(temporalAlias, visitedValues);\n\n    invariant(result instanceof AbstractObjectValue);\n    if (!map.has(result)) {\n      map.set(result, this._createNode());\n    }\n    return ((map.get(result): any): ReactSetNode);\n  }\n\n  // for arrays: [0] -> [1] -> [2]... as nodes\n  _getArrayValue(array: ArrayValue, visitedValues: Set<Value>): ArrayValue {\n    if (visitedValues.has(array)) return array;\n    if (array.intrinsicName) return array;\n    visitedValues.add(array);\n    let lengthValue = getProperty(this.realm, array, \"length\");\n    invariant(lengthValue instanceof NumberValue);\n    let length = lengthValue.value;\n    let currentMap = this.arrayRoot;\n    let result;\n\n    for (let i = 0; i < length; i++) {\n      currentMap = this.getKey(i, currentMap, visitedValues);\n      let element = this.getEquivalentPropertyValue(array, \"\" + i);\n      result = this.getValue(element, currentMap, visitedValues);\n      currentMap = result.map;\n    }\n    if (result === undefined) {\n      if (this.realm.react.emptyArray !== undefined) {\n        return this.realm.react.emptyArray;\n      }\n      return array;\n    }\n    if (result.value === null) {\n      result.value = array;\n    }\n    return result.value;\n  }\n\n  getEquivalentPropertyValue(object: ObjectValue, propName: string): Value {\n    let prop = getProperty(this.realm, object, propName);\n    let isFinal = object.mightBeFinalObject();\n    let equivalentProp;\n\n    if (prop instanceof ObjectValue && isReactElement(prop)) {\n      equivalentProp = this.residualReactElementVisitor.reactElementEquivalenceSet.add(prop);\n\n      if (prop !== equivalentProp && isFinal) {\n        hardModifyReactObjectPropertyBinding(this.realm, object, propName, equivalentProp);\n      }\n    } else if (prop instanceof ObjectValue && isReactPropsObject(prop)) {\n      equivalentProp = this.residualReactElementVisitor.reactPropsEquivalenceSet.add(prop);\n\n      if (prop !== equivalentProp && isFinal) {\n        hardModifyReactObjectPropertyBinding(this.realm, object, propName, equivalentProp);\n      }\n    } else if (prop instanceof AbstractValue) {\n      equivalentProp = this.residualReactElementVisitor.residualHeapVisitor.equivalenceSet.add(prop);\n\n      if (prop !== equivalentProp && isFinal) {\n        hardModifyReactObjectPropertyBinding(this.realm, object, propName, equivalentProp);\n      }\n    }\n    return equivalentProp || prop;\n  }\n}\n"]}