{"version":3,"sources":["../../src/react/errors.js"],"names":["ExpectedBailOut","Error","SimpleClassBailOut","UnsupportedSideEffect","NewComponentTreeBranch","constructor","evaluatedNode","DoNotOptimize","ReconcilerFatalError","message","status","__isReconcilerFatalError"],"mappings":";;;;;;;AAWA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;;;AASA;;AAUO,MAAMA,eAAN,SAA8BC,KAA9B,CAAoC;;QAA9BD,e,GAAAA,e,EAEb;AACA;AACA;;AACO,MAAME,kBAAN,SAAiCD,KAAjC,CAAuC;;QAAjCC,kB,GAAAA,kB,EAEb;AACA;AACA;AACA;;AACO,MAAMC,qBAAN,SAAoCF,KAApC,CAA0C;;QAApCE,qB,GAAAA,qB,EAEb;AACA;;AACO,MAAMC,sBAAN,SAAqCH,KAArC,CAA2C;AAChDI,cAAYC,aAAZ,EAA+C;AAC7C;AACA,SAAKA,aAAL,GAAqBA,aAArB;AACD;AAJ+C;;QAArCF,sB,GAAAA,sB;AAQN,MAAMG,aAAN,SAA4BN,KAA5B,CAAkC;;QAA5BM,a,GAAAA,a,EAEb;AACA;AACA;;AACO,MAAMC,oBAAN,4BAA8C;AACnDH,cAAYI,OAAZ,EAA6BH,aAA7B,EAAgE;AAC9D,UAAMG,OAAN;AACAH,kBAAcI,MAAd,GAAuB,OAAvB;AACAJ,kBAAcG,OAAd,GAAwBA,OAAxB;AACA,SAAKH,aAAL,GAAqBA,aAArB;AACA;AACA,SAAKK,wBAAL,GAAgC,IAAhC;AACD;AARkD;QAAxCH,oB,GAAAA,oB","file":"errors.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { type ReactEvaluatedNode } from \"../serializer/types.js\";\nimport { FatalError } from \"../errors.js\";\n\n// ExpectedBailOut is like an error, that gets thrown during the reconcilation phase\n// allowing the reconcilation to continue on other branches of the tree, the message\n// given to ExpectedBailOut will be assigned to the value.$BailOutReason property and serialized\n// as a comment in the output source to give the user hints as to what they need to do\n// to fix the bail-out case\nexport class ExpectedBailOut extends Error {}\n\n// SimpleClassBailOuts only occur when a simple class instance is created and used\n// bailing out here will result in a complex class instance being created after\n// and an alternative complex class component route being used\nexport class SimpleClassBailOut extends Error {}\n\n// When the reconciler detectes a side-effect in pure evaluation, it throws one\n// of these errors. This will fall straight through the the wrapping React\n// component render try/catch, which will then throw an appropiate\n// ReconcilerFatalError along with information on the React component stack\nexport class UnsupportedSideEffect extends Error {}\n\n// NewComponentTreeBranch only occur when a complex class is found in a\n// component tree and the reconciler can no longer fold the component of that branch\nexport class NewComponentTreeBranch extends Error {\n  constructor(evaluatedNode: ReactEvaluatedNode) {\n    super();\n    this.evaluatedNode = evaluatedNode;\n  }\n  evaluatedNode: ReactEvaluatedNode;\n}\n\nexport class DoNotOptimize extends Error {}\n\n// Used when an entire React component tree has failed to optimize\n// this means there is a programming bug in the application that is\n// being Prepacked\nexport class ReconcilerFatalError extends FatalError {\n  constructor(message: string, evaluatedNode: ReactEvaluatedNode) {\n    super(message);\n    evaluatedNode.status = \"FATAL\";\n    evaluatedNode.message = message;\n    this.evaluatedNode = evaluatedNode;\n    // used for assertions in tests\n    this.__isReconcilerFatalError = true;\n  }\n  evaluatedNode: ReactEvaluatedNode;\n  __isReconcilerFatalError: boolean;\n}\n"]}