"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactElementSet = undefined;

var _realm = require("../realm.js");

var _index = require("../values/index.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _ReactEquivalenceSet = require("./ReactEquivalenceSet.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

class ReactElementSet {
  constructor(realm, reactEquivalenceSet) {
    this.realm = realm;
    this.reactEquivalenceSet = reactEquivalenceSet;
  }


  add(reactElement, visitedValues) {
    if (!visitedValues) visitedValues = new Set();
    let reactEquivalenceSet = this.reactEquivalenceSet;
    let currentMap = reactEquivalenceSet.reactElementRoot;

    // type
    currentMap = reactEquivalenceSet.getKey("type", currentMap, visitedValues);
    let type = reactEquivalenceSet.getEquivalentPropertyValue(reactElement, "type");
    let result = reactEquivalenceSet.getValue(type, currentMap, visitedValues);
    currentMap = result.map;
    // key
    currentMap = reactEquivalenceSet.getKey("key", currentMap, visitedValues);
    let key = reactEquivalenceSet.getEquivalentPropertyValue(reactElement, "key");
    result = reactEquivalenceSet.getValue(key, currentMap, visitedValues);
    currentMap = result.map;
    // ref
    currentMap = reactEquivalenceSet.getKey("ref", currentMap, visitedValues);
    let ref = reactEquivalenceSet.getEquivalentPropertyValue(reactElement, "ref");
    result = reactEquivalenceSet.getValue(ref, currentMap, visitedValues);
    currentMap = result.map;
    // props
    currentMap = reactEquivalenceSet.getKey("props", currentMap, visitedValues);
    let props = reactEquivalenceSet.getEquivalentPropertyValue(reactElement, "props");
    result = reactEquivalenceSet.getValue(props, currentMap, visitedValues);

    if (result.value === null) {
      result.value = reactElement;
    }
    (0, _invariant2.default)(result.value instanceof _index.ObjectValue);
    return result.value;
  }
}
exports.ReactElementSet = ReactElementSet;
//# sourceMappingURL=ReactElementSet.js.map