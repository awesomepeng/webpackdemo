{"version":3,"sources":["../../../src/react/experimental-server-rendering/utils.js"],"names":["createMarkupForRoot","isCustomComponent","escapeHtml","normalizeNode","convertValueToNode","createHtmlEscapeHelper","createArrayHelper","getNonChildrenInnerMarkup","quoteAttributeValueForBrowser","matchHtmlRegExp","realm","tagName","propsValue","indexOf","is","string","str","match","exec","escape","html","index","lastIndex","length","charCodeAt","substring","reactNode","Array","isArray","newReactNode","element","undefined","lastNode","push","value","escapeHelperAst","toString","plugins","helper","body","uniqueOrderedTag","functionBodyUniqueTagSeed","$ECMAScriptCode","$FormalParameters","params","arrayHelper","innerHTML","_html","content"],"mappings":";;;;;QAkCgBA,mB,GAAAA,mB;QAIAC,iB,GAAAA,iB;QAyBAC,U,GAAAA,U;QAgDAC,a,GAAAA,a;QAkCAC,kB,GAAAA,kB;QASAC,sB,GAAAA,sB;QAUAC,iB,GAAAA,iB;QA8BAC,yB,GAAAA,yB;QAsBAC,6B,GAAAA,6B;;AAvMhB;;AACA;;AASA;;AACA;;;;AAEA;;;;AAEA,MAAMC,kBAAkB,SAAxB,C,CAhCA;;;;;;;;;AAWA;AACA;AACA;;AAqBO,SAAST,mBAAT,GAAuC;AAC5C,SAAO,iCAAsB,KAA7B;AACD;;AAEM,SAASC,iBAAT,CACLS,KADK,EAELC,OAFK,EAGLC,UAHK,EAII;AACT,MAAID,QAAQE,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;AAC/B,QAAIC,KAAK,wBAAYJ,KAAZ,EAAmBE,UAAnB,EAA+B,IAA/B,CAAT;AACA,WAAOE,gCAAP;AACD;AACD,UAAQH,OAAR;AACE,SAAK,gBAAL;AACA,SAAK,eAAL;AACA,SAAK,WAAL;AACA,SAAK,eAAL;AACA,SAAK,eAAL;AACA,SAAK,kBAAL;AACA,SAAK,gBAAL;AACA,SAAK,eAAL;AACE,aAAO,KAAP;AACF;AACE,aAAO,IAAP;AAXJ;AAaD;;AAED;AACO,SAAST,UAAT,CAAoBa,MAApB,EAAoC;AACzC,MAAI,OAAOA,MAAP,KAAkB,SAAlB,IAA+B,OAAOA,MAAP,KAAkB,QAArD,EAA+D;AAC7D,WAAO,KAAKA,MAAZ;AACD;AACD,MAAIC,MAAM,KAAKD,MAAf;AACA,MAAIE,QAAQR,gBAAgBS,IAAhB,CAAqBF,GAArB,CAAZ;;AAEA,MAAI,CAACC,KAAL,EAAY;AACV,WAAOD,GAAP;AACD;;AAED,MAAIG,MAAJ;AACA,MAAIC,OAAO,EAAX;AACA,MAAIC,QAAQ,CAAZ;AACA,MAAIC,YAAY,CAAhB;;AAEA,OAAKD,QAAQJ,MAAMI,KAAnB,EAA0BA,QAAQL,IAAIO,MAAtC,EAA8CF,OAA9C,EAAuD;AACrD,YAAQL,IAAIQ,UAAJ,CAAeH,KAAf,CAAR;AACE,WAAK,EAAL;AACEF,iBAAS,QAAT;AACA;AACF,WAAK,EAAL;AACEA,iBAAS,OAAT;AACA;AACF,WAAK,EAAL;AACEA,iBAAS,QAAT;AACA;AACF,WAAK,EAAL;AACEA,iBAAS,MAAT;AACA;AACF,WAAK,EAAL;AACEA,iBAAS,MAAT;AACA;AACF;AACE;AAjBJ;;AAoBA,QAAIG,cAAcD,KAAlB,EAAyB;AACvBD,cAAQJ,IAAIS,SAAJ,CAAcH,SAAd,EAAyBD,KAAzB,CAAR;AACD;;AAEDC,gBAAYD,QAAQ,CAApB;AACAD,YAAQD,MAAR;AACD;;AAED,SAAOG,cAAcD,KAAd,GAAsBD,OAAOJ,IAAIS,SAAJ,CAAcH,SAAd,EAAyBD,KAAzB,CAA7B,GAA+DD,IAAtE;AACD;;AAEM,SAASjB,aAAT,CAAuBO,KAAvB,EAAqCgB,SAArC,EAAsE;AAC3E,MAAIC,MAAMC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC5B,QAAIG,YAAJ;;AAEA,SAAK,IAAIC,OAAT,IAAoBJ,SAApB,EAA+B;AAC7B,UAAI,OAAOI,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAID,iBAAiBE,SAArB,EAAgC;AAC9BF,yBAAeC,OAAf;AACD,SAFD,MAEO,IAAI,OAAOD,YAAP,KAAwB,QAA5B,EAAsC;AAC3CA,0BAAgBC,OAAhB;AACD,SAFM,MAEA;AACL,cAAIE,WAAWH,aAAaA,aAAaN,MAAb,GAAsB,CAAnC,CAAf;AACA,cAAI,OAAOS,QAAP,KAAoB,QAAxB,EAAkC;AAChCH,yBAAaA,aAAaN,MAAb,GAAsB,CAAnC,KAAyCO,OAAzC;AACD,WAFD,MAEO;AACLD,yBAAaI,IAAb,CAAkBH,OAAlB;AACD;AACF;AACF,OAbD,MAaO,IAAID,iBAAiBE,SAArB,EAAgC;AACrCF,uBAAgB,CAACC,OAAD,CAAhB;AACD,OAFM,MAEA,IAAI,OAAOD,YAAP,KAAwB,QAA5B,EAAsC;AAC3CA,uBAAgB,CAACA,YAAD,EAAeC,OAAf,CAAhB;AACD,OAFM,MAEA;AACLD,qBAAaI,IAAb,CAAkBH,OAAlB;AACD;AACF;AACD,6BAAUD,iBAAiBE,SAA3B;AACA,WAAOF,YAAP;AACD,GA3BD,MA2BO,IAAI,OAAOH,SAAP,KAAqB,QAArB,IAAiCA,yCAArC,EAAyE;AAC9E,WAAOA,SAAP;AACD;AACD,2BAAU,KAAV,EAAiB,MAAjB;AACD;;AAEM,SAAStB,kBAAT,CAA4B8B,KAA5B,EAAqD;AAC1D,MAAIA,qCAAJ,EAAoC;AAClC,WAAOA,KAAP;AACD,GAFD,MAEO,IAAIA,uCAAgCA,mCAApC,EAAkE;AACvE,WAAOA,MAAMA,KAAN,GAAc,EAArB;AACD;AACD,2BAAU,KAAV,EAAiB,MAAjB;AACD;;AAEM,SAAS7B,sBAAT,CAAgCK,KAAhC,EAA6E;AAClF,MAAIyB,kBAAkB,8BAAgBjC,WAAWkC,QAAX,EAAhB,EAAuC,EAAEC,SAAS,CAAC,MAAD,CAAX,EAAvC,CAAtB;AACA,MAAIC,SAAS,yCAAkC5B,KAAlC,CAAb;AACA,MAAI6B,OAAOJ,gBAAgBI,IAA3B;AACEA,MAAF,CAAmCC,gBAAnC,GAAsD9B,MAAM+B,yBAAN,EAAtD;AACAH,SAAOI,eAAP,GAAyBH,IAAzB;AACAD,SAAOK,iBAAP,GAA2BR,gBAAgBS,MAA3C;AACA,SAAON,MAAP;AACD;;AAEM,SAAShC,iBAAT,CAA2BI,KAA3B,EAAwE;AAC7E,MAAImC,cAAe;;;;;;;;;;;;;;;;;;GAAnB;;AAoBA,MAAIV,kBAAkB,8BAAgBU,WAAhB,EAA6B,EAAER,SAAS,CAAC,MAAD,CAAX,EAA7B,CAAtB;AACA,MAAIC,SAAS,yCAAkC5B,KAAlC,CAAb;AACA,MAAI6B,OAAOJ,gBAAgBI,IAA3B;AACEA,MAAF,CAAmCC,gBAAnC,GAAsD9B,MAAM+B,yBAAN,EAAtD;AACAH,SAAOI,eAAP,GAAyBH,IAAzB;AACAD,SAAOK,iBAAP,GAA2BR,gBAAgBS,MAA3C;AACA,SAAON,MAAP;AACD;;AAEM,SAAS/B,yBAAT,CACLG,KADK,EAELE,UAFK,EAGa;AAClB,MAAIkC,YAAY,wBAAYpC,KAAZ,EAAmBE,UAAnB,EAA+B,yBAA/B,CAAhB;;AAEA,MAAIkC,uCAAJ,EAAsC;AACpC,QAAIC,QAAQ,wBAAYrC,KAAZ,EAAmBoC,SAAnB,EAA8B,yBAA9B,CAAZ;;AAEA,QAAIC,mCAAJ,EAAkC;AAChC,aAAOA,MAAMb,KAAb;AACD;AACF,GAND,MAMO;AACL,QAAIc,UAAU,wBAAYtC,KAAZ,EAAmBE,UAAnB,EAA+B,UAA/B,CAAd;;AAEA,QAAIoC,yCAAkCA,qCAAtC,EAAsE;AACpE,aAAO9C,WAAW8C,QAAQd,KAAnB,CAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAEM,SAAS1B,6BAAT,CAAuC0B,KAAvC,EAA8D;AACnE,SAAO,MAAMhC,WAAWgC,KAAX,CAAN,GAA0B,GAAjC;AACD","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n// Warning: This code is experimental and might not fully work. There is no guarantee\n// that is up-to-date with the curent react-dom/server logic and there may also be\n// security holes in the string escaping because of this.\n\nimport type { Realm } from \"../../realm.js\";\nimport type { FunctionBodyAstNode } from \"../../types.js\";\nimport { parseExpression } from \"babylon\";\nimport {\n  AbstractObjectValue,\n  AbstractValue,\n  ECMAScriptSourceFunctionValue,\n  NumberValue,\n  ObjectValue,\n  StringValue,\n  Value,\n} from \"../../values/index.js\";\nimport { getProperty } from \"../utils.js\";\nimport invariant from \"../../invariant.js\";\nimport type { ReactNode } from \"./rendering.js\";\nimport { ROOT_ATTRIBUTE_NAME } from \"./dom-config.js\";\n\nconst matchHtmlRegExp = /[\"'&<>]/;\n\nexport function createMarkupForRoot(): string {\n  return ROOT_ATTRIBUTE_NAME + '=\"\"';\n}\n\nexport function isCustomComponent(\n  realm: Realm,\n  tagName: string,\n  propsValue: ObjectValue | AbstractObjectValue\n): boolean {\n  if (tagName.indexOf(\"-\") === -1) {\n    let is = getProperty(realm, propsValue, \"is\");\n    return is instanceof StringValue;\n  }\n  switch (tagName) {\n    case \"annotation-xml\":\n    case \"color-profile\":\n    case \"font-face\":\n    case \"font-face-src\":\n    case \"font-face-uri\":\n    case \"font-face-format\":\n    case \"font-face-name\":\n    case \"missing-glyph\":\n      return false;\n    default:\n      return true;\n  }\n}\n\n// $FlowFixMe: we don't want to provides types here as we inject this function into source\nexport function escapeHtml(string): string {\n  if (typeof string === \"boolean\" || typeof string === \"number\") {\n    return \"\" + string;\n  }\n  let str = \"\" + string;\n  let match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  let escape;\n  let html = \"\";\n  let index = 0;\n  let lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 39:\n        escape = \"&#x27;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n}\n\nexport function normalizeNode(realm: Realm, reactNode: ReactNode): ReactNode {\n  if (Array.isArray(reactNode)) {\n    let newReactNode;\n\n    for (let element of reactNode) {\n      if (typeof element === \"string\") {\n        if (newReactNode === undefined) {\n          newReactNode = element;\n        } else if (typeof newReactNode === \"string\") {\n          newReactNode += element;\n        } else {\n          let lastNode = newReactNode[newReactNode.length - 1];\n          if (typeof lastNode === \"string\") {\n            newReactNode[newReactNode.length - 1] += element;\n          } else {\n            newReactNode.push(element);\n          }\n        }\n      } else if (newReactNode === undefined) {\n        newReactNode = ([element]: Array<ReactNode>);\n      } else if (typeof newReactNode === \"string\") {\n        newReactNode = ([newReactNode, element]: Array<ReactNode>);\n      } else {\n        newReactNode.push(element);\n      }\n    }\n    invariant(newReactNode !== undefined);\n    return newReactNode;\n  } else if (typeof reactNode === \"string\" || reactNode instanceof AbstractValue) {\n    return reactNode;\n  }\n  invariant(false, \"TODO\");\n}\n\nexport function convertValueToNode(value: Value): ReactNode {\n  if (value instanceof AbstractValue) {\n    return value;\n  } else if (value instanceof StringValue || value instanceof NumberValue) {\n    return value.value + \"\";\n  }\n  invariant(false, \"TODO\");\n}\n\nexport function createHtmlEscapeHelper(realm: Realm): ECMAScriptSourceFunctionValue {\n  let escapeHelperAst = parseExpression(escapeHtml.toString(), { plugins: [\"flow\"] });\n  let helper = new ECMAScriptSourceFunctionValue(realm);\n  let body = escapeHelperAst.body;\n  ((body: any): FunctionBodyAstNode).uniqueOrderedTag = realm.functionBodyUniqueTagSeed++;\n  helper.$ECMAScriptCode = body;\n  helper.$FormalParameters = escapeHelperAst.params;\n  return helper;\n}\n\nexport function createArrayHelper(realm: Realm): ECMAScriptSourceFunctionValue {\n  let arrayHelper = `\n    function arrayHelper(array) {\n      let length = array.length;\n      let i = 0;\n      let str = \"\";\n      let item;\n\n      while (i < length) {\n        item = array[i++];\n        if (previousWasTextNode === true) {\n          str += \"<!-- -->\" + item;\n        } else {\n          str += item;\n        }\n        previousWasTextNode = item[0] !== \"<\";\n      }\n      return str;\n    }\n  `;\n\n  let escapeHelperAst = parseExpression(arrayHelper, { plugins: [\"flow\"] });\n  let helper = new ECMAScriptSourceFunctionValue(realm);\n  let body = escapeHelperAst.body;\n  ((body: any): FunctionBodyAstNode).uniqueOrderedTag = realm.functionBodyUniqueTagSeed++;\n  helper.$ECMAScriptCode = body;\n  helper.$FormalParameters = escapeHelperAst.params;\n  return helper;\n}\n\nexport function getNonChildrenInnerMarkup(\n  realm: Realm,\n  propsValue: ObjectValue | AbstractObjectValue\n): ReactNode | null {\n  let innerHTML = getProperty(realm, propsValue, \"dangerouslySetInnerHTML\");\n\n  if (innerHTML instanceof ObjectValue) {\n    let _html = getProperty(realm, innerHTML, \"dangerouslySetInnerHTML\");\n\n    if (_html instanceof StringValue) {\n      return _html.value;\n    }\n  } else {\n    let content = getProperty(realm, propsValue, \"children\");\n\n    if (content instanceof StringValue || content instanceof NumberValue) {\n      return escapeHtml(content.value);\n    }\n  }\n  return null;\n}\n\nexport function quoteAttributeValueForBrowser(value: string): string {\n  return '\"' + escapeHtml(value) + '\"';\n}\n"]}