{"version":3,"sources":["../../src/react/elements.js"],"names":["cloneReactElement","createReactElement","traverseReactElement","t","createPropsObject","realm","type","config","children","activeReconciler","react","firstRenderOnly","undefined","componentTreeConfig","defaultProps","intrinsics","props","ObjectCreate","ObjectPrototype","makeFinal","reactProps","add","key","null","ref","diagnostic","currentLocation","handleError","possibleKey","keyNotNeeded","properties","has","emptyString","possibleRef","refNotNeeded","setProp","name","value","applyProperties","propKey","binding","descriptor","enumerable","isPartialObject","isSimpleObject","defaultPropsEvaluated","propName","propBinding","get","size","makePartial","makeSimple","createFromType","condition","createFromBinaryOp","conditionalChildren","createFromConditionalOp","defaultPropsHelper","snapshot","getSnapshot","temporalAlias","temporalArgs","temporalTo","createTemporalFromBuildFunction","methodNode","_args","callExpression","skipInvariant","values","splitReactElementsByConditionalType","condValue","consequentVal","alternateVal","evaluateWithAbstractConditional","evaluateForEffects","splitReactElementsByConditionalConfig","reactElement","elementProps","elementChildren","kind","args","traversalVisitor","typeValue","visitType","keyValue","visitKey","refValue","visitRef","handleChildren","propsValue","childrenValue","intrinsicName","childrenLength","childrenLengthValue","i","child","visitChildNode","visitAbstractOrPartialProps","visitConcreteProps"],"mappings":"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","file":"elements.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../realm.js\";\nimport { ValuesDomain } from \"../domains/index.js\";\nimport {\n  AbstractValue,\n  AbstractObjectValue,\n  ArrayValue,\n  NullValue,\n  NumberValue,\n  ObjectValue,\n  Value,\n} from \"../values/index.js\";\nimport { Create } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport { Get } from \"../methods/index.js\";\nimport {\n  applyObjectAssignConfigsForReactElement,\n  createInternalReactElement,\n  flagPropsWithNoPartialKeyOrRef,\n  hardModifyReactObjectPropertyBinding,\n  getProperty,\n  hasNoPartialKeyOrRef,\n} from \"./utils.js\";\nimport * as t from \"babel-types\";\nimport { computeBinary } from \"../evaluators/BinaryExpression.js\";\nimport { CompilerDiagnostic, FatalError } from \"../errors.js\";\n\nfunction createPropsObject(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractObjectValue,\n  children: void | Value\n): { key: Value, ref: Value, props: ObjectValue } {\n  // If we're in \"rendering\" a React component tree, we should have an active reconciler\n  let activeReconciler = realm.react.activeReconciler;\n  let firstRenderOnly = activeReconciler !== undefined ? activeReconciler.componentTreeConfig.firstRenderOnly : false;\n  let defaultProps =\n    type instanceof ObjectValue || type instanceof AbstractObjectValue\n      ? Get(realm, type, \"defaultProps\")\n      : realm.intrinsics.undefined;\n\n  let props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  props.makeFinal();\n  realm.react.reactProps.add(props);\n\n  let key = realm.intrinsics.null;\n  let ref = realm.intrinsics.null;\n\n  if (!hasNoPartialKeyOrRef(realm, config)) {\n    // if either are abstract, this will impact the reconcilation process\n    // and ultimately prevent us from folding ReactElements properly\n    let diagnostic = new CompilerDiagnostic(\n      `unable to evaluate \"key\" and \"ref\" on a ReactElement due to an abstract config passed to createElement`,\n      realm.currentLocation,\n      \"PP0025\",\n      \"FatalError\"\n    );\n    realm.handleError(diagnostic);\n    if (realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n  }\n\n  let possibleKey = Get(realm, config, \"key\");\n  if (possibleKey !== realm.intrinsics.null && possibleKey !== realm.intrinsics.undefined) {\n    // if the config has been marked as having no partial key or ref and the possible key\n    // is abstract, yet the config doesn't have a key property, then the key can remain null\n    let keyNotNeeded =\n      hasNoPartialKeyOrRef(realm, config) &&\n      possibleKey instanceof AbstractValue &&\n      config instanceof ObjectValue &&\n      !config.properties.has(\"key\");\n\n    if (!keyNotNeeded) {\n      key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, possibleKey);\n    }\n  }\n\n  let possibleRef = Get(realm, config, \"ref\");\n  if (possibleRef !== realm.intrinsics.null && possibleRef !== realm.intrinsics.undefined && !firstRenderOnly) {\n    // if the config has been marked as having no partial key or ref and the possible ref\n    // is abstract, yet the config doesn't have a ref property, then the ref can remain null\n    let refNotNeeded =\n      hasNoPartialKeyOrRef(realm, config) &&\n      possibleRef instanceof AbstractValue &&\n      config instanceof ObjectValue &&\n      !config.properties.has(\"ref\");\n\n    if (!refNotNeeded) {\n      ref = possibleRef;\n    }\n  }\n\n  const setProp = (name: string, value: Value): void => {\n    if (name !== \"__self\" && name !== \"__source\" && name !== \"key\" && name !== \"ref\") {\n      invariant(props instanceof ObjectValue);\n      hardModifyReactObjectPropertyBinding(realm, props, name, value);\n    }\n  };\n\n  const applyProperties = () => {\n    if (config instanceof ObjectValue) {\n      for (let [propKey, binding] of config.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          setProp(propKey, Get(realm, config, propKey));\n        }\n      }\n    }\n  };\n\n  if (\n    (config instanceof AbstractObjectValue && config.isPartialObject()) ||\n    (config instanceof ObjectValue && config.isPartialObject() && config.isSimpleObject())\n  ) {\n    // create a new props object that will be the target of the Object.assign\n    props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n    realm.react.reactProps.add(props);\n\n    applyObjectAssignConfigsForReactElement(realm, props, [config]);\n    props.makeFinal();\n\n    if (children !== undefined) {\n      hardModifyReactObjectPropertyBinding(realm, props, \"children\", children);\n    }\n\n    // handle default props on a partial/abstract config\n    if (defaultProps !== realm.intrinsics.undefined) {\n      let defaultPropsEvaluated = 0;\n\n      // first see if we can apply all the defaultProps without needing the helper\n      if (defaultProps instanceof ObjectValue && !defaultProps.isPartialObject()) {\n        for (let [propName, binding] of defaultProps.properties) {\n          if (binding.descriptor !== undefined && binding.descriptor.value !== realm.intrinsics.undefined) {\n            // see if we have this on our props object\n            let propBinding = props.properties.get(propName);\n            // if the binding exists and value is abstract, it might be undefined\n            // so in that case we need the helper, otherwise we can continue\n            if (\n              propBinding !== undefined &&\n              !(propBinding.descriptor && propBinding.descriptor.value instanceof AbstractValue)\n            ) {\n              defaultPropsEvaluated++;\n              // if the value we have is undefined, we can apply the defaultProp\n              if (propBinding.descriptor && propBinding.descriptor.value === realm.intrinsics.undefined) {\n                hardModifyReactObjectPropertyBinding(realm, props, propName, Get(realm, defaultProps, propName));\n              }\n            }\n          }\n        }\n      }\n      // if defaultPropsEvaluated === the amount of properties defaultProps has, then we've successfully\n      // ensured all the defaultProps have already been dealt with, so we don't need the helper\n      if (\n        !(defaultProps instanceof ObjectValue) ||\n        (defaultProps.isPartialObject() || defaultPropsEvaluated !== defaultProps.properties.size)\n      ) {\n        props.makePartial();\n        props.makeSimple();\n        // if the props has any properties that are \"undefined\", we need to make them abstract\n        // as the helper function applies defaultProps on values that are undefined or do not\n        // exist\n        for (let [propName, binding] of props.properties) {\n          if (binding.descriptor !== undefined && binding.descriptor.value === realm.intrinsics.undefined) {\n            hardModifyReactObjectPropertyBinding(realm, props, propName, AbstractValue.createFromType(realm, Value));\n          }\n        }\n        // if we have children and they are abstract, they might be undefined at runtime\n        if (children !== undefined && children instanceof AbstractValue) {\n          // children === undefined ? defaultProps.children : children;\n          let condition = AbstractValue.createFromBinaryOp(realm, \"===\", children, realm.intrinsics.undefined);\n          invariant(defaultProps instanceof AbstractObjectValue || defaultProps instanceof ObjectValue);\n          let conditionalChildren = AbstractValue.createFromConditionalOp(\n            realm,\n            condition,\n            Get(realm, defaultProps, \"children\"),\n            children\n          );\n          hardModifyReactObjectPropertyBinding(realm, props, \"children\", conditionalChildren);\n        }\n        let defaultPropsHelper = realm.react.defaultPropsHelper;\n        invariant(defaultPropsHelper !== undefined);\n        let snapshot = props.getSnapshot();\n        props.temporalAlias = snapshot;\n        let temporalArgs = [defaultPropsHelper, snapshot, defaultProps];\n        let temporalTo = AbstractValue.createTemporalFromBuildFunction(\n          realm,\n          ObjectValue,\n          temporalArgs,\n          ([methodNode, ..._args]) => {\n            return t.callExpression(methodNode, ((_args: any): Array<any>));\n          },\n          { skipInvariant: true }\n        );\n        invariant(temporalTo instanceof AbstractObjectValue);\n        if (props instanceof AbstractObjectValue) {\n          temporalTo.values = props.values;\n        } else {\n          invariant(props instanceof ObjectValue);\n          temporalTo.values = new ValuesDomain(props);\n        }\n        props.temporalAlias = temporalTo;\n      }\n    }\n  } else {\n    applyProperties();\n\n    if (children !== undefined) {\n      setProp(\"children\", children);\n    }\n\n    if (defaultProps instanceof ObjectValue) {\n      for (let [propKey, binding] of defaultProps.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          if (Get(realm, props, propKey) === realm.intrinsics.undefined) {\n            setProp(propKey, Get(realm, defaultProps, propKey));\n          }\n        }\n      }\n    } else if (defaultProps instanceof AbstractObjectValue) {\n      invariant(false, \"TODO: we need to eventually support this\");\n    }\n  }\n  invariant(props instanceof ObjectValue);\n  // We know the props has no keys because if it did it would have thrown above\n  // so we can remove them the props we create.\n  flagPropsWithNoPartialKeyOrRef(realm, props);\n  return { key, props, ref };\n}\n\nfunction splitReactElementsByConditionalType(\n  realm: Realm,\n  condValue: AbstractValue,\n  consequentVal: Value,\n  alternateVal: Value,\n  config: ObjectValue | AbstractObjectValue,\n  children: void | Value\n): Value {\n  return realm.evaluateWithAbstractConditional(\n    condValue,\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, consequentVal, config, children),\n        null,\n        \"splitReactElementsByConditionalType consequent\"\n      );\n    },\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, alternateVal, config, children),\n        null,\n        \"splitReactElementsByConditionalType alternate\"\n      );\n    }\n  );\n}\n\nfunction splitReactElementsByConditionalConfig(\n  realm: Realm,\n  condValue: AbstractValue,\n  consequentVal: ObjectValue | AbstractObjectValue,\n  alternateVal: ObjectValue | AbstractObjectValue,\n  type: Value,\n  children: void | Value\n): Value {\n  return realm.evaluateWithAbstractConditional(\n    condValue,\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, type, consequentVal, children),\n        null,\n        \"splitReactElementsByConditionalConfig consequent\"\n      );\n    },\n    () => {\n      return realm.evaluateForEffects(\n        () => createReactElement(realm, type, alternateVal, children),\n        null,\n        \"splitReactElementsByConditionalConfig alternate\"\n      );\n    }\n  );\n}\n\nexport function cloneReactElement(\n  realm: Realm,\n  reactElement: ObjectValue,\n  config: ObjectValue | AbstractObjectValue | NullValue,\n  children: void | Value\n): ObjectValue {\n  let props = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n  realm.react.reactProps.add(props);\n\n  const setProp = (name: string, value: Value): void => {\n    if (name !== \"__self\" && name !== \"__source\" && name !== \"key\" && name !== \"ref\") {\n      invariant(props instanceof ObjectValue);\n      hardModifyReactObjectPropertyBinding(realm, props, name, value);\n    }\n  };\n\n  applyObjectAssignConfigsForReactElement(realm, props, [config]);\n  props.makeFinal();\n\n  let key = getProperty(realm, reactElement, \"key\");\n  let ref = getProperty(realm, reactElement, \"ref\");\n  let type = getProperty(realm, reactElement, \"type\");\n\n  if (!(config instanceof NullValue)) {\n    let possibleKey = Get(realm, config, \"key\");\n    if (possibleKey !== realm.intrinsics.null && possibleKey !== realm.intrinsics.undefined) {\n      // if the config has been marked as having no partial key or ref and the possible key\n      // is abstract, yet the config doesn't have a key property, then the key can remain null\n      let keyNotNeeded =\n        hasNoPartialKeyOrRef(realm, config) &&\n        possibleKey instanceof AbstractValue &&\n        config instanceof ObjectValue &&\n        !config.properties.has(\"key\");\n\n      if (!keyNotNeeded) {\n        key = computeBinary(realm, \"+\", realm.intrinsics.emptyString, possibleKey);\n      }\n    }\n\n    let possibleRef = Get(realm, config, \"ref\");\n    if (possibleRef !== realm.intrinsics.null && possibleRef !== realm.intrinsics.undefined) {\n      // if the config has been marked as having no partial key or ref and the possible ref\n      // is abstract, yet the config doesn't have a ref property, then the ref can remain null\n      let refNotNeeded =\n        hasNoPartialKeyOrRef(realm, config) &&\n        possibleRef instanceof AbstractValue &&\n        config instanceof ObjectValue &&\n        !config.properties.has(\"ref\");\n\n      if (!refNotNeeded) {\n        ref = possibleRef;\n      }\n    }\n    let defaultProps =\n      type instanceof ObjectValue || type instanceof AbstractObjectValue\n        ? Get(realm, type, \"defaultProps\")\n        : realm.intrinsics.undefined;\n\n    if (defaultProps instanceof ObjectValue) {\n      for (let [propKey, binding] of defaultProps.properties) {\n        if (binding && binding.descriptor && binding.descriptor.enumerable) {\n          if (Get(realm, props, propKey) === realm.intrinsics.undefined) {\n            setProp(propKey, Get(realm, defaultProps, propKey));\n          }\n        }\n      }\n    } else if (defaultProps instanceof AbstractObjectValue) {\n      invariant(false, \"TODO: we need to eventually support this\");\n    }\n  }\n\n  if (children !== undefined) {\n    hardModifyReactObjectPropertyBinding(realm, props, \"children\", children);\n  } else {\n    let elementProps = getProperty(realm, reactElement, \"props\");\n    invariant(elementProps instanceof ObjectValue);\n    let elementChildren = getProperty(realm, elementProps, \"children\");\n    hardModifyReactObjectPropertyBinding(realm, props, \"children\", elementChildren);\n  }\n\n  return createInternalReactElement(realm, type, key, ref, props);\n}\n\nexport function createReactElement(\n  realm: Realm,\n  type: Value,\n  config: ObjectValue | AbstractObjectValue,\n  children: void | Value\n): Value {\n  if (type instanceof AbstractValue && type.kind === \"conditional\") {\n    let [condValue, consequentVal, alternateVal] = type.args;\n    invariant(condValue instanceof AbstractValue);\n    return splitReactElementsByConditionalType(realm, condValue, consequentVal, alternateVal, config, children);\n  } else if (config instanceof AbstractObjectValue && config.kind === \"conditional\") {\n    let [condValue, consequentVal, alternateVal] = config.args;\n    invariant(condValue instanceof AbstractValue);\n    invariant(consequentVal instanceof ObjectValue || consequentVal instanceof AbstractObjectValue);\n    invariant(alternateVal instanceof ObjectValue || alternateVal instanceof AbstractObjectValue);\n    return splitReactElementsByConditionalConfig(realm, condValue, consequentVal, alternateVal, type, children);\n  }\n  let { key, props, ref } = createPropsObject(realm, type, config, children);\n  return createInternalReactElement(realm, type, key, ref, props);\n}\n\ntype ElementTraversalVisitor = {\n  visitType: (typeValue: Value) => void,\n  visitKey: (keyValue: Value) => void,\n  visitRef: (keyValue: Value) => void,\n  visitAbstractOrPartialProps: (propsValue: AbstractValue | ObjectValue) => void,\n  visitConcreteProps: (propsValue: ObjectValue) => void,\n  visitChildNode: (childValue: Value) => void,\n};\n\nexport function traverseReactElement(\n  realm: Realm,\n  reactElement: ObjectValue,\n  traversalVisitor: ElementTraversalVisitor\n): void {\n  let typeValue = getProperty(realm, reactElement, \"type\");\n  traversalVisitor.visitType(typeValue);\n\n  let keyValue = getProperty(realm, reactElement, \"key\");\n  if (keyValue !== realm.intrinsics.null && keyValue !== realm.intrinsics.undefined) {\n    traversalVisitor.visitKey(keyValue);\n  }\n\n  let refValue = getProperty(realm, reactElement, \"ref\");\n  if (refValue !== realm.intrinsics.null && refValue !== realm.intrinsics.undefined) {\n    traversalVisitor.visitRef(refValue);\n  }\n\n  const handleChildren = () => {\n    // handle children\n    invariant(propsValue instanceof ObjectValue);\n    if (propsValue.properties.has(\"children\")) {\n      let childrenValue = getProperty(realm, propsValue, \"children\");\n      if (childrenValue !== realm.intrinsics.undefined && childrenValue !== realm.intrinsics.null) {\n        if (childrenValue instanceof ArrayValue && !childrenValue.intrinsicName) {\n          let childrenLength = getProperty(realm, childrenValue, \"length\");\n          let childrenLengthValue = 0;\n          if (childrenLength instanceof NumberValue) {\n            childrenLengthValue = childrenLength.value;\n            for (let i = 0; i < childrenLengthValue; i++) {\n              let child = getProperty(realm, childrenValue, \"\" + i);\n              traversalVisitor.visitChildNode(child);\n            }\n          }\n        } else {\n          traversalVisitor.visitChildNode(childrenValue);\n        }\n      }\n    }\n  };\n\n  let propsValue = getProperty(realm, reactElement, \"props\");\n  if (propsValue instanceof AbstractValue) {\n    // visit object, as it's going to be spread\n    traversalVisitor.visitAbstractOrPartialProps(propsValue);\n  } else if (propsValue instanceof ObjectValue) {\n    if (propsValue.isPartialObject()) {\n      traversalVisitor.visitAbstractOrPartialProps(propsValue);\n      handleChildren();\n    } else {\n      traversalVisitor.visitConcreteProps(propsValue);\n      handleChildren();\n    }\n  }\n}\n"]}