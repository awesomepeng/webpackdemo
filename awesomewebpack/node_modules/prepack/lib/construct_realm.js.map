{"version":3,"sources":["../src/construct_realm.js"],"names":["opts","debuggerConfigArgs","statistics","undefined","r","debugChannel","debuggerIsAttached","debuggerInstance","i","intrinsics","$GlobalObject","ObjectPrototype","name","evaluators","partialEvaluators","simplifyAndRefineAbstractValue","bind","simplifyAndRefineAbstractCondition","$GlobalEnv","NewGlobalEnvironment"],"mappings":";;;;;;kBA0Be,UACbA,OAAqB,EADR,EAEbC,kBAFa,EAGbC,aAAqCC,SAHxB,EAIN;AACP;AACA,MAAIC,IAAI,iBAAUJ,IAAV,EAAgBE,cAAc,iCAA9B,CAAR;AACA;AACA,MAAID,kBAAJ,EAAwB;AACtB,QAAII,eAAeJ,mBAAmBI,YAAtC;AACA,QAAIA,YAAJ,EAAkB;AAChB,+BAAUA,aAAaC,kBAAb,EAAV,EAA6C,kDAA7C;AACAF,QAAEG,gBAAF,GAAqB,0BAAgBF,YAAhB,EAA8BD,CAA9B,EAAiCH,kBAAjC,CAArB;AACD;AACF;;AAED,MAAIO,IAAIJ,EAAEK,UAAV;AACA,yBAAqBD,CAArB,EAAwBJ,CAAxB;AACA;AACA;AACAA,IAAEM,aAAF,GAAkB,wBAAgBN,CAAhB,EAAmBI,EAAEG,eAArB,EAAsC,QAAtC,CAAlB;AACA,wBAAiBP,CAAjB;AACA,OAAK,IAAIQ,IAAT,IAAiBC,UAAjB,EAA6BT,EAAES,UAAF,CAAaD,IAAb,IAAqBC,WAAWD,IAAX,CAArB;AAC7B,OAAK,IAAIA,IAAT,IAAiBE,iBAAjB,EAAoCV,EAAEU,iBAAF,CAAoBF,IAApB,IAA4BE,kBAAkBF,IAAlB,CAA5B;AACpCR,IAAEW,8BAAF,GAAmC,qBAA+BC,IAA/B,CAAoC,IAApC,EAA0CZ,CAA1C,EAA6C,KAA7C,CAAnC;AACAA,IAAEa,kCAAF,GAAuC,qBAA+BD,IAA/B,CAAoC,IAApC,EAA0CZ,CAA1C,EAA6C,IAA7C,CAAvC;AACAA,IAAEc,UAAF,GAAe,wBAAYC,oBAAZ,CAAiCf,CAAjC,EAAoCA,EAAEM,aAAtC,EAAqDN,EAAEM,aAAvD,CAAf;AACA,SAAON,CAAP;AACD,C;;AA3CD;;AACA;;;;AACA;;AACA;;;;AAEA;;AACA;;IAAYS,U;;AACZ;;IAAYC,iB;;AACZ;;AACA;;AACA;;AACA;;;;AACA","file":"construct_realm.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { Realm } from \"./realm.js\";\nimport initializeSingletons from \"./initialize-singletons.js\";\nimport { initialize as initializeIntrinsics } from \"./intrinsics/index.js\";\nimport initializeGlobal from \"./intrinsics/ecma262/global.js\";\nimport type { RealmOptions } from \"./options.js\";\nimport { RealmStatistics } from \"./statistics.js\";\nimport * as evaluators from \"./evaluators/index.js\";\nimport * as partialEvaluators from \"./partial-evaluators/index.js\";\nimport { Environment } from \"./singletons.js\";\nimport { ObjectValue } from \"./values/index.js\";\nimport { DebugServer } from \"./debugger/server/Debugger.js\";\nimport simplifyAndRefineAbstractValue from \"./utils/simplifier.js\";\nimport invariant from \"./invariant.js\";\nimport type { DebuggerConfigArguments } from \"./types\";\n\nexport default function(\n  opts: RealmOptions = {},\n  debuggerConfigArgs: void | DebuggerConfigArguments,\n  statistics: void | RealmStatistics = undefined\n): Realm {\n  initializeSingletons();\n  let r = new Realm(opts, statistics || new RealmStatistics());\n  // Presence of debugChannel indicates we wish to use debugger.\n  if (debuggerConfigArgs) {\n    let debugChannel = debuggerConfigArgs.debugChannel;\n    if (debugChannel) {\n      invariant(debugChannel.debuggerIsAttached(), \"Debugger intends to be used but is not attached.\");\n      r.debuggerInstance = new DebugServer(debugChannel, r, debuggerConfigArgs);\n    }\n  }\n\n  let i = r.intrinsics;\n  initializeIntrinsics(i, r);\n  // TODO: Find a way to let different environments initialize their own global\n  // object for special magic host objects such as the window object in the DOM.\n  r.$GlobalObject = new ObjectValue(r, i.ObjectPrototype, \"global\");\n  initializeGlobal(r);\n  for (let name in evaluators) r.evaluators[name] = evaluators[name];\n  for (let name in partialEvaluators) r.partialEvaluators[name] = partialEvaluators[name];\n  r.simplifyAndRefineAbstractValue = simplifyAndRefineAbstractValue.bind(null, r, false);\n  r.simplifyAndRefineAbstractCondition = simplifyAndRefineAbstractValue.bind(null, r, true);\n  r.$GlobalEnv = Environment.NewGlobalEnvironment(r, r.$GlobalObject, r.$GlobalObject);\n  return r;\n}\n"]}