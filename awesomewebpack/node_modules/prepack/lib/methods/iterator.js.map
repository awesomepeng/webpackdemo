{"version":3,"sources":["../../src/methods/iterator.js"],"names":["GetIterator","IteratorStep","IteratorValue","IteratorComplete","IteratorNext","CreateListIterator","CreateMapIterator","CreateSetIterator","IteratorClose","IterableToList","realm","obj","intrinsics","undefined","_method","method","SymbolIterator","iterator","createErrorThrowCompletion","TypeError","result","done","iterResult","ToBooleanPartial","value","list","ObjectCreate","IteratorPrototype","$IteratorNext","$IteratedList","$ListIteratorNextIndex","next","ListIterator_next","CreateMethodProperty","func","context","O","f","index","len","length","CreateIterResultObject","map","kind","$MapData","MapIteratorPrototype","$Map","$MapNextIndex","$MapIterationKind","set","$SetData","SetIteratorPrototype","$IteratedSet","$SetNextIndex","$SetIterationKind","completion","ret","innerResult","throwIfNotConcrete","error","items","values","nextValue","push"],"mappings":"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","file":"iterator.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { CallableObjectValue } from \"../types.js\";\nimport { Completion, AbruptCompletion, ThrowCompletion } from \"../completions.js\";\nimport { NativeFunctionValue, NumberValue, ObjectValue, StringValue, UndefinedValue, Value } from \"../values/index.js\";\nimport { Call, Get, GetMethod, Invoke } from \"./index.js\";\nimport invariant from \"../invariant.js\";\nimport type { IterationKind } from \"../types.js\";\nimport { SameValue } from \"./abstract.js\";\nimport { Create, To } from \"../singletons.js\";\n\n// ECMA262 7.4.1\nexport function GetIterator(realm: Realm, obj: Value = realm.intrinsics.undefined, _method?: Value): ObjectValue {\n  let method = _method;\n  // 1. If method was not passed, then\n  if (!method) {\n    // a. Let method be ? GetMethod(obj, @@iterator).\n    method = GetMethod(realm, obj, realm.intrinsics.SymbolIterator);\n  }\n\n  // 2. Let iterator be ? Call(method, obj).\n  let iterator = Call(realm, (method: Value), obj);\n\n  // 3. If Type(iterator) is not Object, throw a TypeError exception.\n  if (!(iterator instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.5\nexport function IteratorStep(realm: Realm, iterator: Value): false | ObjectValue {\n  // 1. Let result be ? IteratorNext(iterator).\n  let result = IteratorNext(realm, iterator);\n\n  // 2. Let done be ? IteratorComplete(result).\n  let done = IteratorComplete(realm, result);\n\n  // 3. If done is true, return false.\n  if (done) return false;\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.4\nexport function IteratorValue(realm: Realm, iterResult: ObjectValue): Value {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ? Get(iterResult, \"value\").\n  return Get(realm, iterResult, \"value\");\n}\n\n// ECMA262 7.4.2\nexport function IteratorComplete(realm: Realm, iterResult: ObjectValue): boolean {\n  // 1. Assert: Type(iterResult) is Object.\n  invariant(iterResult instanceof ObjectValue, \"expected obj\");\n\n  // 2. Return ToBoolean(? Get(iterResult, \"done\")).\n  return To.ToBooleanPartial(realm, Get(realm, iterResult, \"done\"));\n}\n\n// ECMA262 7.4.2\nexport function IteratorNext(realm: Realm, iterator: Value, value?: Value): ObjectValue {\n  // 1. If value was not passed, then\n  let result;\n  if (!value) {\n    // a. Let result be ? Invoke(iterator, \"next\", « »).\n    result = Invoke(realm, iterator, \"next\", []);\n  } else {\n    // 2. Else,\n    // a. Let result be ? Invoke(iterator, \"next\", « value »).\n    result = Invoke(realm, iterator, \"next\", [value]);\n  }\n\n  // 3. If Type(result) is not Object, throw a TypeError exception.\n  if (!(result instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. Return result.\n  return result;\n}\n\n// ECMA262 7.4.8\nexport function CreateListIterator(realm: Realm, list: Array<Value>): ObjectValue {\n  // 1. Let iterator be ObjectCreate(%IteratorPrototype%, « [[IteratorNext]], [[IteratedList]], [[ListIteratorNextIndex]] »).\n  let iterator = Create.ObjectCreate(realm, realm.intrinsics.IteratorPrototype, {\n    $IteratorNext: undefined,\n    $IteratedList: undefined,\n    $ListIteratorNextIndex: undefined,\n  });\n\n  // 2. Set iterator's [[IteratedList]] internal slot to list.\n  iterator.$IteratedList = list;\n\n  // 3. Set iterator's [[ListIteratorNextIndex]] internal slot to 0.\n  iterator.$ListIteratorNextIndex = 0;\n\n  // 4. Let next be a new built-in function object as defined in ListIterator next (7.4.8.1).\n  let next = ListIterator_next(realm);\n\n  // 5. Set iterator's [[IteratorNext]] internal slot to next.\n  iterator.$IteratorNext = next;\n\n  // 6. Perform CreateMethodProperty(iterator, \"next\", next).\n  Create.CreateMethodProperty(realm, iterator, new StringValue(realm, \"next\"), next);\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.8.1\nfunction ListIterator_next(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, undefined, \"next\", 0, context => {\n    invariant(context instanceof ObjectValue);\n\n    // 1. Let O be the this value.\n    let O = context;\n\n    // 2. Let f be the active function object.\n    let f = func;\n\n    // 3. If O does not have a [[IteratorNext]] internal slot, throw a TypeError exception.\n    if (!O.$IteratorNext) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[IteratorNext]] internal slot\"\n      );\n    }\n\n    // 4. Let next be the value of the [[IteratorNext]] internal slot of O.\n    let next = O.$IteratorNext;\n\n    // 5. If SameValue(f, next) is false, throw a TypeError exception.\n    if (!SameValue(realm, f, next)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 6. If O does not have an [[IteratedList]] internal slot, throw a TypeError exception.\n    if (!O.$IteratedList) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have an [[IteratedList]] internal slot\"\n      );\n    }\n\n    // 7. Let list be the value of the [[IteratedList]] internal slot of O.\n    let list = O.$IteratedList;\n\n    invariant(typeof O.$ListIteratorNextIndex === \"number\");\n\n    // 8. Let index be the value of the [[ListIteratorNextIndex]] internal slot of O.\n    // Default to 0 for Flow.\n    let index = O.$ListIteratorNextIndex;\n\n    // 9. Let len be the number of elements of list.\n    let len = list.length;\n\n    // 10. If index ≥ len, then\n    if (index >= len) {\n      // a. Return CreateIterResultObject(undefined, true).\n      return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    }\n\n    // 11. Set the value of the [[ListIteratorNextIndex]] internal slot of O to index+1.\n    O.$ListIteratorNextIndex = index + 1;\n\n    // 12. Return CreateIterResultObject(list[index], false).\n    return Create.CreateIterResultObject(realm, list[index], false);\n  });\n\n  return func;\n}\n\n// ECMA262 23.1.5.1\nexport function CreateMapIterator(realm: Realm, map: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(map) is not Object, throw a TypeError exception.\n  if (!(map instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If map does not have a [[MapData]] internal slot, throw a TypeError exception.\n  if (!map.$MapData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%MapIteratorPrototype%, « [[Map]], [[MapNextIndex]], [[MapIterationKind]] »).\n  let iterator = Create.ObjectCreate(realm, realm.intrinsics.MapIteratorPrototype, {\n    $Map: undefined,\n    $MapNextIndex: undefined,\n    $MapIterationKind: undefined,\n  });\n\n  // 4. Set iterator's [[Map]] internal slot to map.\n  iterator.$Map = map;\n\n  // 5. Set iterator's [[MapNextIndex]] internal slot to 0.\n  iterator.$MapNextIndex = new NumberValue(realm, 0);\n\n  // 6. Set iterator's [[MapIterationKind]] internal slot to kind.\n  iterator.$MapIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 23.2.5.1\nexport function CreateSetIterator(realm: Realm, set: Value, kind: IterationKind): ObjectValue {\n  // 1. If Type(set) is not Object, throw a TypeError exception.\n  if (!(set instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If set does not have a [[SetData]] internal slot, throw a TypeError exception.\n  if (!set.$SetData) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Let iterator be ObjectCreate(%SetIteratorPrototype%, « [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] »).\n  let iterator = Create.ObjectCreate(realm, realm.intrinsics.SetIteratorPrototype, {\n    $IteratedSet: undefined,\n    $SetNextIndex: undefined,\n    $SetIterationKind: undefined,\n  });\n\n  // 4. Set iterator's [[IteratedSet]] internal slot to set.\n  iterator.$IteratedSet = set;\n\n  // 5. Set iterator's [[SetNextIndex]] internal slot to 0.\n  iterator.$SetNextIndex = 0;\n\n  // 6. Set iterator's [[SetIterationKind]] internal slot to kind.\n  iterator.$SetIterationKind = kind;\n\n  // 7. Return iterator.\n  return iterator;\n}\n\n// ECMA262 7.4.6\nexport function IteratorClose(realm: Realm, iterator: ObjectValue, completion: Completion): Completion {\n  // 1. Assert: Type(iterator) is Object.\n  invariant(iterator instanceof ObjectValue, \"expected object\");\n\n  // 2. Assert: completion is a Completion Record.\n  invariant(completion instanceof Completion, \"expected completion record\");\n\n  // 3. Let return be ? GetMethod(iterator, \"return\").\n  let ret = GetMethod(realm, iterator, \"return\");\n\n  // 4. If return is undefined, return Completion(completion).\n  if (ret instanceof UndefinedValue) return completion;\n\n  // 5. Let innerResult be Call(return, iterator, « »).\n  let innerResult;\n  try {\n    innerResult = Call(realm, ret.throwIfNotConcrete(), iterator, []);\n  } catch (error) {\n    if (error instanceof AbruptCompletion) {\n      innerResult = error;\n    } else {\n      throw error;\n    }\n  }\n\n  // 6. If completion.[[Type]] is throw, return Completion(completion).\n  if (completion instanceof ThrowCompletion) return completion;\n\n  // 7. If innerResult.[[Type]] is throw, return Completion(innerResult).\n  if (innerResult instanceof ThrowCompletion) return innerResult;\n\n  // 8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.\n  if (!(innerResult instanceof ObjectValue)) {\n    return realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 9. Return Completion(completion).\n  return completion;\n}\n\n// ECMA262 22.2.2.1.1\nexport function IterableToList(realm: Realm, items: Value, method: CallableObjectValue): Array<Value> {\n  // 1. Let iterator be ? GetIterator(items, method).\n  let iterator = GetIterator(realm, items, method);\n\n  // 2. Let values be a new empty List.\n  let values = [];\n\n  // 3. Let next be true.\n  let next = true;\n\n  // 4. Repeat, while next is not false\n  while (next !== false) {\n    // a. Let next be ? IteratorStep(iterator).\n    next = IteratorStep(realm, iterator);\n\n    // b. If next is not false, then\n    if (next !== false) {\n      // i. Let nextValue be ? IteratorValue(next).\n      let nextValue = IteratorValue(realm, next);\n\n      // ii. Append nextValue to the end of the List values.\n      values.push(nextValue);\n    }\n  }\n\n  // 5. Return values.\n  return values;\n}\n"]}