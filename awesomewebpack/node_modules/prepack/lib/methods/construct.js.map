{"version":3,"sources":["../../src/methods/construct.js"],"names":["MakeConstructor","Construct","SpeciesConstructor","MakeClassConstructor","ConstructorMethod","NonConstructorMethodDefinitions","realm","F","_writablePrototype","_prototype","writablePrototype","prototype","$Construct","undefined","getExtensible","ObjectCreate","intrinsics","ObjectPrototype","originalConstructor","DefinePropertyOrThrow","value","writable","enumerable","configurable","_argumentsList","_newTarget","argumentsList","newTarget","O","defaultConstructor","C","mightNotBeObject","mightBeObject","throwIfNotConcrete","createErrorThrowCompletion","TypeError","S","SymbolSpecies","$FunctionKind","ClassElementList","ClassElement","length","empty","key","name","head","slice","list","push"],"mappings":"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","file":"construct.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport {\n  AbstractObjectValue,\n  ECMAScriptSourceFunctionValue,\n  ObjectValue,\n  UndefinedValue,\n  NullValue,\n  Value,\n  EmptyValue,\n} from \"../values/index.js\";\nimport { IsConstructor, IsStatic } from \"./is.js\";\nimport { Get } from \"./get.js\";\nimport { HasSomeCompatibleType } from \"./has.js\";\nimport { Create, Properties } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\nimport type { BabelNodeClassMethod } from \"babel-types\";\n\n// ECMA262 9.2.8\nexport function MakeConstructor(\n  realm: Realm,\n  F: ECMAScriptSourceFunctionValue,\n  _writablePrototype?: boolean,\n  _prototype?: ObjectValue\n): UndefinedValue {\n  let writablePrototype = _writablePrototype;\n  let prototype = _prototype;\n  // 1. Assert: F is an ECMAScript function object.\n  invariant(F instanceof ECMAScriptSourceFunctionValue, \"expected function value\");\n\n  // 2. Assert: F has a [[Construct]] internal method.\n  invariant(F.$Construct !== undefined, \"expected construct internal method\");\n\n  // 3. Assert: F is an extensible object that does not have a prototype own property.\n  invariant(F.getExtensible(), \"expected extensible object that doesn't have prototype own property\");\n\n  // 4. If the writablePrototype argument was not provided, let writablePrototype be true.\n  if (writablePrototype === null || writablePrototype === undefined) {\n    writablePrototype = true;\n  }\n\n  // 5. If the prototype argument was not provided, then\n  if (!prototype) {\n    // a. Let prototype be ObjectCreate(%ObjectPrototype%).\n    prototype = Create.ObjectCreate(realm, realm.intrinsics.ObjectPrototype);\n    prototype.originalConstructor = F;\n\n    // b. Perform ! DefinePropertyOrThrow(prototype, \"constructor\", PropertyDescriptor{[[Value]]: F, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: true }).\n    Properties.DefinePropertyOrThrow(realm, prototype, \"constructor\", {\n      value: F,\n      writable: writablePrototype,\n      enumerable: false,\n      configurable: true,\n    });\n  }\n\n  // 6. Perform ! DefinePropertyOrThrow(F, \"prototype\", PropertyDescriptor{[[Value]]: prototype, [[Writable]]: writablePrototype, [[Enumerable]]: false, [[Configurable]]: false}).\n  Properties.DefinePropertyOrThrow(realm, F, \"prototype\", {\n    value: prototype,\n    writable: writablePrototype,\n    enumerable: false,\n    configurable: false,\n  });\n\n  // 7. Return NormalCompletion(undefined).\n  return realm.intrinsics.undefined;\n}\n\n// ECMA262 7.3.13\nexport function Construct(\n  realm: Realm,\n  F: ObjectValue,\n  _argumentsList?: Array<Value>,\n  _newTarget?: ObjectValue\n): ObjectValue {\n  let argumentsList = _argumentsList;\n  let newTarget = _newTarget;\n  // If newTarget was not passed, let newTarget be F.\n  if (!newTarget) newTarget = F;\n\n  // If argumentsList was not passed, let argumentsList be a new empty List.\n  if (!argumentsList) argumentsList = [];\n\n  // Assert: IsConstructor(F) is true.\n  invariant(IsConstructor(realm, F), \"expected constructor\");\n\n  // Assert: IsConstructor(newTarget) is true.\n  invariant(IsConstructor(realm, newTarget), \"expected constructor\");\n\n  // Return ? F.[[Construct]](argumentsList, newTarget).\n  invariant(F.$Construct !== undefined, \"no construct method on realm value\");\n  return F.$Construct(argumentsList, newTarget);\n}\n\n// ECMA262 7.3.20\nexport function SpeciesConstructor(realm: Realm, O: ObjectValue, defaultConstructor: ObjectValue): ObjectValue {\n  // 1. Assert: Type(O) is Object.\n  invariant(O instanceof ObjectValue, \"Type(O) is Object\");\n\n  // 2. Let C be ? Get(O, \"constructor\").\n  let C = Get(realm, O, \"constructor\");\n\n  // 3. If C is undefined, return defaultConstructor.\n  if (C instanceof UndefinedValue) return defaultConstructor;\n\n  // 4. If Type(C) is not Object, throw a TypeError exception.\n  if (C.mightNotBeObject()) {\n    if (C.mightBeObject()) C.throwIfNotConcrete();\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(C) is not an object\");\n  }\n  invariant(C instanceof ObjectValue || C instanceof AbstractObjectValue);\n\n  // 5. Let S be ? Get(C, @@species).\n  let S = Get(realm, C, realm.intrinsics.SymbolSpecies);\n\n  // 6. If S is either undefined or null, return defaultConstructor.\n  if (HasSomeCompatibleType(S, UndefinedValue, NullValue)) return defaultConstructor;\n\n  // 7. If IsConstructor(S) is true, return S.\n  if (IsConstructor(realm, S)) {\n    invariant(S instanceof ObjectValue);\n    return S;\n  }\n\n  // 8. Throw a TypeError exception.\n  throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Throw a TypeError exception\");\n}\n\n// ECMA 9.2.9\nexport function MakeClassConstructor(realm: Realm, F: ECMAScriptSourceFunctionValue): UndefinedValue {\n  // 1. Assert: F is an ECMAScript function object.\n  invariant(F instanceof ECMAScriptSourceFunctionValue, \"expected function value\");\n\n  // 2. Assert: F’s [[FunctionKind]] internal slot is \"normal\".\n  invariant(F.$FunctionKind === \"normal\");\n\n  // 3. Set F’s [[FunctionKind]] internal slot to \"classConstructor\".\n  F.$FunctionKind = \"classConstructor\";\n\n  // 4. Return NormalCompletion(undefined).\n  return realm.intrinsics.undefined;\n}\n\n// ECMA 14.5.3\nexport function ConstructorMethod(\n  realm: Realm,\n  ClassElementList: Array<BabelNodeClassMethod>\n): EmptyValue | BabelNodeClassMethod {\n  let ClassElement;\n  // ClassElementList : ClassElement\n  if (ClassElementList.length === 1) {\n    ClassElement = ClassElementList[0];\n    // 1. If ClassElement is the production ClassElement : ; , return empty.\n    // It looks like Babel parses out ClassElements that are only ;\n\n    // 2. If IsStatic of ClassElement is true, return empty.\n    if (IsStatic(ClassElement)) {\n      return realm.intrinsics.empty;\n    }\n    // 3. If PropName of ClassElement is not \"constructor\", return empty.\n    if (ClassElement.key.name !== \"constructor\") {\n      return realm.intrinsics.empty;\n    }\n\n    // 4. Return ClassElement.\n    return ClassElement;\n  } else {\n    // ClassElementList : ClassElementList ClassElement\n    // 1. Let head be ConstructorMethod of ClassElementList.\n    let head = ConstructorMethod(realm, ClassElementList.slice(0, -1));\n    // 2. If head is not empty, return head.\n    if (!(head instanceof EmptyValue)) {\n      return head;\n    }\n\n    ClassElement = ClassElementList[ClassElementList.length - 1];\n    // 3. If ClassElement is the production ClassElement : ; , return empty.\n    // It looks like Babel parses out ClassElements that are only ;\n\n    // 4. If IsStatic of ClassElement is true, return empty.\n    if (IsStatic(ClassElement)) {\n      return realm.intrinsics.empty;\n    }\n    // If PropName of ClassElement is not \"constructor\", return empty.\n    if (ClassElement.key.name !== \"constructor\") {\n      return realm.intrinsics.empty;\n    }\n\n    // Return ClassElement.\n    return ClassElement;\n  }\n}\n\n// ECMA 14.5.10\nexport function NonConstructorMethodDefinitions(\n  realm: Realm,\n  ClassElementList: Array<BabelNodeClassMethod>\n): Array<BabelNodeClassMethod> {\n  let ClassElement;\n  // ClassElementList : ClassElement\n  if (ClassElementList.length === 1) {\n    ClassElement = ClassElementList[0];\n    // If ClassElement is the production ClassElement : ; , return a new empty List.\n\n    // If IsStatic of ClassElement is false and PropName of ClassElement is \"constructor\", return a new empty List.\n    if (!IsStatic(ClassElement) && ClassElement.key.name === \"constructor\") {\n      return [];\n    }\n    // Return a List containing ClassElement.\n    return [ClassElement];\n  } else {\n    // ClassElementList : ClassElementList ClassElement\n    ClassElement = ClassElementList[ClassElementList.length - 1];\n\n    // Let list be NonConstructorMethodDefinitions of ClassElementList.\n    let list = NonConstructorMethodDefinitions(realm, ClassElementList.slice(0, -1));\n\n    // If ClassElement is the production ClassElement : ; , return list.\n\n    // If IsStatic of ClassElement is false and PropName of ClassElement is \"constructor\", return list.\n    if (!IsStatic(ClassElement) && ClassElement.key.name === \"constructor\") {\n      return list;\n    }\n\n    // Append ClassElement to the end of list.\n    list.push(ClassElement);\n\n    // Return list.\n    return list;\n  }\n}\n"]}