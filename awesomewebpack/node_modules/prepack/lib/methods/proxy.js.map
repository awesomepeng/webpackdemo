{"version":3,"sources":["../../src/methods/proxy.js"],"names":["ProxyCall","ProxyConstruct","ProxyCreate","realm","O","thisArgument","argumentsList","handler","$ProxyHandler","createErrorThrowCompletion","intrinsics","TypeError","target","$ProxyTarget","trap","argArray","CreateArrayFromList","throwIfNotConcrete","newTarget","$Construct","newObj","_target","_handler","P","$Call","argsList"],"mappings":"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","file":"proxy.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport { ProxyValue, NullValue, ObjectValue, Value, UndefinedValue } from \"../values/index.js\";\nimport { IsCallable } from \"./is.js\";\nimport { GetMethod } from \"./get.js\";\nimport { Construct } from \"./construct.js\";\nimport { Call } from \"./call.js\";\nimport { Create } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\n\n// ECMA262 9.5.12\nexport function ProxyCall(realm: Realm, O: ProxyValue, thisArgument: Value, argumentsList: Array<Value>): Value {\n  // 1. Let handler be the value of the [[ProxyHandler]] internal slot of O.\n  let handler = O.$ProxyHandler;\n\n  // 2. If handler is null, throw a TypeError exception.\n  if (handler instanceof NullValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Assert: Type(handler) is Object.\n  invariant(handler instanceof ObjectValue, \"expected an object\");\n\n  // 4. Let target be the value of the [[ProxyTarget]] internal slot of O.\n  let target = O.$ProxyTarget;\n\n  // 5. Let trap be ? GetMethod(handler, \"apply\").\n  let trap = GetMethod(realm, handler, \"apply\");\n\n  // 6. If trap is undefined, then\n  if (trap instanceof UndefinedValue) {\n    // a. Return ? Call(target, thisArgument, argumentsList).\n    return Call(realm, target, thisArgument, argumentsList);\n  }\n\n  // 7. Let argArray be CreateArrayFromList(argumentsList).\n  let argArray = Create.CreateArrayFromList(realm, argumentsList);\n\n  // 8. Return ? Call(trap, handler, « target, thisArgument, argArray »).\n  return Call(realm, trap.throwIfNotConcrete(), handler, [target, thisArgument, argArray]);\n}\n\n// ECMA262 9.5.13\nexport function ProxyConstruct(\n  realm: Realm,\n  O: ProxyValue,\n  argumentsList: Array<Value>,\n  newTarget: ObjectValue\n): ObjectValue {\n  // 1. Let handler be the value of the [[ProxyHandler]] internal slot of O.\n  let handler = O.$ProxyHandler;\n\n  // 2. If handler is null, throw a TypeError exception.\n  if (handler instanceof NullValue) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 3. Assert: Type(handler) is Object.\n  invariant(handler instanceof ObjectValue, \"expected an object\");\n\n  // 4. Let target be the value of the [[ProxyTarget]] internal slot of O.\n  let target = O.$ProxyTarget;\n  invariant(target instanceof ObjectValue);\n\n  // 5. Let trap be ? GetMethod(handler, \"construct\").\n  let trap = GetMethod(realm, handler, \"construct\");\n\n  // 6. If trap is undefined, then\n  if (trap instanceof UndefinedValue) {\n    // a. Assert: target has a [[Construct]] internal method.\n    invariant(target.$Construct, \"expected construct method\");\n\n    // b. Return ? Construct(target, argumentsList, newTarget).\n    return Construct(realm, target, argumentsList, newTarget);\n  }\n\n  // 7. Let argArray be CreateArrayFromList(argumentsList).\n  let argArray = Create.CreateArrayFromList(realm, argumentsList);\n\n  // 8. Let newObj be ? Call(trap, handler, « target, argArray, newTarget »).\n  let newObj = Call(realm, trap.throwIfNotConcrete(), handler, [target, argArray, newTarget]).throwIfNotConcrete();\n\n  // 9. If Type(newObj) is not Object, throw a TypeError exception.\n  if (!(newObj instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 10. Return newObj.\n  return newObj;\n}\n\n// ECMA262 9.5.14\nexport function ProxyCreate(realm: Realm, _target: Value, _handler: Value): ProxyValue {\n  let handler = _handler;\n  let target = _target.throwIfNotConcrete();\n\n  // 1. If Type(target) is not Object, throw a TypeError exception.\n  if (!(target instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 2. If target is a Proxy exotic object and the value of the [[ProxyHandler]] internal slot of target is null, throw a TypeError exception.\n  if (target instanceof ProxyValue && (!target.$ProxyHandler || target.$ProxyHandler instanceof NullValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  handler = handler.throwIfNotConcrete();\n  // 3. If Type(handler) is not Object, throw a TypeError exception.\n  if (!(handler instanceof ObjectValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 4. If handler is a Proxy exotic object and the value of the [[ProxyHandler]] internal slot of handler is null, throw a TypeError exception.\n  if (handler instanceof ProxyValue && (!handler.$ProxyHandler || handler.$ProxyHandler instanceof NullValue)) {\n    throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n  }\n\n  // 5. Let P be a newly created object.\n  // 6. Set P's essential internal methods (except for [[Call]] and [[Construct]]) to the definitions specified in 9.5.\n  let P = new ProxyValue(realm);\n\n  // 7. If IsCallable(target) is true, then\n  if (IsCallable(realm, target)) {\n    // a. Set the [[Call]] internal method of P as specified in 9.5.12.\n    P.$Call = (thisArgument, argsList) => {\n      return ProxyCall(realm, P, thisArgument, argsList);\n    };\n\n    // b. If target has a [[Construct]] internal method, then\n    if (target.$Construct) {\n      // i. Set the [[Construct]] internal method of P as specified in 9.5.13.\n      P.$Construct = (argumentsList, newTarget) => {\n        return ProxyConstruct(realm, P, argumentsList, newTarget);\n      };\n    }\n  }\n\n  // 8. Set the [[ProxyTarget]] internal slot of P to target.\n  P.$ProxyTarget = target;\n\n  // 9. Set the [[ProxyHandler]] internal slot of P to handler.\n  P.$ProxyHandler = handler;\n\n  // 10. Return P.\n  return P;\n}\n"]}