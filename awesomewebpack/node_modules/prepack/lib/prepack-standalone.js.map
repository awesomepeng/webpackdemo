{"version":3,"sources":["../src/prepack-standalone.js"],"names":["prepackSources","sources","options","debuggerConfigArgs","statistics","undefined","realmOptions","errorHandler","realm","additionalGlobals","check","generator","pathConditions","logger","internalDebug","modules","logModules","delayUnsupportedRequires","accelerateUnsupportedRequires","result","$GlobalEnv","executeSources","checkResidualFunctions","code","map","serialize","residual","serializer","serialized","init","sourceMaps","debuggerInstance","shutdown","residualSources","filePath","outputFilename","fileContents","sourceMapContents","JSON","stringify","debugChannel","executePartialEvaluator","startFunc","totalToAnalyze","env","$GlobalObject","makeSimple","diag","suppressDiagnostics","handleError","severity","resolveInitializedModules","residualHeapVisitor","Map","visitRoots","hasErrors","totalFunctions","nonFatalFunctions","fi","functionInstances","values","fv","functionValue","console","log","thisValue","intrinsics","null","n","getLength","args","i","name","ob","createFromType","intrinsicName","evaluateForEffectsInGlobalEnv","e","prepackVersion"],"mappings":"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","file":"prepack-standalone.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\n/* APIs for running Prepack for code where a model of the environment is supplied as part of the code. */\n\nimport Serializer from \"./serializer/index.js\";\nimport construct_realm from \"./construct_realm.js\";\nimport initializeGlobals from \"./globals.js\";\nimport { EvaluateDirectCallWithArgList } from \"./methods/index.js\";\nimport { getRealmOptions, getSerializerOptions } from \"./prepack-options\";\nimport { FatalError } from \"./errors.js\";\nimport type { SourceFile } from \"./types.js\";\nimport { AbruptCompletion } from \"./completions.js\";\nimport type { PrepackOptions } from \"./prepack-options\";\nimport { defaultOptions } from \"./options\";\nimport invariant from \"./invariant.js\";\nimport { version } from \"../package.json\";\nimport { type SerializedResult } from \"./serializer/types.js\";\nimport { SerializerStatistics } from \"./serializer/statistics.js\";\nimport { ResidualHeapVisitor } from \"./serializer/ResidualHeapVisitor.js\";\nimport { Modules } from \"./utils/modules.js\";\nimport { Logger } from \"./utils/logger.js\";\nimport { Generator } from \"./utils/generator.js\";\nimport { AbstractObjectValue, AbstractValue, ObjectValue } from \"./values/index.js\";\nimport type { DebuggerConfigArguments } from \"./types\";\n\nexport function prepackSources(\n  sources: Array<SourceFile>,\n  options: PrepackOptions = defaultOptions,\n  debuggerConfigArgs: void | DebuggerConfigArguments,\n  statistics: SerializerStatistics | void = undefined\n): SerializedResult {\n  let realmOptions = getRealmOptions(options);\n  realmOptions.errorHandler = options.errorHandler;\n  let realm = construct_realm(realmOptions, debuggerConfigArgs, statistics || new SerializerStatistics());\n  initializeGlobals(realm);\n  if (typeof options.additionalGlobals === \"function\") {\n    options.additionalGlobals(realm);\n  }\n\n  if (options.check) {\n    realm.generator = new Generator(realm, \"main\", realm.pathConditions);\n    let logger = new Logger(realm, !!options.internalDebug);\n    let modules = new Modules(\n      realm,\n      logger,\n      !!options.logModules,\n      !!options.delayUnsupportedRequires,\n      !!options.accelerateUnsupportedRequires\n    );\n    let [result] = realm.$GlobalEnv.executeSources(sources);\n    if (result instanceof AbruptCompletion) throw result;\n    invariant(options.check);\n    checkResidualFunctions(modules, options.check[0], options.check[1]);\n    return { code: \"\", map: undefined };\n  } else if (options.serialize === true || options.residual !== true) {\n    let serializer = new Serializer(realm, getSerializerOptions(options));\n    let serialized = serializer.init(sources, options.sourceMaps);\n\n    //Turn off the debugger if there is one\n    if (realm.debuggerInstance) {\n      realm.debuggerInstance.shutdown();\n    }\n\n    if (!serialized) {\n      throw new FatalError(\"serializer failed\");\n    }\n\n    if (!options.residual) return serialized;\n    let residualSources = [\n      {\n        filePath: options.outputFilename || \"unknown\",\n        fileContents: serialized.code,\n        sourceMapContents: serialized.map && JSON.stringify(serialized.map),\n      },\n    ];\n    let debugChannel = debuggerConfigArgs ? debuggerConfigArgs.debugChannel : undefined;\n    realm = construct_realm(realmOptions, debugChannel);\n    initializeGlobals(realm);\n    if (typeof options.additionalGlobals === \"function\") {\n      options.additionalGlobals(realm);\n    }\n    realm.generator = new Generator(realm, \"main\", realm.pathConditions);\n    let result = realm.$GlobalEnv.executePartialEvaluator(residualSources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    return { ...result };\n  } else {\n    invariant(options.residual);\n    realm.generator = new Generator(realm, \"main\", realm.pathConditions);\n    let result = realm.$GlobalEnv.executePartialEvaluator(sources, options);\n    if (result instanceof AbruptCompletion) throw result;\n    return { ...result };\n  }\n}\n\nfunction checkResidualFunctions(modules: Modules, startFunc: number, totalToAnalyze: number) {\n  let realm = modules.realm;\n  let env = realm.$GlobalEnv;\n  realm.$GlobalObject.makeSimple();\n  let errorHandler = realm.errorHandler;\n  if (!errorHandler) errorHandler = (diag, suppressDiagnostics) => realm.handleError(diag);\n  realm.errorHandler = (diag, suppressDiagnostics) => {\n    invariant(errorHandler);\n    if (diag.severity === \"FatalError\") return errorHandler(diag, realm.suppressDiagnostics);\n    else return \"Recover\";\n  };\n  modules.resolveInitializedModules();\n  let residualHeapVisitor = new ResidualHeapVisitor(realm, modules.logger, modules, new Map(), \"NO_REFERENTIALIZE\");\n  residualHeapVisitor.visitRoots();\n  if (modules.logger.hasErrors()) return;\n  let totalFunctions = 0;\n  let nonFatalFunctions = 0;\n  for (let fi of residualHeapVisitor.functionInstances.values()) {\n    totalFunctions++;\n    if (totalFunctions <= startFunc) continue;\n    let fv = fi.functionValue;\n    console.log(\"analyzing: \" + totalFunctions);\n    let thisValue = realm.intrinsics.null;\n    let n = fv.getLength() || 0;\n    let args = [];\n    for (let i = 0; i < n; i++) {\n      let name = \"dummy parameter\";\n      let ob: AbstractObjectValue = (AbstractValue.createFromType(realm, ObjectValue, name): any);\n      ob.makeSimple(\"transitive\");\n      ob.intrinsicName = name;\n      args[i] = ob;\n    }\n    // todo: eventually join these effects, apply them to the global state and iterate to a fixed point\n    try {\n      realm.evaluateForEffectsInGlobalEnv(() =>\n        EvaluateDirectCallWithArgList(modules.realm, true, env, fv, fv, thisValue, args)\n      );\n      nonFatalFunctions++;\n    } catch (e) {}\n    if (totalFunctions >= startFunc + totalToAnalyze) break;\n  }\n  console.log(\n    `Analyzed ${totalToAnalyze} functions starting at ${startFunc} of which ${nonFatalFunctions} did not have fatal errors.`\n  );\n}\n\nexport const prepackVersion = version;\n"]}