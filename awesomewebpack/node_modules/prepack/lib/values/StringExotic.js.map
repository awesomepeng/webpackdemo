{"version":3,"sources":["../../src/values/StringExotic.js"],"names":["StringExotic","constructor","realm","intrinsicName","intrinsics","StringPrototype","$GetOwnProperty","P","desc","OrdinaryGetOwnProperty","$Realm","undefined","ThrowIfMightHaveBeenDeleted","value","index","CanonicalNumericIndexString","Infinity","str","$StringData","throwIfNotConcreteString","len","length","resultStr","charAt","writable","enumerable","configurable","$OwnPropertyKeys","keys","i","push","ToString","properties","getOwnPropertyKeysArray","key","filter","x","map","parseInt","ToInteger","sort","y","symbols"],"mappings":"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","file":"StringExotic.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../realm.js\";\nimport type { PropertyKeyValue, Descriptor } from \"../types.js\";\nimport { ObjectValue, NumberValue, StringValue } from \"../values/index.js\";\nimport { IsInteger, IsArrayIndex } from \"../methods/is.js\";\nimport { Properties, To } from \"../singletons.js\";\nimport invariant from \"../invariant\";\n\nexport default class StringExotic extends ObjectValue {\n  constructor(realm: Realm, intrinsicName?: string) {\n    super(realm, realm.intrinsics.StringPrototype, intrinsicName);\n  }\n\n  // ECMA262 9.4.3.1\n  $GetOwnProperty(P: PropertyKeyValue): Descriptor | void {\n    // 1. Assert: IsPropertyKey(P) is true.\n\n    // 2. Let desc be OrdinaryGetOwnProperty(S, P).\n    let desc = Properties.OrdinaryGetOwnProperty(this.$Realm, this, P);\n\n    // 3. If desc is not undefined, return desc.\n    if (desc !== undefined) {\n      Properties.ThrowIfMightHaveBeenDeleted(desc.value);\n      return desc;\n    }\n\n    // 4. If Type(P) is not String, return undefined.\n    if (typeof P !== \"string\" && !(P instanceof StringValue)) return undefined;\n\n    // 5. Let index be ! CanonicalNumericIndexString(P).\n    let index = To.CanonicalNumericIndexString(\n      this.$Realm,\n      typeof P === \"string\" ? new StringValue(this.$Realm, P) : P\n    );\n\n    // 6. If index is undefined, return undefined.\n    if (index === undefined || index === null) return undefined;\n\n    // 7. If IsInteger(index) is false, return undefined.\n    if (IsInteger(this.$Realm, index) === false) return undefined;\n\n    // 8. If index = -0, return undefined.\n    if (1.0 / index === -Infinity) return undefined;\n\n    // 9. Let str be the String value of S.[[StringData]].\n    let str = this.$StringData;\n    invariant(str);\n    str = str.throwIfNotConcreteString();\n\n    // 10. Let len be the number of elements in str.\n    let len = str.value.length;\n\n    // 11. If index < 0 or len ≤ index, return undefined.\n    if (index < 0 || len <= index) return undefined;\n\n    // 12. Let resultStr be a String value of length 1, containing one code unit from str, specifically the code unit at index index.\n    let resultStr = new StringValue(this.$Realm, str.value.charAt(index));\n\n    // 13. Return a PropertyDescriptor{[[Value]]: resultStr, [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false}.\n    return {\n      value: resultStr,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    };\n  }\n\n  // ECMA262 9.4.3.2\n  $OwnPropertyKeys(): Array<PropertyKeyValue> {\n    // 1. Let keys be a new empty List.\n    let keys = [];\n\n    // 2. Let str be the String value of O.[[StringData]].\n    let str = this.$StringData;\n    invariant(str);\n    str = str.throwIfNotConcreteString();\n\n    // 3. Let len be the number of elements in str.\n    let len = str.value.length;\n\n    // 4. For each integer i starting with 0 such that i < len, in ascending order,\n    for (let i = 0; i < len; ++i) {\n      // a. Add ! ToString(i) as the last element of keys.\n      keys.push(new StringValue(this.$Realm, To.ToString(this.$Realm, new NumberValue(this.$Realm, i))));\n    }\n\n    // 5. For each own property key P of O such that P is an integer index and ToInteger(P) ≥ len, in ascending numeric index order,\n    let properties = this.getOwnPropertyKeysArray();\n    for (let key of properties\n      .filter(x => IsArrayIndex(this.$Realm, x))\n      .map(x => parseInt(x, 10))\n      .filter(x => To.ToInteger(this.$Realm, x) >= len)\n      .sort((x, y) => x - y)) {\n      // i. Add P as the last element of keys.\n      keys.push(new StringValue(this.$Realm, key + \"\"));\n    }\n\n    // 6. For each own property key P of O such that Type(P) is String and P is not an integer index, in ascending chronological order of property creation,\n    for (let key of properties.filter(x => !IsArrayIndex(this.$Realm, x))) {\n      // i. Add P as the last element of keys.\n      keys.push(new StringValue(this.$Realm, key));\n    }\n\n    // 7. For each own property key P of O such that Type(P) is Symbol, in ascending chronological order of property creation,\n    for (let key of this.symbols.keys()) {\n      // i. Add P as the last element of keys.\n      keys.push(key);\n    }\n\n    // 12. Return keys.\n    return keys;\n  }\n}\n"]}