{"version":3,"sources":["../../src/partial-evaluators/ExpressionStatement.js"],"names":["ast","strictCode","env","realm","result","partial_expression_ast","io","partiallyEvaluateCompletionDeref","expression","partial_ast","t","expressionStatement"],"mappings":";;;;;;kBAoBe,UACbA,GADa,EAEbC,UAFa,EAGbC,GAHa,EAIbC,KAJa,EAKkE;AAC/E,MAAI,CAACC,MAAD,EAASC,sBAAT,EAAiCC,EAAjC,IAAuCJ,IAAIK,gCAAJ,CAAqCP,IAAIQ,UAAzC,EAAqDP,UAArD,CAA3C;AACA,MAAIQ,cAAcC,EAAEC,mBAAF,CAAuBN,sBAAvB,CAAlB;AACA,SAAO,CAACD,MAAD,EAASK,WAAT,EAAsBH,EAAtB,CAAP;AACD,C;;AAdD;;AACA;;AACA;;IAAYI,C","file":"ExpressionStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeExpressionStatement, BabelNodeStatement } from \"babel-types\";\nimport type { LexicalEnvironment } from \"../environment.js\";\nimport type { Realm } from \"../realm.js\";\n\nimport { Completion } from \"../completions.js\";\nimport { Value } from \"../values/index.js\";\nimport * as t from \"babel-types\";\n\n// ECMA262 13.5.1\nexport default function(\n  ast: BabelNodeExpressionStatement,\n  strictCode: boolean,\n  env: LexicalEnvironment,\n  realm: Realm\n): [Completion | Value, BabelNodeExpressionStatement, Array<BabelNodeStatement>] {\n  let [result, partial_expression_ast, io] = env.partiallyEvaluateCompletionDeref(ast.expression, strictCode);\n  let partial_ast = t.expressionStatement((partial_expression_ast: any));\n  return [result, partial_ast, io];\n}\n"]}