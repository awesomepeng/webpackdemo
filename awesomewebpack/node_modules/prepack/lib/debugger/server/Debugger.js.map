{"version":3,"sources":["../../../src/debugger/server/Debugger.js"],"names":["DebugServer","constructor","channel","realm","configArgs","_channel","_realm","_breakpointManager","_variableManager","_stepManager","_stopEventManager","_diagnosticSeverity","diagnosticSeverity","_sourceMapManager","buckRoot","sourcemaps","waitForRun","undefined","loc","keepRunning","request","readIn","processDebuggerCommand","checkForActions","ast","_checkAndUpdateLastExecuted","stoppables","getAndDeleteCompletedSteppers","breakpoint","getStoppableBreakpoint","push","reason","getDebuggeeStopReason","location","source","absolutePath","relativeToAbsolute","sendStoppedResponse","start","line","column","requestID","id","command","args","arguments","kind","bp","breakpoints","filePath","absoluteToRelative","BREAKPOINT_ADD_COMMAND","addBreakpointMulti","sendBreakpointsAcknowledge","BREAKPOINT_ADD_ACKNOWLEDGE","BREAKPOINT_REMOVE_COMMAND","removeBreakpointMulti","BREAKPOINT_REMOVE_ACKNOWLEDGE","BREAKPOINT_ENABLE_COMMAND","enableBreakpointMulti","BREAKPOINT_ENABLE_ACKNOWLEDGE","BREAKPOINT_DISABLE_COMMAND","disableBreakpointMulti","BREAKPOINT_DISABLE_ACKNOWLEDGE","PREPACK_RUN_COMMAND","_onDebuggeeResume","STACKFRAMES_COMMAND","processStackframesCommand","SCOPES_COMMAND","processScopesCommand","VARIABLES_COMMAND","processVariablesCommand","STEPINTO_COMMAND","processStepCommand","STEPOVER_COMMAND","STEPOUT_COMMAND","EVALUATE_COMMAND","processEvaluateCommand","astLoc","frameInfos","_getFrameLocation","fileName","i","contextStack","length","frame","functionName","function","__originalName","frameInfo","sendStackframeResponse","frameId","stackIndex","context","scopes","lexicalEnv","lexicalEnvironment","scope","name","_getScopeName","environmentRecord","variablesReference","getReferenceForValue","expensive","parent","sendScopesResponse","envRec","$FunctionObject","variables","getVariablesByReference","sendVariablesResponse","evalResult","evaluate","expression","sendEvaluateResponse","clean","stackSize","_lastExecuted","handlePrepackError","diagnostic","absoluteSource","message","severity","errorCode","console","log","shouldStopForSeverity","shutdown"],"mappings":"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","file":"Debugger.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { BreakpointManager } from \"./BreakpointManager.js\";\nimport { BabelNode } from \"babel-types\";\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport invariant from \"../common/invariant.js\";\nimport type { DebugChannel } from \"./channel/DebugChannel.js\";\nimport { DebugMessage } from \"./../common/channel/DebugMessage.js\";\nimport { DebuggerError } from \"./../common/DebuggerError.js\";\nimport type {\n  DebuggerRequest,\n  StackframeArguments,\n  ScopesArguments,\n  Stackframe,\n  Scope,\n  VariablesArguments,\n  EvaluateArguments,\n  SourceData,\n} from \"./../common/types.js\";\nimport type { Realm } from \"./../../realm.js\";\nimport { ExecutionContext } from \"./../../realm.js\";\nimport { VariableManager } from \"./VariableManager.js\";\nimport { SteppingManager } from \"./SteppingManager.js\";\nimport type { StoppableObject } from \"./StopEventManager.js\";\nimport { StopEventManager } from \"./StopEventManager.js\";\nimport {\n  EnvironmentRecord,\n  GlobalEnvironmentRecord,\n  FunctionEnvironmentRecord,\n  DeclarativeEnvironmentRecord,\n  ObjectEnvironmentRecord,\n} from \"./../../environment.js\";\nimport { CompilerDiagnostic } from \"../../errors.js\";\nimport type { Severity } from \"../../errors.js\";\nimport { SourceMapManager } from \"./SourceMapManager.js\";\nimport type { DebuggerConfigArguments } from \"../../types\";\n\nexport class DebugServer {\n  constructor(channel: DebugChannel, realm: Realm, configArgs: DebuggerConfigArguments) {\n    this._channel = channel;\n    this._realm = realm;\n    this._breakpointManager = new BreakpointManager();\n    this._variableManager = new VariableManager(realm);\n    this._stepManager = new SteppingManager(this._realm, /* default discard old steppers */ false);\n    this._stopEventManager = new StopEventManager();\n    this._diagnosticSeverity = configArgs.diagnosticSeverity || \"FatalError\";\n    this._sourceMapManager = new SourceMapManager(configArgs.buckRoot, configArgs.sourcemaps);\n    this.waitForRun(undefined);\n  }\n  // the collection of breakpoints\n  _breakpointManager: BreakpointManager;\n  // the channel to communicate with the adapter\n  _channel: DebugChannel;\n  _realm: Realm;\n  _variableManager: VariableManager;\n  _stepManager: SteppingManager;\n  _stopEventManager: StopEventManager;\n  _lastExecuted: SourceData;\n  // Severity at which debugger will break when CompilerDiagnostics are generated. Default is Fatal.\n  _diagnosticSeverity: Severity;\n  _sourceMapManager: SourceMapManager;\n\n  /* Block until adapter says to run\n  /* ast: the current ast node we are stopped on\n  /* reason: the reason the debuggee is stopping\n  */\n  waitForRun(loc: void | BabelNodeSourceLocation): void {\n    let keepRunning = false;\n    let request;\n    while (!keepRunning) {\n      request = this._channel.readIn();\n      keepRunning = this.processDebuggerCommand(request, loc);\n    }\n  }\n\n  // Checking if the debugger needs to take any action on reaching this ast node\n  checkForActions(ast: BabelNode): void {\n    if (this._checkAndUpdateLastExecuted(ast)) {\n      let stoppables: Array<StoppableObject> = this._stepManager.getAndDeleteCompletedSteppers(ast);\n      let breakpoint = this._breakpointManager.getStoppableBreakpoint(ast);\n      if (breakpoint) stoppables.push(breakpoint);\n      let reason = this._stopEventManager.getDebuggeeStopReason(ast, stoppables);\n      if (reason) {\n        let location = ast.loc;\n        invariant(location && location.source);\n        let absolutePath = this._sourceMapManager.relativeToAbsolute(location.source);\n        this._channel.sendStoppedResponse(reason, absolutePath, location.start.line, location.start.column);\n        this.waitForRun(location);\n      }\n    }\n  }\n\n  // Process a command from a debugger. Returns whether Prepack should unblock\n  // if it is blocked\n  processDebuggerCommand(request: DebuggerRequest, loc: void | BabelNodeSourceLocation): boolean {\n    let requestID = request.id;\n    let command = request.command;\n    let args = request.arguments;\n    // Convert incoming location sources to relative paths in order to match internal representation of filenames.\n    if (args.kind === \"breakpoint\") {\n      for (let bp of args.breakpoints) {\n        bp.filePath = this._sourceMapManager.absoluteToRelative(bp.filePath);\n      }\n    }\n\n    switch (command) {\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.addBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.BREAKPOINT_REMOVE_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.removeBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_REMOVE_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.BREAKPOINT_ENABLE_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.enableBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_ENABLE_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.BREAKPOINT_DISABLE_COMMAND:\n        invariant(args.kind === \"breakpoint\");\n        this._breakpointManager.disableBreakpointMulti(args.breakpoints);\n        this._channel.sendBreakpointsAcknowledge(DebugMessage.BREAKPOINT_DISABLE_ACKNOWLEDGE, requestID, args);\n        break;\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        invariant(args.kind === \"run\");\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        invariant(args.kind === \"stackframe\");\n        this.processStackframesCommand(requestID, args, loc);\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        invariant(args.kind === \"scopes\");\n        this.processScopesCommand(requestID, args);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        invariant(args.kind === \"variables\");\n        this.processVariablesCommand(requestID, args);\n        break;\n      case DebugMessage.STEPINTO_COMMAND:\n        invariant(loc !== undefined);\n        this._stepManager.processStepCommand(\"in\", loc);\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.STEPOVER_COMMAND:\n        invariant(loc !== undefined);\n        this._stepManager.processStepCommand(\"over\", loc);\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.STEPOUT_COMMAND:\n        invariant(loc !== undefined);\n        this._stepManager.processStepCommand(\"out\", loc);\n        this._onDebuggeeResume();\n        return true;\n      case DebugMessage.EVALUATE_COMMAND:\n        invariant(args.kind === \"evaluate\");\n        this.processEvaluateCommand(requestID, args);\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    return false;\n  }\n\n  processStackframesCommand(\n    requestID: number,\n    args: StackframeArguments,\n    astLoc: void | BabelNodeSourceLocation\n  ): void {\n    let frameInfos: Array<Stackframe> = [];\n    let loc = this._getFrameLocation(astLoc ? astLoc : null);\n    let fileName = loc.fileName;\n    let line = loc.line;\n    let column = loc.column;\n\n    // the UI displays the current frame as index 0, so we iterate backwards\n    // from the current frame\n    for (let i = this._realm.contextStack.length - 1; i >= 0; i--) {\n      let frame = this._realm.contextStack[i];\n      let functionName = \"(anonymous function)\";\n      if (frame.function && frame.function.__originalName) {\n        functionName = frame.function.__originalName;\n      }\n\n      let frameInfo: Stackframe = {\n        id: this._realm.contextStack.length - 1 - i,\n        functionName: functionName,\n        fileName: this._sourceMapManager.relativeToAbsolute(fileName), // Outward facing paths must be absolute.\n        line: line,\n        column: column,\n      };\n      frameInfos.push(frameInfo);\n      loc = this._getFrameLocation(frame.loc);\n      fileName = loc.fileName;\n      line = loc.line;\n      column = loc.column;\n    }\n    this._channel.sendStackframeResponse(requestID, frameInfos);\n  }\n\n  _getFrameLocation(loc: void | null | BabelNodeSourceLocation): { fileName: string, line: number, column: number } {\n    let fileName = \"unknown\";\n    let line = 0;\n    let column = 0;\n    if (loc && loc.source) {\n      fileName = loc.source;\n      line = loc.start.line;\n      column = loc.start.column;\n    }\n    return {\n      fileName: fileName,\n      line: line,\n      column: column,\n    };\n  }\n\n  processScopesCommand(requestID: number, args: ScopesArguments): void {\n    // first check that frameId is in the valid range\n    if (args.frameId < 0 || args.frameId >= this._realm.contextStack.length) {\n      throw new DebuggerError(\"Invalid command\", \"Invalid frame id for scopes request: \" + args.frameId);\n    }\n    // here the frameId is in reverse order of the contextStack, ie frameId 0\n    // refers to last element of contextStack\n    let stackIndex = this._realm.contextStack.length - 1 - args.frameId;\n    let context = this._realm.contextStack[stackIndex];\n    invariant(context instanceof ExecutionContext);\n    let scopes = [];\n    let lexicalEnv = context.lexicalEnvironment;\n    while (lexicalEnv) {\n      let scope: Scope = {\n        name: this._getScopeName(lexicalEnv.environmentRecord),\n        // key used by UI to retrieve variables in this scope\n        variablesReference: this._variableManager.getReferenceForValue(lexicalEnv),\n        // the variables are easy to retrieve\n        expensive: false,\n      };\n      scopes.push(scope);\n      lexicalEnv = lexicalEnv.parent;\n    }\n    this._channel.sendScopesResponse(requestID, scopes);\n  }\n\n  _getScopeName(envRec: EnvironmentRecord): string {\n    if (envRec instanceof GlobalEnvironmentRecord) {\n      return \"Global\";\n    } else if (envRec instanceof DeclarativeEnvironmentRecord) {\n      if (envRec instanceof FunctionEnvironmentRecord) {\n        return \"Local: \" + (envRec.$FunctionObject.__originalName || \"anonymous function\");\n      } else {\n        return \"Block\";\n      }\n    } else if (envRec instanceof ObjectEnvironmentRecord) {\n      return \"With\";\n    } else {\n      invariant(false, \"Invalid type of environment record\");\n    }\n  }\n\n  processVariablesCommand(requestID: number, args: VariablesArguments): void {\n    let variables = this._variableManager.getVariablesByReference(args.variablesReference);\n    this._channel.sendVariablesResponse(requestID, variables);\n  }\n\n  processEvaluateCommand(requestID: number, args: EvaluateArguments): void {\n    let evalResult = this._variableManager.evaluate(args.frameId, args.expression);\n    this._channel.sendEvaluateResponse(requestID, evalResult);\n  }\n\n  // actions that need to happen before Prepack can resume\n  _onDebuggeeResume(): void {\n    // resets the variable manager\n    this._variableManager.clean();\n  }\n\n  /*\n    Returns whether there are more nodes in the ast.\n  */\n  _checkAndUpdateLastExecuted(ast: BabelNode): boolean {\n    if (ast.loc && ast.loc.source) {\n      let filePath = ast.loc.source;\n      let line = ast.loc.start.line;\n      let column = ast.loc.start.column;\n      let stackSize = this._realm.contextStack.length;\n      // Check if the current location is same as the last one.\n      // Does not check columns since column debugging is not supported.\n      // Column support is unnecessary because these nodes will have been sourcemap-translated.\n      // Ignoring columns prevents:\n      //     - Lines with multiple AST nodes from triggering the same breakpoint more than once.\n      //     - Step-out from completing in the same line that it was set in.\n      if (\n        this._lastExecuted &&\n        filePath === this._lastExecuted.filePath &&\n        line === this._lastExecuted.line &&\n        stackSize === this._lastExecuted.stackSize\n      ) {\n        return false;\n      }\n      this._lastExecuted = {\n        filePath: filePath,\n        line: line,\n        column: column,\n        stackSize: this._realm.contextStack.length,\n      };\n      return true;\n    }\n    return false;\n  }\n\n  //  Displays Prepack error message, then waits for user to run the program to continue (similar to a breakpoint).\n  handlePrepackError(diagnostic: CompilerDiagnostic): void {\n    invariant(diagnostic.location && diagnostic.location.source);\n    // The following constructs the message and stop-instruction that is sent to the UI to actually stop the execution.\n    let location = diagnostic.location;\n    let absoluteSource = \"\";\n    if (location.source !== null) absoluteSource = this._sourceMapManager.relativeToAbsolute(location.source);\n    let message = `${diagnostic.severity} ${diagnostic.errorCode}: ${diagnostic.message}`;\n    console.log(message);\n    this._channel.sendStoppedResponse(\n      \"Diagnostic\",\n      absoluteSource,\n      location.start.line,\n      location.start.column,\n      message\n    );\n\n    // The AST Node's location is needed to satisfy the subsequent stackTrace request.\n    this.waitForRun(location);\n  }\n  // Return whether the debugger should stop on a CompilerDiagnostic of a given severity.\n  shouldStopForSeverity(severity: Severity): boolean {\n    switch (this._diagnosticSeverity) {\n      case \"Information\":\n        return true;\n      case \"Warning\":\n        return severity !== \"Information\";\n      case \"RecoverableError\":\n        return severity === \"RecoverableError\" || severity === \"FatalError\";\n      case \"FatalError\":\n        return severity === \"FatalError\";\n      default:\n        invariant(false, \"Unexpected severity type\");\n    }\n  }\n\n  shutdown(): void {\n    // clean the channel pipes\n    this._channel.shutdown();\n  }\n}\n"]}