{"version":3,"sources":["../../../src/debugger/server/Stepper.js"],"names":["Stepper","constructor","filePath","line","column","stackSize","_stepStartData","isComplete","ast","currentStackSize","isAstLocationChanged","loc","source","start","StepIntoStepper","startStackSize","StepOverStepper","StepOutStepper"],"mappings":";;;;;;;AAWA;;AACA;;;;;;AAEO,MAAMA,OAAN,CAAc;AACnBC,cAAYC,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4DC,SAA5D,EAA+E;AAC7E,SAAKC,cAAL,GAAsB;AACpBJ,gBAAUA,QADU;AAEpBC,YAAMA,IAFc;AAGpBC,cAAQA,MAHY;AAIpBC,iBAAWA;AAJS,KAAtB;AAMD;;;AAGDE,aAAWC,GAAX,EAA2BC,gBAA3B,EAA8D;AAC5D,6BAAU,KAAV,EAAiB,kCAAjB;AACD;;AAED;AACA;AACA;AACAC,uBAAqBF,GAArB,EAA8C;AAC5C,QAAIG,MAAMH,IAAIG,GAAd;AACA,QAAI,CAACA,GAAL,EAAU,OAAO,KAAP;AACV,QAAIT,WAAWS,IAAIC,MAAnB;AACA,QAAIT,OAAOQ,IAAIE,KAAJ,CAAUV,IAArB;AACA,QAAIC,SAASO,IAAIE,KAAJ,CAAUT,MAAvB;AACA,QAAI,CAACF,QAAL,EAAe,OAAO,KAAP;AACf,QAAI,KAAKI,cAAT,EAAyB;AACvB,UACEJ,aAAa,KAAKI,cAAL,CAAoBJ,QAAjC,IACAC,SAAS,KAAKG,cAAL,CAAoBH,IAD7B,IAEAC,WAAW,KAAKE,cAAL,CAAoBF,MAHjC,EAIE;AACA,eAAO,KAAP;AACD;AACF,KARD,MAQO;AACL,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD;AArCkB;;QAARJ,O,GAAAA,O,EAdb;;;;;;;;;AASA;;AA6CO,MAAMc,eAAN,SAA8Bd,OAA9B,CAAsC;AAC3CC,cAAYC,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4DW,cAA5D,EAAoF;AAClF,UAAMb,QAAN,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BW,cAA9B;AACD;;AAED;AACAR,aAAWC,GAAX,EAA2BC,gBAA3B,EAA8D;AAC5D;AACA;AACA,WAAO,KAAKC,oBAAL,CAA0BF,GAA1B,KAAkCC,qBAAqB,KAAKH,cAAL,CAAoBD,SAAlF;AACD;AAV0C;;QAAhCS,e,GAAAA,e;AAaN,MAAME,eAAN,SAA8BhB,OAA9B,CAAsC;AAC3CC,cAAYC,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4DC,SAA5D,EAA+E;AAC7E,UAAMH,QAAN,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,SAA9B;AACD;;AAEDE,aAAWC,GAAX,EAA2BC,gBAA3B,EAA8D;AAC5D;AACE;AACA;AACA;AACAA,yBAAmB,KAAKH,cAAL,CAAoBD,SAAvC;AACA;AACA;AACA;AACCI,2BAAqB,KAAKH,cAAL,CAAoBD,SAAzC,IAAsD,KAAKK,oBAAL,CAA0BF,GAA1B;AARzD;AAUD;AAhB0C;;QAAhCQ,e,GAAAA,e;AAmBN,MAAMC,cAAN,SAA6BjB,OAA7B,CAAqC;AAC1CC,cAAYC,QAAZ,EAA8BC,IAA9B,EAA4CC,MAA5C,EAA4DC,SAA5D,EAA+E;AAC7E,UAAMH,QAAN,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,SAA9B;AACD;;AAEDE,aAAWC,GAAX,EAA2BC,gBAA3B,EAA8D;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAOA,mBAAmB,KAAKH,cAAL,CAAoBD,SAA9C;AACD;AAdyC;QAA/BY,c,GAAAA,c","file":"Stepper.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\nimport type { SourceData } from \"./../common/types.js\";\nimport { BabelNode } from \"babel-types\";\nimport invariant from \"./../common/invariant.js\";\n\nexport class Stepper {\n  constructor(filePath: string, line: number, column: number, stackSize: number) {\n    this._stepStartData = {\n      filePath: filePath,\n      line: line,\n      column: column,\n      stackSize: stackSize,\n    };\n  }\n  _stepStartData: SourceData;\n\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    invariant(false, \"Abstract method, please override\");\n  }\n\n  // NOTE: Only checks if a node has changed within the same callstack.\n  // The same node in two different excutions contexts (e.g. recursive call)\n  // will not be detected. Check the stackSize (via realm) in those cases.\n  isAstLocationChanged(ast: BabelNode): boolean {\n    let loc = ast.loc;\n    if (!loc) return false;\n    let filePath = loc.source;\n    let line = loc.start.line;\n    let column = loc.start.column;\n    if (!filePath) return false;\n    if (this._stepStartData) {\n      if (\n        filePath === this._stepStartData.filePath &&\n        line === this._stepStartData.line &&\n        column === this._stepStartData.column\n      ) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n}\n\nexport class StepIntoStepper extends Stepper {\n  constructor(filePath: string, line: number, column: number, startStackSize: number) {\n    super(filePath, line, column, startStackSize);\n  }\n\n  // Override\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    // If stacksize has changed, the position has changed, regardless if\n    // the AST node is the same (e.g. a recursive call).\n    return this.isAstLocationChanged(ast) || currentStackSize !== this._stepStartData.stackSize;\n  }\n}\n\nexport class StepOverStepper extends Stepper {\n  constructor(filePath: string, line: number, column: number, stackSize: number) {\n    super(filePath, line, column, stackSize);\n  }\n\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    return (\n      // If current stack length < starting stack length, the program either\n      // hit an exception so this stepper is no longer relevant. Or, the program\n      // has stepped out of a function call, back up to the calling function.\n      currentStackSize < this._stepStartData.stackSize ||\n      // If current stack length === starting stack length, the program returned\n      // to the same stack depth. As long as the ast node has changed,\n      // the step over is complete.\n      (currentStackSize === this._stepStartData.stackSize && this.isAstLocationChanged(ast))\n    );\n  }\n}\n\nexport class StepOutStepper extends Stepper {\n  constructor(filePath: string, line: number, column: number, stackSize: number) {\n    super(filePath, line, column, stackSize);\n  }\n\n  isComplete(ast: BabelNode, currentStackSize: number): boolean {\n    // It is not sufficient to simply check if the AST location has changed,\n    // since it is possible in recursive calls to return to the same\n    // AST node, but in a *different* call stack.\n\n    // To step out of a function, we must finish executing it.\n    // When a function completes, its execution context will be\n    // popped off the stack.\n    return currentStackSize < this._stepStartData.stackSize;\n  }\n}\n"]}