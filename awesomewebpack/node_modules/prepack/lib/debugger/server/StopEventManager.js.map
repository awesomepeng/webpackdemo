{"version":3,"sources":["../../../src/debugger/server/StopEventManager.js"],"names":["StopEventManager","getDebuggeeStopReason","ast","stoppables","length","stoppable","stoppedReason"],"mappings":";;;;;;;AAWA;;;;AACA;;AACA;;AACA;;;;AAKA;AACA;;AApBA;;;;;;;;;AASA;;AAaO,MAAMA,gBAAN,CAAuB;AAC5B;AACA;AACA;AACA;AACAC,wBAAsBC,GAAtB,EAAsCC,UAAtC,EAAgG;AAC9F,QAAIA,WAAWC,MAAX,KAAsB,CAA1B,EAA6B;AAC7B,QAAIC,YAAYF,WAAW,CAAX,CAAhB;AACA,QAAIG,aAAJ;AACA,QAAID,2CAAJ,EAAqC;AACnCC,sBAAgB,YAAhB;AACD,KAFD,MAEO,IAAID,6CAAJ,EAA0C;AAC/CC,sBAAgB,WAAhB;AACD,KAFM,MAEA,IAAID,6CAAJ,EAA0C;AAC/CC,sBAAgB,WAAhB;AACD,KAFM,MAEA,IAAID,4CAAJ,EAAyC;AAC9CC,sBAAgB,UAAhB;AACD,KAFM,MAEA;AACL,+BAAU,KAAV,EAAiB,0BAAjB;AACD;AACD,WAAOA,aAAP;AACD;AArB2B;QAAjBN,gB,GAAAA,gB","file":"StopEventManager.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport invariant from \"./../common/invariant.js\";\nimport { Breakpoint } from \"./Breakpoint.js\";\nimport { Stepper, StepIntoStepper, StepOverStepper, StepOutStepper } from \"./Stepper.js\";\nimport { BabelNode } from \"babel-types\";\nimport type { StoppedReason } from \"./../common/types.js\";\n\nexport type StoppableObject = Breakpoint | Stepper;\n\n// Manage whether the debuggee should stop\n// All stopping related logic is centralized here\n\nexport class StopEventManager {\n  // stoppables is a list of objects the debuggee should be stopped on\n  // (e.g. breakpoint, completed steppers). The debuggee should stop if there\n  // is at least one element in the list. Currently the reason of the first element\n  // is chosen as the reason sent to the UI\n  getDebuggeeStopReason(ast: BabelNode, stoppables: Array<StoppableObject>): void | StoppedReason {\n    if (stoppables.length === 0) return;\n    let stoppable = stoppables[0];\n    let stoppedReason;\n    if (stoppable instanceof Breakpoint) {\n      stoppedReason = \"Breakpoint\";\n    } else if (stoppable instanceof StepIntoStepper) {\n      stoppedReason = \"Step Into\";\n    } else if (stoppable instanceof StepOverStepper) {\n      stoppedReason = \"Step Over\";\n    } else if (stoppable instanceof StepOutStepper) {\n      stoppedReason = \"Step Out\";\n    } else {\n      invariant(false, \"Invalid stoppable object\");\n    }\n    return stoppedReason;\n  }\n}\n"]}