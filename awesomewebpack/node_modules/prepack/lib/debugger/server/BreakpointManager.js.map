{"version":3,"sources":["../../../src/debugger/server/BreakpointManager.js"],"names":["BreakpointManager","constructor","_breakpointMaps","Map","getStoppableBreakpoint","ast","loc","source","location","filePath","lineNum","start","line","colNum","column","breakpoint","_findStoppableBreakpoint","getBreakpoint","enabled","addBreakpointMulti","breakpoints","_doBreakpointsAction","_addBreakpoint","bind","bp","breakpointMap","get","set","addBreakpoint","columnNum","undefined","removeBreakpointMulti","_removeBreakpoint","removeBreakpoint","enableBreakpointMulti","_enableBreakpoint","enableBreakpoint","disableBreakpointMulti","_disableBreakpoint","disableBreakpoint","action"],"mappings":"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","file":"BreakpointManager.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { PerFileBreakpointMap } from \"./PerFileBreakpointMap.js\";\nimport { Breakpoint } from \"./Breakpoint.js\";\nimport type { Breakpoint as BreakpointType } from \"./../common/types.js\";\nimport { BabelNode } from \"babel-types\";\n\n// Storing BreakpointStores for all source files\nexport class BreakpointManager {\n  constructor() {\n    this._breakpointMaps = new Map();\n  }\n  _breakpointMaps: Map<string, PerFileBreakpointMap>;\n\n  getStoppableBreakpoint(ast: BabelNode): void | Breakpoint {\n    if (ast.loc && ast.loc.source) {\n      let location = ast.loc;\n      let filePath = location.source;\n      if (filePath === null) return;\n      let lineNum = location.start.line;\n      let colNum = location.start.column;\n      // Check whether there is a breakpoint we need to stop on here\n      let breakpoint = this._findStoppableBreakpoint(filePath, lineNum, colNum);\n      if (breakpoint === null) return;\n      return breakpoint;\n    }\n  }\n\n  // Try to find a breakpoint at the given location and check if we should stop on it\n  _findStoppableBreakpoint(filePath: string, lineNum: number, colNum: number): null | Breakpoint {\n    let breakpoint = this.getBreakpoint(filePath, lineNum, colNum);\n    if (breakpoint && breakpoint.enabled) {\n      return breakpoint;\n    }\n    return null;\n  }\n\n  addBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._addBreakpoint.bind(this));\n  }\n\n  _addBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (!breakpointMap) {\n      breakpointMap = new PerFileBreakpointMap(bp.filePath);\n      this._breakpointMaps.set(bp.filePath, breakpointMap);\n    }\n    // Nuclide doesn't support column debugging, so set every breakpoint\n    // to column 0 for consistency.\n    breakpointMap.addBreakpoint(bp.line, 0);\n  }\n\n  getBreakpoint(filePath: string, lineNum: number, columnNum: number = 0): void | Breakpoint {\n    let breakpointMap = this._breakpointMaps.get(filePath);\n    if (breakpointMap) return breakpointMap.getBreakpoint(lineNum, columnNum);\n    return undefined;\n  }\n\n  removeBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._removeBreakpoint.bind(this));\n  }\n\n  _removeBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.removeBreakpoint(bp.line, bp.column);\n  }\n\n  enableBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._enableBreakpoint.bind(this));\n  }\n\n  _enableBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.enableBreakpoint(bp.line, bp.column);\n  }\n\n  disableBreakpointMulti(breakpoints: Array<BreakpointType>): void {\n    this._doBreakpointsAction(breakpoints, this._disableBreakpoint.bind(this));\n  }\n\n  _disableBreakpoint(bp: BreakpointType): void {\n    let breakpointMap = this._breakpointMaps.get(bp.filePath);\n    if (breakpointMap) breakpointMap.disableBreakpoint(bp.line, bp.column);\n  }\n\n  _doBreakpointsAction(breakpoints: Array<BreakpointType>, action: BreakpointType => void): void {\n    for (let bp of breakpoints) {\n      action(bp);\n    }\n  }\n}\n"]}