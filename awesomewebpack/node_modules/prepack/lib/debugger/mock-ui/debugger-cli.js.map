{"version":3,"sources":["../../../src/debugger/mock-ui/debugger-cli.js"],"names":["run","process","console","args","readCLIArguments","session","serve","e","error","shutdown","adapterPath","prepackRuntime","prepackArguments","sourceFiles","Array","from","argv","splice","length","arg","shift","startsWith","exit","slice","split","push","concat","result"],"mappings":"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","file":"debugger-cli.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { UISession } from \"./UISession.js\";\nimport type { DebuggerCLIArguments } from \"./UISession.js\";\n/* The entry point to start up the debugger CLI\n * Reads in command line arguments and starts up a UISession\n*/\n\nfunction run(process, console) {\n  let args = readCLIArguments(process, console);\n  let session = new UISession(process, args);\n  try {\n    session.serve();\n  } catch (e) {\n    console.error(e);\n    session.shutdown();\n  }\n}\n\nfunction readCLIArguments(process, console): DebuggerCLIArguments {\n  let adapterPath = \"\";\n  let prepackRuntime = \"\";\n  let prepackArguments = [];\n  let sourceFiles = [];\n\n  let args = Array.from(process.argv);\n  args.splice(0, 2);\n  //read in the arguments\n  while (args.length > 0) {\n    let arg = args.shift();\n    if (!arg.startsWith(\"--\")) {\n      console.error(\"Invalid argument: \" + arg);\n      process.exit(1);\n    }\n    arg = arg.slice(2); // Slice off the -- prefix\n    if (arg === \"adapterPath\") {\n      adapterPath = args.shift();\n    } else if (arg === \"prepackRuntime\") {\n      prepackRuntime = args.shift();\n    } else if (arg === \"prepackArguments\") {\n      prepackArguments = args.shift().split(\" \");\n    } else if (arg === \"sourceFiles\") {\n      // Support multiple source files.\n      // Assumes everything between --sourceFile and the next --[flag] is a source file.\n      while (!arg.startsWith(\"--\")) {\n        sourceFiles.push(args.shift());\n        if (args.length === 0) break;\n        arg = args[0];\n      }\n    } else if (arg === \"diagnosticSeverity\") {\n      arg = args.shift();\n      if (arg !== \"FatalError\" && arg !== \"RecoverableError\" && arg !== \"Warning\" && arg !== \"Information\") {\n        console.error(\"Invalid debugger diagnostic severity level\");\n      }\n      prepackArguments = prepackArguments.concat([\"--debugDiagnosticSeverity\", `${arg}`]);\n    } else {\n      console.error(\"Unknown argument: \" + arg);\n      process.exit(1);\n    }\n  }\n\n  if (adapterPath.length === 0) {\n    console.error(\"No path to the debug adapter provided!\");\n    process.exit(1);\n  }\n  if (prepackRuntime.length === 0) {\n    console.error(\"No Prepack runtime given to start Prepack\");\n    process.exit(1);\n  }\n  if (sourceFiles.length === 0) {\n    console.error(\"No source code input file provided\");\n  }\n  let result: DebuggerCLIArguments = {\n    adapterPath: adapterPath,\n    prepackRuntime: prepackRuntime,\n    prepackArguments: prepackArguments,\n    sourceFiles: sourceFiles,\n  };\n  return result;\n}\nrun(process, console);\n"]}