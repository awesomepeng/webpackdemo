{"version":3,"sources":["../../../../src/debugger/common/channel/FileIOWrapper.js"],"names":["FileIOWrapper","constructor","isAdapter","inFilePath","outFilePath","_inFilePath","_outFilePath","existsSync","openSync","_packager","_isAdapter","readIn","errorHandler","messageProcessor","readFile","encoding","err","contents","message","unpackage","writeFileSync","readInSync","readFileSync","readInSyncOnce","writeOutSync","package","clearInFile","clearOutFile"],"mappings":";;;;;;;AAWA;;;;AACA;;AACA;;;;;;AAEO,MAAMA,aAAN,CAAoB;AACzBC,cAAYC,SAAZ,EAAgCC,UAAhC,EAAoDC,WAApD,EAAyE;AACvE,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,YAAL,GAAoBF,WAApB;AACA,QAAI,CAAC,aAAGG,UAAH,CAAc,KAAKF,WAAnB,CAAL,EAAsC,aAAGG,QAAH,CAAY,KAAKH,WAAjB,EAA8B,GAA9B;AACtC,QAAI,CAAC,aAAGE,UAAH,CAAc,KAAKD,YAAnB,CAAL,EAAuC,aAAGE,QAAH,CAAY,KAAKF,YAAjB,EAA+B,GAA/B;AACvC,SAAKG,SAAL,GAAiB,qCAAoBP,SAApB,CAAjB;AACA,SAAKQ,UAAL,GAAkBR,SAAlB;AACD;;;AAMD;AACAS,SAAOC,YAAP,EAAiDC,gBAAjD,EAAoG;AAClG,iBAAGC,QAAH,CAAY,KAAKT,WAAjB,EAA8B,EAAEU,UAAU,MAAZ,EAA9B,EAAoD,CAACC,GAAD,EAAmBC,QAAnB,KAAwC;AAC1F,UAAID,GAAJ,EAAS;AACPJ,qBAAaI,GAAb;AACA;AACD;AACD,UAAIE,UAAU,KAAKT,SAAL,CAAeU,SAAf,CAAyBF,QAAzB,CAAd;AACA,UAAIC,YAAY,IAAhB,EAAsB;AACpB,aAAKP,MAAL,CAAYC,YAAZ,EAA0BC,gBAA1B;AACA;AACD;AACD;AACA,mBAAGO,aAAH,CAAiB,KAAKf,WAAtB,EAAmC,EAAnC;AACA;AACAQ,uBAAiBK,OAAjB;AACD,KAdD;AAeD;;AAED;AACAG,eAAqB;AACnB,QAAIH,UAAyB,IAA7B;AACA,WAAO,IAAP,EAAa;AACX,UAAID,WAAW,aAAGK,YAAH,CAAgB,KAAKjB,WAArB,EAAkC,MAAlC,CAAf;AACAa,gBAAU,KAAKT,SAAL,CAAeU,SAAf,CAAyBF,QAAzB,CAAV;AACA,UAAIC,YAAY,IAAhB,EAAsB;AACtB;AACD;AACD;AACA,6BAAUA,YAAY,IAAtB;AACA;AACA,iBAAGE,aAAH,CAAiB,KAAKf,WAAtB,EAAmC,EAAnC;AACA,WAAOa,OAAP;AACD;;AAED;AACAK,mBAAgC;AAC9B,QAAIN,WAAW,aAAGK,YAAH,CAAgB,KAAKjB,WAArB,EAAkC,MAAlC,CAAf;AACA,QAAIa,UAAU,KAAKT,SAAL,CAAeU,SAAf,CAAyBF,QAAzB,CAAd;AACA,WAAOC,OAAP;AACD;;AAED;AACAM,eAAaP,QAAb,EAAqC;AACnC,iBAAGG,aAAH,CAAiB,KAAKd,YAAtB,EAAoC,KAAKG,SAAL,CAAegB,OAAf,CAAuBR,QAAvB,CAApC;AACD;;AAEDS,gBAAoB;AAClB,iBAAGN,aAAH,CAAiB,KAAKf,WAAtB,EAAmC,EAAnC;AACD;;AAEDsB,iBAAqB;AACnB,iBAAGP,aAAH,CAAiB,KAAKd,YAAtB,EAAoC,EAApC;AACD;AAnEwB;QAAdN,a,GAAAA,a,EAfb;;;;;;;;;AASA","file":"FileIOWrapper.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict */\n\nimport fs from \"fs\";\nimport { MessagePackager } from \"./MessagePackager.js\";\nimport invariant from \"../invariant.js\";\n\nexport class FileIOWrapper {\n  constructor(isAdapter: boolean, inFilePath: string, outFilePath: string) {\n    this._inFilePath = inFilePath;\n    this._outFilePath = outFilePath;\n    if (!fs.existsSync(this._inFilePath)) fs.openSync(this._inFilePath, \"w\");\n    if (!fs.existsSync(this._outFilePath)) fs.openSync(this._outFilePath, \"w\");\n    this._packager = new MessagePackager(isAdapter);\n    this._isAdapter = isAdapter;\n  }\n  _inFilePath: string;\n  _outFilePath: string;\n  _packager: MessagePackager;\n  _isAdapter: boolean;\n\n  // Read in a message from the input asynchronously\n  readIn(errorHandler: (err: ?ErrnoError) => void, messageProcessor: (message: string) => void): void {\n    fs.readFile(this._inFilePath, { encoding: \"utf8\" }, (err: ?ErrnoError, contents: string) => {\n      if (err) {\n        errorHandler(err);\n        return;\n      }\n      let message = this._packager.unpackage(contents);\n      if (message === null) {\n        this.readIn(errorHandler, messageProcessor);\n        return;\n      }\n      //clear the file\n      fs.writeFileSync(this._inFilePath, \"\");\n      //process the message\n      messageProcessor(message);\n    });\n  }\n\n  // Read in a message from the input synchronously\n  readInSync(): string {\n    let message: null | string = null;\n    while (true) {\n      let contents = fs.readFileSync(this._inFilePath, \"utf8\");\n      message = this._packager.unpackage(contents);\n      if (message === null) continue;\n      break;\n    }\n    // loop should not break when message is still null\n    invariant(message !== null);\n    //clear the file\n    fs.writeFileSync(this._inFilePath, \"\");\n    return message;\n  }\n\n  // Read in a message from the input synchronously only once\n  readInSyncOnce(): null | string {\n    let contents = fs.readFileSync(this._inFilePath, \"utf8\");\n    let message = this._packager.unpackage(contents);\n    return message;\n  }\n\n  // Write out a message to the output synchronously\n  writeOutSync(contents: string): void {\n    fs.writeFileSync(this._outFilePath, this._packager.package(contents));\n  }\n\n  clearInFile(): void {\n    fs.writeFileSync(this._inFilePath, \"\");\n  }\n\n  clearOutFile(): void {\n    fs.writeFileSync(this._outFilePath, \"\");\n  }\n}\n"]}