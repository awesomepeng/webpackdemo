{"version":3,"sources":["../../../../src/debugger/common/channel/MessageMarshaller.js"],"names":["MessageMarshaller","constructor","_lastRunRequestID","marshallBreakpointAcknowledge","requestID","messageType","breakpoints","JSON","stringify","marshallStoppedResponse","reason","filePath","line","column","message","result","kind","STOPPED_RESPONSE","marshallDebuggerStart","DEBUGGER_ATTACHED","marshallContinueRequest","PREPACK_RUN_COMMAND","marshallSetBreakpointsRequest","BREAKPOINT_ADD_COMMAND","marshallStackFramesRequest","STACKFRAMES_COMMAND","marshallStackFramesResponse","stackframes","STACKFRAMES_RESPONSE","marshallScopesRequest","frameId","SCOPES_COMMAND","marshallScopesResponse","scopes","SCOPES_RESPONSE","marshallVariablesRequest","variablesReference","VARIABLES_COMMAND","marshallVariablesResponse","variables","VARIABLES_RESPONSE","marshallStepIntoRequest","STEPINTO_COMMAND","marshallStepOverRequest","STEPOVER_COMMAND","marshallStepOutRequest","STEPOUT_COMMAND","marshallEvaluateRequest","expression","evalArgs","undefined","EVALUATE_COMMAND","marshallEvaluateResponse","evalResult","EVALUATE_RESPONSE","unmarshallRequest","parts","split","length","parseInt","isNaN","command","args","runArgs","_unmarshallBreakpointsArguments","slice","join","stackFrameArgs","_unmarshallScopesArguments","_unmarshallVariablesArguments","stepIntoArgs","stepOverArgs","stepOutArgs","_unmarshallEvaluateArguments","id","arguments","responseString","parse","breakpoint","hasOwnProperty","varRef","unmarshallResponse","dbgResult","resultString","PREPACK_READY_RESPONSE","_unmarshallReadyResult","BREAKPOINT_ADD_ACKNOWLEDGE","_unmarshallBreakpointsAddResult","_unmarshallStoppedResult","_unmarshallStackframesResult","_unmarshallScopesResult","_unmarshallVariablesResult","_unmarshallEvaluateResult","dbgResponse","e","frames","Array","isArray","frame","scope","variable"],"mappings":"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","file":"MessageMarshaller.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\nimport { DebugMessage } from \"./DebugMessage.js\";\nimport type {\n  Breakpoint,\n  BreakpointsArguments,\n  ScopesArguments,\n  Stackframe,\n  DebuggerResponse,\n  StackframeResult,\n  BreakpointsAddResult,\n  StoppedResult,\n  ReadyResult,\n  Scope,\n  ScopesResult,\n  Variable,\n  VariablesArguments,\n  VariablesResult,\n  DebuggerRequest,\n  DebuggerRequestArguments,\n  RunArguments,\n  StackframeArguments,\n  StepIntoArguments,\n  StepOverArguments,\n  StepOutArguments,\n  StoppedReason,\n  EvaluateArguments,\n  EvaluateResult,\n} from \"./../types.js\";\nimport invariant from \"./../invariant.js\";\nimport { DebuggerError } from \"./../DebuggerError.js\";\n\nexport class MessageMarshaller {\n  constructor() {\n    this._lastRunRequestID = 0;\n  }\n  _lastRunRequestID: number;\n\n  marshallBreakpointAcknowledge(requestID: number, messageType: string, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${messageType} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStoppedResponse(\n    reason: StoppedReason,\n    filePath: string,\n    line: number,\n    column: number,\n    message?: string\n  ): string {\n    let result: StoppedResult = {\n      kind: \"stopped\",\n      reason: reason,\n      filePath: filePath,\n      line: line,\n      column: column,\n      message: message,\n    };\n    return `${this._lastRunRequestID} ${DebugMessage.STOPPED_RESPONSE} ${JSON.stringify(result)}`;\n  }\n\n  marshallDebuggerStart(requestID: number): string {\n    return `${requestID} ${DebugMessage.DEBUGGER_ATTACHED}`;\n  }\n\n  marshallContinueRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.PREPACK_RUN_COMMAND}`;\n  }\n\n  marshallSetBreakpointsRequest(requestID: number, breakpoints: Array<Breakpoint>): string {\n    return `${requestID} ${DebugMessage.BREAKPOINT_ADD_COMMAND} ${JSON.stringify(breakpoints)}`;\n  }\n\n  marshallStackFramesRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_COMMAND}`;\n  }\n\n  marshallStackFramesResponse(requestID: number, stackframes: Array<Stackframe>): string {\n    return `${requestID} ${DebugMessage.STACKFRAMES_RESPONSE} ${JSON.stringify(stackframes)}`;\n  }\n\n  marshallScopesRequest(requestID: number, frameId: number): string {\n    return `${requestID} ${DebugMessage.SCOPES_COMMAND} ${frameId}`;\n  }\n\n  marshallScopesResponse(requestID: number, scopes: Array<Scope>): string {\n    return `${requestID} ${DebugMessage.SCOPES_RESPONSE} ${JSON.stringify(scopes)}`;\n  }\n\n  marshallVariablesRequest(requestID: number, variablesReference: number): string {\n    return `${requestID} ${DebugMessage.VARIABLES_COMMAND} ${variablesReference}`;\n  }\n\n  marshallVariablesResponse(requestID: number, variables: Array<Variable>): string {\n    return `${requestID} ${DebugMessage.VARIABLES_RESPONSE} ${JSON.stringify(variables)}`;\n  }\n\n  marshallStepIntoRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPINTO_COMMAND}`;\n  }\n\n  marshallStepOverRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPOVER_COMMAND}`;\n  }\n\n  marshallStepOutRequest(requestID: number): string {\n    return `${requestID} ${DebugMessage.STEPOUT_COMMAND}`;\n  }\n\n  marshallEvaluateRequest(requestID: number, frameId: void | number, expression: string): string {\n    let evalArgs: EvaluateArguments = {\n      kind: \"evaluate\",\n      expression: expression,\n    };\n    if (frameId !== undefined) {\n      evalArgs.frameId = frameId;\n    }\n    return `${requestID} ${DebugMessage.EVALUATE_COMMAND} ${JSON.stringify(evalArgs)}`;\n  }\n\n  marshallEvaluateResponse(requestID: number, evalResult: EvaluateResult): string {\n    return `${requestID} ${DebugMessage.EVALUATE_RESPONSE} ${JSON.stringify(evalResult)}`;\n  }\n\n  unmarshallRequest(message: string): DebuggerRequest {\n    let parts = message.split(\" \");\n    // each request must have a length and a command\n    invariant(parts.length >= 2, \"Request is not well formed\");\n    // unique ID for each request\n    let requestID = parseInt(parts[0], 10);\n    invariant(!isNaN(requestID), \"Request ID must be a number\");\n    let command = parts[1];\n    let args: DebuggerRequestArguments;\n    switch (command) {\n      case DebugMessage.PREPACK_RUN_COMMAND:\n        this._lastRunRequestID = requestID;\n        let runArgs: RunArguments = {\n          kind: \"run\",\n        };\n        args = runArgs;\n        break;\n      case DebugMessage.BREAKPOINT_ADD_COMMAND:\n        args = this._unmarshallBreakpointsArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      case DebugMessage.STACKFRAMES_COMMAND:\n        let stackFrameArgs: StackframeArguments = {\n          kind: \"stackframe\",\n        };\n        args = stackFrameArgs;\n        break;\n      case DebugMessage.SCOPES_COMMAND:\n        args = this._unmarshallScopesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.VARIABLES_COMMAND:\n        args = this._unmarshallVariablesArguments(requestID, parts[2]);\n        break;\n      case DebugMessage.STEPINTO_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepIntoArgs: StepIntoArguments = {\n          kind: \"stepInto\",\n        };\n        args = stepIntoArgs;\n        break;\n      case DebugMessage.STEPOVER_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepOverArgs: StepOverArguments = {\n          kind: \"stepOver\",\n        };\n        args = stepOverArgs;\n        break;\n      case DebugMessage.STEPOUT_COMMAND:\n        this._lastRunRequestID = requestID;\n        let stepOutArgs: StepOutArguments = {\n          kind: \"stepOut\",\n        };\n        args = stepOutArgs;\n        break;\n      case DebugMessage.EVALUATE_COMMAND:\n        args = this._unmarshallEvaluateArguments(requestID, parts.slice(2).join(\" \"));\n        break;\n      default:\n        throw new DebuggerError(\"Invalid command\", \"Invalid command from adapter: \" + command);\n    }\n    invariant(args !== undefined);\n    let result: DebuggerRequest = {\n      id: requestID,\n      command: command,\n      arguments: args,\n    };\n    return result;\n  }\n\n  _unmarshallBreakpointsArguments(requestID: number, responseString: string): BreakpointsArguments {\n    let breakpoints = JSON.parse(responseString);\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n    let result: BreakpointsArguments = {\n      kind: \"breakpoint\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallScopesArguments(requestID: number, responseString: string): ScopesArguments {\n    let frameId = parseInt(responseString, 10);\n    invariant(!isNaN(frameId));\n    let result: ScopesArguments = {\n      kind: \"scopes\",\n      frameId: frameId,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesArguments(requestID: number, responseString: string): VariablesArguments {\n    let varRef = parseInt(responseString, 10);\n    invariant(!isNaN(varRef));\n    let result: VariablesArguments = {\n      kind: \"variables\",\n      variablesReference: varRef,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateArguments(requestID: number, responseString: string): EvaluateArguments {\n    let evalArgs = JSON.parse(responseString);\n    invariant(evalArgs.hasOwnProperty(\"kind\"), \"Evaluate arguments missing kind field\");\n    invariant(evalArgs.hasOwnProperty(\"expression\"), \"Evaluate arguments missing expression field\");\n    if (evalArgs.hasOwnProperty(\"frameId\")) invariant(!isNaN(evalArgs.frameId));\n    return evalArgs;\n  }\n\n  unmarshallResponse(message: string): DebuggerResponse {\n    try {\n      let parts = message.split(\" \");\n      let requestID = parseInt(parts[0], 10);\n      invariant(!isNaN(requestID));\n      let messageType = parts[1];\n      let dbgResult;\n      let resultString = parts.slice(2).join(\" \");\n      if (messageType === DebugMessage.PREPACK_READY_RESPONSE) {\n        dbgResult = this._unmarshallReadyResult();\n      } else if (messageType === DebugMessage.BREAKPOINT_ADD_ACKNOWLEDGE) {\n        dbgResult = this._unmarshallBreakpointsAddResult(resultString);\n      } else if (messageType === DebugMessage.STOPPED_RESPONSE) {\n        dbgResult = this._unmarshallStoppedResult(resultString);\n      } else if (messageType === DebugMessage.STACKFRAMES_RESPONSE) {\n        dbgResult = this._unmarshallStackframesResult(resultString);\n      } else if (messageType === DebugMessage.SCOPES_RESPONSE) {\n        dbgResult = this._unmarshallScopesResult(resultString);\n      } else if (messageType === DebugMessage.VARIABLES_RESPONSE) {\n        dbgResult = this._unmarshallVariablesResult(resultString);\n      } else if (messageType === DebugMessage.EVALUATE_RESPONSE) {\n        dbgResult = this._unmarshallEvaluateResult(resultString);\n      } else {\n        invariant(false, \"Unexpected response type\");\n      }\n\n      let dbgResponse: DebuggerResponse = {\n        id: requestID,\n        result: dbgResult,\n      };\n      return dbgResponse;\n    } catch (e) {\n      throw new DebuggerError(\"Invalid command\", e.message);\n    }\n  }\n\n  _unmarshallStackframesResult(resultString: string): StackframeResult {\n    let frames = JSON.parse(resultString);\n    invariant(Array.isArray(frames), \"Stack frames is not an array\");\n    for (const frame of frames) {\n      invariant(frame.hasOwnProperty(\"id\"), \"Stack frame is missing id\");\n      invariant(frame.hasOwnProperty(\"fileName\"), \"Stack frame is missing filename\");\n      invariant(frame.hasOwnProperty(\"line\"), \"Stack frame is missing line number\");\n      invariant(frame.hasOwnProperty(\"column\"), \"Stack frame is missing column number\");\n      invariant(frame.hasOwnProperty(\"functionName\"), \"Stack frame is missing function name\");\n    }\n    let result: StackframeResult = {\n      kind: \"stackframe\",\n      stackframes: frames,\n    };\n    return result;\n  }\n\n  _unmarshallScopesResult(resultString: string): ScopesResult {\n    let scopes = JSON.parse(resultString);\n    invariant(Array.isArray(scopes), \"Scopes is not an array\");\n    for (const scope of scopes) {\n      invariant(scope.hasOwnProperty(\"name\"), \"Scope is missing name\");\n      invariant(scope.hasOwnProperty(\"variablesReference\"), \"Scope is missing variablesReference\");\n      invariant(scope.hasOwnProperty(\"expensive\"), \"Scope is missing expensive\");\n    }\n    let result: ScopesResult = {\n      kind: \"scopes\",\n      scopes: scopes,\n    };\n    return result;\n  }\n\n  _unmarshallVariablesResult(resultString: string): VariablesResult {\n    let variables = JSON.parse(resultString);\n    invariant(Array.isArray(variables), \"Variables is not an array\");\n    for (const variable of variables) {\n      invariant(variable.hasOwnProperty(\"name\"));\n      invariant(variable.hasOwnProperty(\"value\"));\n      invariant(variable.hasOwnProperty(\"variablesReference\"));\n    }\n    let result: VariablesResult = {\n      kind: \"variables\",\n      variables: variables,\n    };\n    return result;\n  }\n\n  _unmarshallEvaluateResult(resultString: string): EvaluateResult {\n    let evalResult = JSON.parse(resultString);\n    invariant(evalResult.hasOwnProperty(\"kind\"), \"eval result missing kind property\");\n    invariant(evalResult.kind === \"evaluate\", \"eval result is the wrong kind\");\n    invariant(evalResult.hasOwnProperty(\"displayValue\", \"eval result missing display value property\"));\n    invariant(evalResult.hasOwnProperty(\"type\", \"eval result missing type property\"));\n    invariant(evalResult.hasOwnProperty(\"variablesReference\", \"eval result missing variablesReference property\"));\n    return evalResult;\n  }\n\n  _unmarshallBreakpointsAddResult(resultString: string): BreakpointsAddResult {\n    let breakpoints = JSON.parse(resultString);\n    invariant(Array.isArray(breakpoints));\n    for (const breakpoint of breakpoints) {\n      invariant(breakpoint.hasOwnProperty(\"filePath\"), \"breakpoint missing filePath property\");\n      invariant(breakpoint.hasOwnProperty(\"line\"), \"breakpoint missing line property\");\n      invariant(breakpoint.hasOwnProperty(\"column\"), \"breakpoint missing column property\");\n      invariant(!isNaN(breakpoint.line));\n      invariant(!isNaN(breakpoint.column));\n    }\n\n    let result: BreakpointsAddResult = {\n      kind: \"breakpoint-add\",\n      breakpoints: breakpoints,\n    };\n    return result;\n  }\n\n  _unmarshallStoppedResult(resultString: string): StoppedResult {\n    let result = JSON.parse(resultString);\n    invariant(result.kind === \"stopped\");\n    invariant(result.hasOwnProperty(\"reason\"));\n    invariant(result.hasOwnProperty(\"filePath\"));\n    invariant(result.hasOwnProperty(\"line\"));\n    invariant(!isNaN(result.line));\n    invariant(result.hasOwnProperty(\"column\"));\n    invariant(!isNaN(result.column));\n    return result;\n  }\n\n  _unmarshallReadyResult(): ReadyResult {\n    let result: ReadyResult = {\n      kind: \"ready\",\n    };\n    return result;\n  }\n}\n"]}