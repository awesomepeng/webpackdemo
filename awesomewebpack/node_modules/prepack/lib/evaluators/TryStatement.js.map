{"version":3,"sources":["../../src/evaluators/TryStatement.js"],"names":["ast","strictCode","env","realm","wasInPureTryStatement","isInPureTryStatement","isInPureScope","blockRes","evaluateCompletionDeref","block","handlerRes","handler","incorporateSavedCompletion","subsequentEffects","getCapturedEffects","value","stopEffectCaptureAndUndoEffects","updatePossiblyNormalCompletionWithSubsequentEffects","handlerEffects","composeNestedThrowEffectsWithHandler","applyEffects","result","finalizerRes","finalizer","finalizerEffects","composeNestedEffectsWithFinalizer","evaluateCompletion","composeWithSavedCompletion","intrinsics","undefined","c","priorEffects","consequent","consequentEffects","push","evaluateForEffectsWithPriorEffects","pop","alternate","alternateEffects","joinForkOrChoose","joinCondition"],"mappings":"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","file":"TryStatement.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Effects, Realm } from \"../realm.js\";\nimport { type LexicalEnvironment } from \"../environment.js\";\nimport {\n  AbruptCompletion,\n  ForkedAbruptCompletion,\n  PossiblyNormalCompletion,\n  ThrowCompletion,\n  SimpleNormalCompletion,\n  NormalCompletion,\n} from \"../completions.js\";\nimport { UpdateEmpty } from \"../methods/index.js\";\nimport { Functions, Join } from \"../singletons.js\";\nimport { Value } from \"../values/index.js\";\nimport type { BabelNodeTryStatement } from \"babel-types\";\nimport invariant from \"../invariant.js\";\n\nexport default function(ast: BabelNodeTryStatement, strictCode: boolean, env: LexicalEnvironment, realm: Realm): Value {\n  let wasInPureTryStatement = realm.isInPureTryStatement;\n  if (realm.isInPureScope()) {\n    // TODO(1264): This is used to issue a warning if we have abstract function calls in here.\n    // We might not need it once we have full support for handling potential errors. Even\n    // then we might need it to know whether we should bother tracking error handling.\n    realm.isInPureTryStatement = true;\n  }\n  let blockRes;\n  try {\n    blockRes = env.evaluateCompletionDeref(ast.block, strictCode);\n  } finally {\n    realm.isInPureTryStatement = wasInPureTryStatement;\n  }\n\n  let handlerRes = blockRes;\n  let handler = ast.handler;\n  if (handler) {\n    // The start of the catch handler is a join point where all throw completions come together\n    blockRes = Functions.incorporateSavedCompletion(realm, blockRes);\n    if (blockRes instanceof ThrowCompletion) {\n      handlerRes = env.evaluateCompletionDeref(handler, strictCode, blockRes);\n      // Note: The handler may have introduced new forks\n    } else if (blockRes instanceof ForkedAbruptCompletion || blockRes instanceof PossiblyNormalCompletion) {\n      if (blockRes instanceof PossiblyNormalCompletion) {\n        // The throw completions have not been joined and we are going to keep it that way.\n        // The current state may have advanced since the time control forked into the various paths recorded in blockRes.\n        // Update the normal path and restore the global state to what it was at the time of the fork.\n        let subsequentEffects = realm.getCapturedEffects(blockRes.value);\n        realm.stopEffectCaptureAndUndoEffects(blockRes);\n        Join.updatePossiblyNormalCompletionWithSubsequentEffects(realm, blockRes, subsequentEffects);\n      }\n      // Add effects of normal exits from handler to blockRes and apply to global state\n      let handlerEffects = composeNestedThrowEffectsWithHandler(blockRes);\n      realm.applyEffects(handlerEffects);\n      handlerRes = handlerEffects.result;\n    } else {\n      // The handler is not invoked, so just carry on.\n    }\n  }\n\n  let finalizerRes = handlerRes;\n  if (ast.finalizer) {\n    // The start of the finalizer is a join point where all threads of control come together.\n    // However, we choose to keep the threads unjoined and to apply the finalizer separately to each thread.\n    if (blockRes instanceof PossiblyNormalCompletion || blockRes instanceof ForkedAbruptCompletion) {\n      // The current global state is a the point of the fork that led to blockRes\n      // All subsequent effects are kept inside the branches of blockRes.\n      let finalizerEffects = composeNestedEffectsWithFinalizer(blockRes);\n      finalizerRes = finalizerEffects.result;\n      // The result may become abrupt because of the finalizer, but it cannot become normal.\n      invariant(!(finalizerRes instanceof SimpleNormalCompletion));\n    } else {\n      // A single thread of control has produced a normal blockRes and the global state is up to date.\n      finalizerRes = env.evaluateCompletion(ast.finalizer, strictCode);\n    }\n  }\n\n  if (finalizerRes instanceof AbruptCompletion) throw finalizerRes;\n  if (finalizerRes instanceof PossiblyNormalCompletion) realm.composeWithSavedCompletion(finalizerRes);\n  if (handlerRes instanceof NormalCompletion) handlerRes = handlerRes.value;\n  if (handlerRes instanceof Value) return (UpdateEmpty(realm, handlerRes, realm.intrinsics.undefined): any);\n  throw handlerRes;\n\n  // The handler is a potential join point for all throw completions, but is easier to not do the join here because\n  // it is tricky to join the joined and composed result of the throw completions with the non exceptional completions.\n  // Unfortunately, things are still complicated because the handler may turn abrupt completions into normal\n  // completions and the other way around. When this happens the container has to change its type.\n  // We do this by call joinForkOrChoose to create a new container at every level of the recursion.\n  function composeNestedThrowEffectsWithHandler(\n    c: PossiblyNormalCompletion | ForkedAbruptCompletion,\n    priorEffects: Array<Effects> = []\n  ): Effects {\n    let consequent = c.consequent;\n    let consequentEffects = c.consequentEffects;\n    priorEffects.push(consequentEffects);\n    if (consequent instanceof ForkedAbruptCompletion || consequent instanceof PossiblyNormalCompletion) {\n      consequentEffects = composeNestedThrowEffectsWithHandler(consequent, priorEffects);\n    } else if (consequent instanceof ThrowCompletion) {\n      consequentEffects = realm.evaluateForEffectsWithPriorEffects(\n        priorEffects,\n        () => {\n          invariant(ast.handler);\n          return env.evaluateCompletionDeref(ast.handler, strictCode, consequent);\n        },\n        \"composeNestedThrowEffectsWithHandler/1\"\n      );\n    }\n    priorEffects.pop();\n    let alternate = c.alternate;\n    let alternateEffects = c.alternateEffects;\n    priorEffects.push(alternateEffects);\n    if (alternate instanceof PossiblyNormalCompletion || alternate instanceof ForkedAbruptCompletion) {\n      alternateEffects = composeNestedThrowEffectsWithHandler(alternate, priorEffects);\n    } else if (alternate instanceof ThrowCompletion) {\n      alternateEffects = realm.evaluateForEffectsWithPriorEffects(\n        priorEffects,\n        () => {\n          invariant(ast.handler);\n          return env.evaluateCompletionDeref(ast.handler, strictCode, alternate);\n        },\n        \"composeNestedThrowEffectsWithHandler/2\"\n      );\n    }\n    priorEffects.pop();\n    return Join.joinForkOrChoose(realm, c.joinCondition, consequentEffects, alternateEffects);\n  }\n\n  // The finalizer is not a join point, so update each path in the completion separately.\n  // Things are complicated because the finalizer may turn normal completions into abrupt completions.\n  // When this happens the container has to change its type.\n  // We do this by call joinForkOrChoose to create a new container at every level of the recursion.\n  function composeNestedEffectsWithFinalizer(\n    c: PossiblyNormalCompletion | ForkedAbruptCompletion,\n    priorEffects: Array<Effects> = []\n  ): Effects {\n    let consequent = c.consequent;\n    let consequentEffects = c.consequentEffects;\n    priorEffects.push(consequentEffects);\n    if (consequent instanceof ForkedAbruptCompletion || consequent instanceof PossiblyNormalCompletion) {\n      consequentEffects = composeNestedThrowEffectsWithHandler(consequent, priorEffects);\n    } else {\n      consequentEffects = realm.evaluateForEffectsWithPriorEffects(\n        priorEffects,\n        () => {\n          invariant(ast.finalizer);\n          return env.evaluateCompletionDeref(ast.finalizer, strictCode);\n        },\n        \"composeNestedEffectsWithFinalizer/1\"\n      );\n      if (!(consequentEffects.result instanceof AbruptCompletion)) consequentEffects.result = consequent;\n    }\n    priorEffects.pop();\n    let alternate = c.alternate;\n    let alternateEffects = c.alternateEffects;\n    priorEffects.push(alternateEffects);\n    if (alternate instanceof PossiblyNormalCompletion || alternate instanceof ForkedAbruptCompletion) {\n      alternateEffects = composeNestedThrowEffectsWithHandler(alternate, priorEffects);\n    } else {\n      alternateEffects = realm.evaluateForEffectsWithPriorEffects(\n        priorEffects,\n        () => {\n          invariant(ast.finalizer);\n          return env.evaluateCompletionDeref(ast.finalizer, strictCode);\n        },\n        \"composeNestedEffectsWithFinalizer/2\"\n      );\n      if (!(alternateEffects.result instanceof AbruptCompletion)) alternateEffects.result = alternate;\n    }\n    priorEffects.pop();\n    return Join.joinForkOrChoose(realm, c.joinCondition, consequentEffects, alternateEffects);\n  }\n}\n"]}