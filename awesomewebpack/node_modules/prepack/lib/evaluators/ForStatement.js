"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreatePerIterationEnvironment = CreatePerIterationEnvironment;

exports.default = function (ast, strictCode, env, realm, labelSet) {
  if (realm.isInPureScope() && !realm.instantRender.enabled) {
    return tryToEvaluateForStatementOrLeaveAsAbstract(ast, strictCode, env, realm, labelSet);
  } else {
    return evaluateForStatement(ast, strictCode, env, realm, labelSet);
  }
};

var _index = require("../values/index.js");

var _completions = require("../completions.js");

var _babelTraverse = require("babel-traverse");

var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

var _index2 = require("../domains/index.js");

var _errors = require("../errors.js");

var _index3 = require("../methods/index.js");

var _ForOfStatement = require("./ForOfStatement.js");

var _singletons = require("../singletons.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// ECMA262 13.7.4.9
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

function CreatePerIterationEnvironment(realm, perIterationBindings) {
  // 1. If perIterationBindings has any elements, then
  if (perIterationBindings.length > 0) {
    // a. Let lastIterationEnv be the running execution context's LexicalEnvironment.
    let lastIterationEnv = realm.getRunningContext().lexicalEnvironment;
    // b. Let lastIterationEnvRec be lastIterationEnv's EnvironmentRecord.
    let lastIterationEnvRec = lastIterationEnv.environmentRecord;
    // c. Let outer be lastIterationEnv's outer environment reference.
    let outer = lastIterationEnv.parent;
    // d. Assert: outer is not null.
    (0, _invariant2.default)(outer !== null);
    // e. Let thisIterationEnv be NewDeclarativeEnvironment(outer).
    let thisIterationEnv = _singletons.Environment.NewDeclarativeEnvironment(realm, outer);
    // f. Let thisIterationEnvRec be thisIterationEnv's EnvironmentRecord.
    realm.onDestroyScope(lastIterationEnv);
    let thisIterationEnvRec = thisIterationEnv.environmentRecord;
    // g. For each element bn of perIterationBindings do,
    for (let bn of perIterationBindings) {
      // i. Perform ! thisIterationEnvRec.CreateMutableBinding(bn, false).
      thisIterationEnvRec.CreateMutableBinding(bn, false);
      // ii. Let lastValue be ? lastIterationEnvRec.GetBindingValue(bn, true).
      let lastValue = lastIterationEnvRec.GetBindingValue(bn, true);
      // iii.Perform thisIterationEnvRec.InitializeBinding(bn, lastValue).
      thisIterationEnvRec.InitializeBinding(bn, lastValue);
    }
    // h. Set the running execution context's LexicalEnvironment to thisIterationEnv.
    realm.getRunningContext().lexicalEnvironment = thisIterationEnv;
  }
  // 2. Return undefined.
  return realm.intrinsics.undefined;
}

// ECMA262 13.7.4.8
function ForBodyEvaluation(realm, test, increment, stmt, perIterationBindings, labelSet, strictCode) {
  // 1. Let V be undefined.
  let V = realm.intrinsics.undefined;

  // 2. Perform ? CreatePerIterationEnvironment(perIterationBindings).
  CreatePerIterationEnvironment(realm, perIterationBindings);
  let env = realm.getRunningContext().lexicalEnvironment;
  let possibleInfiniteLoopIterations = 0;

  // 3. Repeat
  while (true) {
    // a. If test is not [empty], then
    if (test) {
      // i. Let testRef be the result of evaluating test.
      let testRef = env.evaluate(test, strictCode);

      // ii. Let testValue be ? GetValue(testRef).
      let testValue = _singletons.Environment.GetValue(realm, testRef);

      // iii. If ToBoolean(testValue) is false, return NormalCompletion(V).
      if (!_singletons.To.ToBooleanPartial(realm, testValue)) {
        // joinAllLoopExits does not handle labeled break/continue, so only use it when doing AI
        if (realm.useAbstractInterpretation) return joinAllLoopExits(V);
        return V;
      }
    }

    // b. Let result be the result of evaluating stmt.
    let result = env.evaluateCompletion(stmt, strictCode);
    (0, _invariant2.default)(result instanceof _index.Value || result instanceof _completions.AbruptCompletion);
    if (result instanceof _completions.ForkedAbruptCompletion) result = (0, _ForOfStatement.TryToApplyEffectsOfJoiningBranches)(realm, result);

    // c. If LoopContinues(result, labelSet) is false, return Completion(UpdateEmpty(result, V)).
    if (!(0, _ForOfStatement.LoopContinues)(realm, result, labelSet)) {
      (0, _invariant2.default)(result instanceof _completions.AbruptCompletion);
      // joinAllLoopExits does not handle labeled break/continue, so only use it when doing AI
      if (realm.useAbstractInterpretation) {
        result = (0, _index3.UpdateEmpty)(realm, result, V);
        (0, _invariant2.default)(result instanceof _completions.AbruptCompletion);
        return joinAllLoopExits(result);
      }
      // ECMA262 13.1.7
      if (result instanceof _completions.BreakCompletion) {
        if (!result.target) return (0, _index3.UpdateEmpty)(realm, result, V).value;
      }
      throw (0, _index3.UpdateEmpty)(realm, result, V);
    } else if (realm.useAbstractInterpretation) {
      // This is a join point for conditional continue completions lurking in realm.savedCompletion
      if (containsContinueCompletion(realm.savedCompletion)) {
        result = joinAllLoopContinues(result);
      }
    }

    // d. If result.[[Value]] is not empty, let V be result.[[Value]].
    let resultValue = (0, _ForOfStatement.InternalGetResultValue)(realm, result);
    if (!(resultValue instanceof _index.EmptyValue)) V = resultValue;

    // e. Perform ? CreatePerIterationEnvironment(perIterationBindings).
    CreatePerIterationEnvironment(realm, perIterationBindings);
    env = realm.getRunningContext().lexicalEnvironment;

    // f. If increment is not [empty], then
    if (increment) {
      // i. Let incRef be the result of evaluating increment.
      let incRef = env.evaluate(increment, strictCode);

      // ii. Perform ? GetValue(incRef).
      _singletons.Environment.GetValue(realm, incRef);
    } else if (realm.useAbstractInterpretation) {
      // If we have no increment and we've hit 100 iterations of trying to evaluate
      // this loop body, then see if we have a break, return or throw completion in a
      // guarded condition and fail if it does. We already have logic to guard
      // against loops that are actually infinite. However, because there may be so
      // many forked execution paths, and they're non linear, then it might
      // computationally lead to a something that seems like an infinite loop.
      possibleInfiniteLoopIterations++;
      if (possibleInfiniteLoopIterations > 100) {
        failIfContainsBreakOrReturnOrThrowCompletion(realm.savedCompletion);
      }
    }
  }
  (0, _invariant2.default)(false);

  function failIfContainsBreakOrReturnOrThrowCompletion(c) {
    if (c === undefined) return;
    if (c instanceof _completions.ThrowCompletion || c instanceof _completions.BreakCompletion || c instanceof _completions.ReturnCompletion) {
      let diagnostic = new _errors.CompilerDiagnostic("break, throw or return cannot be guarded by abstract condition", c.location, "PP0035", "FatalError");
      realm.handleError(diagnostic);
      throw new _errors.FatalError();
    }
    if (c instanceof _completions.PossiblyNormalCompletion || c instanceof _completions.ForkedAbruptCompletion) {
      failIfContainsBreakOrReturnOrThrowCompletion(c.consequent);
      failIfContainsBreakOrReturnOrThrowCompletion(c.alternate);
    }
  }

  function failIfContainsBreakOrContinueCompletionWithNonLocalTarget(c) {
    if (c === undefined) return;
    if (c instanceof _completions.ContinueCompletion || c instanceof _completions.BreakCompletion) {
      if (!c.target) return;
      if (labelSet && labelSet.indexOf(c.target) >= 0) {
        c.target = null;
        return;
      }
      let diagnostic = new _errors.CompilerDiagnostic("break or continue with target cannot be guarded by abstract condition", c.location, "PP0034", "FatalError");
      realm.handleError(diagnostic);
      throw new _errors.FatalError();
    }
    if (c instanceof _completions.PossiblyNormalCompletion || c instanceof _completions.ForkedAbruptCompletion) {
      failIfContainsBreakOrContinueCompletionWithNonLocalTarget(c.consequent);
      failIfContainsBreakOrContinueCompletionWithNonLocalTarget(c.alternate);
    }
  }

  function containsContinueCompletion(c) {
    if (c === undefined) return false;
    if (c instanceof _completions.ContinueCompletion) {
      if (!c.target) return true;
      if (labelSet && labelSet.indexOf(c.target) >= 0) {
        c.target = null;
        return true;
      }
      return false;
    }
    if (c instanceof _completions.PossiblyNormalCompletion || c instanceof _completions.ForkedAbruptCompletion) return containsContinueCompletion(c.consequent) || containsContinueCompletion(c.alternate);
    return false;
  }

  function joinAllLoopContinues(valueOrCompletionAtLoopContinuePoint) {
    // We are about start the next loop iteration and this presents a join point where all non loop breaking abrupt
    // control flows converge into a single flow using their joined effects as the new state.
    failIfContainsBreakOrContinueCompletionWithNonLocalTarget(realm.savedCompletion);

    // Incorporate the savedCompletion (we should only get called if there is one).
    (0, _invariant2.default)(realm.savedCompletion !== undefined);
    if (valueOrCompletionAtLoopContinuePoint instanceof _index.Value) valueOrCompletionAtLoopContinuePoint = new _completions.ContinueCompletion(valueOrCompletionAtLoopContinuePoint, undefined);
    let abruptCompletion = _singletons.Functions.incorporateSavedCompletion(realm, valueOrCompletionAtLoopContinuePoint);
    (0, _invariant2.default)(abruptCompletion instanceof _completions.AbruptCompletion);

    // If there is now a single completion, we don't need to join
    if (!(abruptCompletion instanceof _completions.ForkedAbruptCompletion)) return abruptCompletion;
    (0, _invariant2.default)(containsContinueCompletion(abruptCompletion));

    // Apply the joined effects of continue completions to the current state since these now join the normal path
    let joinedContinueEffects = _singletons.Join.extractAndJoinCompletionsOfType(_completions.ContinueCompletion, realm, abruptCompletion);
    realm.applyEffects(joinedContinueEffects);
    let c = joinedContinueEffects.result;
    (0, _invariant2.default)(c instanceof _completions.ContinueCompletion);

    // We now make a PossiblyNormalCompletion out of abruptCompletion.
    // extractAndJoinCompletionsOfType helped with this by cheating and turning all of its nested completions
    // that contain continue completions into PossiblyNormalCompletions.
    let remainingCompletions = abruptCompletion.transferChildrenToPossiblyNormalCompletion();

    // At this stage there can still be other kinds of abrupt completions left inside abruptCompletion. If not just return.
    let stillAbrupt = remainingCompletions.containsCompletion(_completions.BreakCompletion) || remainingCompletions.containsCompletion(_completions.ReturnCompletion) || remainingCompletions.containsCompletion(_completions.ThrowCompletion);
    if (!stillAbrupt) return c;

    // Stash the remaining completions in the realm start tracking the effects that need to be appended
    // to the normal branch at the next join point.
    realm.savedCompletion = remainingCompletions;
    realm.captureEffects(remainingCompletions); // so that we can join the normal path wtih them later on
    return c;
  }

  function joinAllLoopExits(valueOrCompletionAtUnconditionalExit) {
    // We are about the leave this loop and this presents a join point where all loop breaking control flows
    // converge into a single flow using their joined effects as the new state.
    failIfContainsBreakOrContinueCompletionWithNonLocalTarget(realm.savedCompletion);

    // Incorporate the savedCompletion if there is one.
    if (valueOrCompletionAtUnconditionalExit instanceof _index.Value) valueOrCompletionAtUnconditionalExit = new _completions.BreakCompletion(valueOrCompletionAtUnconditionalExit, undefined);
    let abruptCompletion = _singletons.Functions.incorporateSavedCompletion(realm, valueOrCompletionAtUnconditionalExit);
    (0, _invariant2.default)(abruptCompletion instanceof _completions.AbruptCompletion);

    // If there is now a single completion, we don't need to join
    if (abruptCompletion instanceof _completions.BreakCompletion) return (0, _index3.UpdateEmpty)(realm, abruptCompletion, V).value;
    if (!(abruptCompletion instanceof _completions.ForkedAbruptCompletion)) throw abruptCompletion;

    // If there are no breaks, we don't need to join
    if (!abruptCompletion.containsCompletion(_completions.BreakCompletion)) throw abruptCompletion;

    // Apply the joined effects of break completions to the current state since these now join the normal path
    let joinedBreakEffects = _singletons.Join.extractAndJoinCompletionsOfType(_completions.BreakCompletion, realm, abruptCompletion);
    realm.applyEffects(joinedBreakEffects);
    let c = joinedBreakEffects.result;
    (0, _invariant2.default)(c instanceof _completions.BreakCompletion);

    // We now make a PossiblyNormalCompletion out of abruptCompletion.
    // extractAndJoinCompletionsOfType helped with this by cheating and turning all of its nested completions
    // that contain continue completions into PossiblyNormalCompletions.
    let remainingCompletions = abruptCompletion.transferChildrenToPossiblyNormalCompletion();

    // At this stage there can still be other kinds of abrupt completions left inside abruptCompletion. If not just return.
    let stillAbrupt = remainingCompletions.containsCompletion(_completions.ReturnCompletion) || remainingCompletions.containsCompletion(_completions.ThrowCompletion);
    if (!stillAbrupt) return (0, _index3.UpdateEmpty)(realm, c, V).value;

    // Stash the remaining completions in the realm start tracking the effects that need to be appended
    // to the normal branch at the next join point.
    realm.savedCompletion = remainingCompletions;
    realm.captureEffects(remainingCompletions); // so that we can join the normal path wtih them later on

    // ECMA262 13.1.7
    return (0, _index3.UpdateEmpty)(realm, c, V).value;
  }
}

let BailOutWrapperClosureRefVisitor = {
  ReferencedIdentifier(path, state) {
    if (path.node.name === "arguments") {
      state.usesArguments = true;
    }
  },
  ThisExpression(path, state) {
    state.usesThis = true;
  },
  "BreakStatement|ContinueStatement"(path, state) {
    if (path.node.label !== null) {
      state.usesGotoToLabel = true;
    }
  },
  ReturnStatement(path, state) {
    state.usesReturn = true;
  },
  ThrowStatement(path, state) {
    state.usesThrow = true;
  },
  VariableDeclaration(path, state) {
    let node = path.node;
    // If our parent is a for loop (there are 3 kinds) we do not need a wrapper
    // i.e. for (var x of y) for (var x in y) for (var x; x < y; x++)
    let needsExpressionWrapper = !t.isForStatement(path.parentPath.node) && !t.isForOfStatement(path.parentPath.node) && !t.isForInStatement(path.parentPath.node);

    const getConvertedDeclarator = index => {
      let { id, init } = node.declarations[index];

      if (t.isIdentifier(id)) {
        // If init is undefined, then we need to ensure we provide
        // an actual Babel undefined node for it.
        if (init === null) {
          init = t.identifier("undefined");
        }
        return t.assignmentExpression("=", id, init);
      } else {
        // We do not currently support ObjectPattern, SpreadPattern and ArrayPattern
        // see: https://github.com/babel/babylon/blob/master/ast/spec.md#patterns
        state.varPatternUnsupported = true;
      }
    };

    if (node.kind === "var") {
      if (node.declarations.length === 1) {
        let convertedNodeOrUndefined = getConvertedDeclarator(0);
        if (convertedNodeOrUndefined === undefined) {
          // Do not continue as we don't support this
          return;
        }
        path.replaceWith(needsExpressionWrapper ? t.expressionStatement(convertedNodeOrUndefined) : convertedNodeOrUndefined);
      } else {
        // convert to sequence, so: `var x = 1, y = 2;` becomes `x = 1, y = 2;`
        let expressions = [];
        for (let i = 0; i < node.declarations.length; i++) {
          let convertedNodeOrUndefined = getConvertedDeclarator(i);
          if (convertedNodeOrUndefined === undefined) {
            // Do not continue as we don't support this
            return;
          }
          expressions.push(convertedNodeOrUndefined);
        }
        let sequenceExpression = t.sequenceExpression(expressions);
        path.replaceWith(needsExpressionWrapper ? t.expressionStatement(sequenceExpression) : sequenceExpression);
      }
    }
  }
};

function generateRuntimeForStatement(ast, strictCode, env, realm, labelSet) {
  let wrapperFunction = new _index.ECMAScriptSourceFunctionValue(realm);
  let body = t.cloneDeep(t.blockStatement([ast]));
  body.uniqueOrderedTag = realm.functionBodyUniqueTagSeed++;
  wrapperFunction.$ECMAScriptCode = body;
  wrapperFunction.$FormalParameters = [];
  wrapperFunction.$Environment = env;
  // We need to scan to AST looking for "this", "return", "throw", labels and "arguments"
  let functionInfo = {
    usesArguments: false,
    usesThis: false,
    usesReturn: false,
    usesGotoToLabel: false,
    usesThrow: false,
    varPatternUnsupported: false
  };

  (0, _babelTraverse2.default)(t.file(t.program([t.expressionStatement(t.functionExpression(null, [], body))])), BailOutWrapperClosureRefVisitor, null, functionInfo);
  _babelTraverse2.default.clearCache();
  let { usesReturn, usesThrow, usesArguments, usesGotoToLabel, varPatternUnsupported, usesThis } = functionInfo;

  if (usesReturn || usesThrow || usesArguments || usesGotoToLabel || varPatternUnsupported) {
    // We do not have support for these yet
    let diagnostic = new _errors.CompilerDiagnostic(`failed to recover from a for/while loop bail-out due to unsupported logic in loop body`, realm.currentLocation, "PP0037", "FatalError");
    realm.handleError(diagnostic);
    throw new _errors.FatalError();
  }
  let args = [wrapperFunction];

  if (usesThis) {
    let thisRef = env.evaluate(t.thisExpression(), strictCode);
    let thisVal = _singletons.Environment.GetValue(realm, thisRef);
    _singletons.Havoc.value(realm, thisVal);
    args.push(thisVal);
  }

  // We havoc the wrapping function value, which in turn invokes the havocing
  // logic which is transitive. The havocing logic should recursively visit
  // all bindings/objects in the loop and its body and mark the associated
  // bindings/objects that do havoc appropiately.
  _singletons.Havoc.value(realm, wrapperFunction);

  let wrapperValue = _index.AbstractValue.createTemporalFromBuildFunction(realm, _index.Value, args, ([func, thisExpr]) => usesThis ? t.callExpression(t.memberExpression(func, t.identifier("call")), [thisExpr]) : t.callExpression(func, []));
  (0, _invariant2.default)(wrapperValue instanceof _index.AbstractValue);
  return wrapperValue;
}

function tryToEvaluateForStatementOrLeaveAsAbstract(ast, strictCode, env, realm, labelSet) {
  (0, _invariant2.default)(!realm.instantRender.enabled);
  let effects;
  let savedSuppressDiagnostics = realm.suppressDiagnostics;
  try {
    realm.suppressDiagnostics = true;
    effects = realm.evaluateForEffects(() => evaluateForStatement(ast, strictCode, env, realm, labelSet), undefined, "tryToEvaluateForStatementOrLeaveAsAbstract");
  } catch (error) {
    if (error instanceof _errors.FatalError) {
      realm.suppressDiagnostics = savedSuppressDiagnostics;
      return realm.evaluateWithPossibleThrowCompletion(() => generateRuntimeForStatement(ast, strictCode, env, realm, labelSet), _index2.TypesDomain.topVal, _index2.ValuesDomain.topVal);
    } else {
      throw error;
    }
  } finally {
    realm.suppressDiagnostics = savedSuppressDiagnostics;
  }
  // Note that the effects of (non joining) abrupt branches are not included
  // in effects, but are tracked separately inside completion.
  realm.applyEffects(effects);
  let completion = effects.result;
  if (completion instanceof _completions.PossiblyNormalCompletion) {
    // in this case one of the branches may complete abruptly, which means that
    // not all control flow branches join into one flow at this point.
    // Consequently we have to continue tracking changes until the point where
    // all the branches come together into one.
    completion = realm.composeWithSavedCompletion(completion);
  }
  // return or throw completion
  if (completion instanceof _completions.AbruptCompletion) throw completion;
  if (completion instanceof _completions.SimpleNormalCompletion) completion = completion.value;
  (0, _invariant2.default)(completion instanceof _index.Value);
  return completion;
}

// ECMA262 13.7.4.7


function evaluateForStatement(ast, strictCode, env, realm, labelSet) {
  let { init, test, update, body } = ast;

  if (init && init.type === "VariableDeclaration") {
    if (init.kind === "var") {
      // for (var VariableDeclarationList; Expression; Expression) Statement
      // 1. Let varDcl be the result of evaluating VariableDeclarationList.
      let varDcl = env.evaluate(init, strictCode);

      // 2. ReturnIfAbrupt(varDcl).
      varDcl;

      // 3. Return ? ForBodyEvaluation(the first Expression, the second Expression, Statement, « », labelSet).
      return ForBodyEvaluation(realm, test, update, body, [], labelSet, strictCode);
    } else {
      // for (LexicalDeclaration Expression; Expression) Statement
      // 1. Let oldEnv be the running execution context's LexicalEnvironment.
      let oldEnv = env;

      // 2. Let loopEnv be NewDeclarativeEnvironment(oldEnv).
      let loopEnv = _singletons.Environment.NewDeclarativeEnvironment(realm, oldEnv);

      // 3. Let loopEnvRec be loopEnv's EnvironmentRecord.
      let loopEnvRec = loopEnv.environmentRecord;

      // 4. Let isConst be the result of performing IsConstantDeclaration of LexicalDeclaration.
      let isConst = init.kind === "const";

      // 5. Let boundNames be the BoundNames of LexicalDeclaration.
      let boundNames = _singletons.Environment.BoundNames(realm, init);

      // 6. For each element dn of boundNames do
      for (let dn of boundNames) {
        // a. If isConst is true, then
        if (isConst) {
          // i. Perform ! loopEnvRec.CreateImmutableBinding(dn, true).
          loopEnvRec.CreateImmutableBinding(dn, true);
        } else {
          // b. Else,
          // i. Perform ! loopEnvRec.CreateMutableBinding(dn, false).
          loopEnvRec.CreateMutableBinding(dn, false);
        }
      }

      // 7. Set the running execution context's LexicalEnvironment to loopEnv.
      realm.getRunningContext().lexicalEnvironment = loopEnv;

      // 8. Let forDcl be the result of evaluating LexicalDeclaration.
      let forDcl = loopEnv.evaluateCompletion(init, strictCode);

      // 9. If forDcl is an abrupt completion, then
      if (forDcl instanceof _completions.AbruptCompletion) {
        // a. Set the running execution context's LexicalEnvironment to oldEnv.
        let currentEnv = realm.getRunningContext().lexicalEnvironment;
        realm.onDestroyScope(currentEnv);
        if (currentEnv !== loopEnv) (0, _invariant2.default)(loopEnv.destroyed);
        realm.getRunningContext().lexicalEnvironment = oldEnv;

        // b. Return Completion(forDcl).
        throw forDcl;
      }

      // 10. If isConst is false, let perIterationLets be boundNames; otherwise let perIterationLets be « ».
      let perIterationLets = !isConst ? boundNames : [];

      let bodyResult;
      try {
        // 11. Let bodyResult be ForBodyEvaluation(the first Expression, the second Expression, Statement, perIterationLets, labelSet).
        bodyResult = ForBodyEvaluation(realm, test, update, body, perIterationLets, labelSet, strictCode);
      } finally {
        // 12. Set the running execution context's LexicalEnvironment to oldEnv.
        let currentEnv = realm.getRunningContext().lexicalEnvironment;
        realm.onDestroyScope(currentEnv);
        if (currentEnv !== loopEnv) (0, _invariant2.default)(loopEnv.destroyed);
        realm.getRunningContext().lexicalEnvironment = oldEnv;
      }
      // 13. Return Completion(bodyResult).
      return bodyResult;
    }
  } else {
    // for (Expression; Expression; Expression) Statement
    // 1. If the first Expression is present, then
    if (init) {
      // a. Let exprRef be the result of evaluating the first Expression.
      let exprRef = env.evaluate(init, strictCode);

      // b. Perform ? GetValue(exprRef).
      _singletons.Environment.GetValue(realm, exprRef);
    }

    // 2. Return ? ForBodyEvaluation(the second Expression, the third Expression, Statement, « », labelSet).
    return ForBodyEvaluation(realm, test, update, body, [], labelSet, strictCode);
  }
}
//# sourceMappingURL=ForStatement.js.map