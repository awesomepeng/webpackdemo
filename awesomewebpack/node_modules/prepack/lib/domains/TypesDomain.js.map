{"version":3,"sources":["../../src/domains/TypesDomain.js"],"names":["TypesDomain","constructor","type","_type","undefined","isTop","getType","binaryOp","op","left","right","lType","rType","resultType","topVal","isTypeCompatibleWith","joinValues","v1","v2","types","joinWith","t","logicalOp","unaryOp","operand"],"mappings":"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","file":"TypesDomain.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport invariant from \"../invariant.js\";\nimport type { BabelBinaryOperator, BabelNodeLogicalOperator, BabelUnaryOperator } from \"babel-types\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  ConcreteValue,\n  FunctionValue,\n  NumberValue,\n  IntegralValue,\n  ObjectValue,\n  PrimitiveValue,\n  StringValue,\n  UndefinedValue,\n  Value,\n} from \"../values/index.js\";\n\n/* An abstract domain for the type of value a variable might have.  */\n\nexport default class TypesDomain {\n  constructor(type: void | typeof Value) {\n    invariant(type !== ConcreteValue, \"Concrete values must be specific\");\n    this._type = type === Value ? undefined : type;\n  }\n\n  static topVal: TypesDomain = new TypesDomain(undefined);\n\n  _type: void | typeof Value;\n\n  isTop(): boolean {\n    return this._type === undefined;\n  }\n\n  getType(): typeof Value {\n    return this._type || Value;\n  }\n\n  // return the type of the result in the case where there is no exception\n  static binaryOp(op: BabelBinaryOperator, left: TypesDomain, right: TypesDomain): TypesDomain {\n    let lType = left._type;\n    let rType = right._type;\n    let resultType = Value;\n    switch (op) {\n      case \"+\":\n        if (lType === undefined || rType === undefined) return TypesDomain.topVal;\n        if (Value.isTypeCompatibleWith(lType, StringValue) || Value.isTypeCompatibleWith(rType, StringValue)) {\n          resultType = StringValue;\n          break;\n        }\n      // eslint-disable-line no-fallthrough\n      case \"-\":\n        if (lType === undefined || rType === undefined) return TypesDomain.topVal;\n        if (lType === IntegralValue && rType === IntegralValue) resultType = IntegralValue;\n        else if (Value.isTypeCompatibleWith(lType, NumberValue) && Value.isTypeCompatibleWith(rType, NumberValue))\n          resultType = NumberValue;\n        break;\n      case \"<\":\n      case \">\":\n      case \">=\":\n      case \"<=\":\n      case \"!=\":\n      case \"==\":\n      case \"!==\":\n      case \"===\":\n      case \"in\":\n      case \"instanceof\":\n        resultType = BooleanValue;\n        break;\n      case \">>>\":\n      case \"<<\":\n      case \">>\":\n      case \"&\":\n      case \"|\":\n      case \"^\":\n        resultType = IntegralValue;\n        break;\n      case \"**\":\n      case \"%\":\n      case \"/\":\n      case \"*\":\n        resultType = NumberValue;\n        break;\n      default:\n        invariant(false);\n    }\n    return new TypesDomain(resultType);\n  }\n\n  static joinValues(v1: void | Value, v2: void | Value): TypesDomain {\n    if (v1 === undefined && v2 === undefined) return new TypesDomain(UndefinedValue);\n    if (v1 === undefined || v2 === undefined) return TypesDomain.topVal;\n    if (v1 instanceof AbstractValue) return v1.types.joinWith(v2.getType());\n    if (v2 instanceof AbstractValue) return v2.types.joinWith(v1.getType());\n    return new TypesDomain(v1.getType()).joinWith(v2.getType());\n  }\n\n  joinWith(t: typeof Value): TypesDomain {\n    let type = this.getType();\n    if (type === t) return this;\n    if (Value.isTypeCompatibleWith(type, NumberValue) && Value.isTypeCompatibleWith(t, NumberValue)) {\n      return new TypesDomain(NumberValue);\n    }\n    if (Value.isTypeCompatibleWith(type, FunctionValue) && Value.isTypeCompatibleWith(t, FunctionValue)) {\n      return new TypesDomain(FunctionValue);\n    }\n    if (Value.isTypeCompatibleWith(type, ObjectValue) && Value.isTypeCompatibleWith(t, ObjectValue)) {\n      return new TypesDomain(ObjectValue);\n    }\n    if (Value.isTypeCompatibleWith(type, PrimitiveValue) && Value.isTypeCompatibleWith(t, PrimitiveValue)) {\n      return new TypesDomain(PrimitiveValue);\n    }\n    return TypesDomain.topVal;\n  }\n\n  static logicalOp(op: BabelNodeLogicalOperator, left: TypesDomain, right: TypesDomain): TypesDomain {\n    return left.joinWith(right.getType());\n  }\n\n  // return the type of the result in the case where there is no exception\n  // note that the type of the operand has no influence on the type of the non exceptional result\n  static unaryOp(op: BabelUnaryOperator, operand: TypesDomain): TypesDomain {\n    const type = operand._type;\n    let resultType = Value;\n    switch (op) {\n      case \"-\":\n      case \"+\":\n        resultType = type === IntegralValue ? IntegralValue : NumberValue;\n        break;\n      case \"~\":\n        resultType = IntegralValue;\n        break;\n      case \"!\":\n      case \"delete\":\n        resultType = BooleanValue;\n        break;\n      case \"typeof\":\n        resultType = StringValue;\n        break;\n      case \"void\":\n        resultType = UndefinedValue;\n        break;\n      default:\n        invariant(false);\n    }\n    return new TypesDomain(resultType);\n  }\n}\n"]}