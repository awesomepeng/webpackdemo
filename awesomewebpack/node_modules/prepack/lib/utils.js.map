{"version":3,"sources":["../src/utils.js"],"names":["typeToString","getTypeFromName","describeValue","type","isInstance","proto","Constructor","prototype","isTypeCompatibleWith","undefined","typeName","value","title","suffix","toDisplayString","constructor","name","kind","arg","args","t","split","map","u","join","getHash","intrinsicName","__originalName"],"mappings":";;;;;QA6BgBA,Y,GAAAA,Y;QA2BAC,e,GAAAA,e;QA6BAC,a,GAAAA,a;;AA1EhB;;AAgBA;;;;;;AA3BA;;;;;;;;;AASA;;AAoBO,SAASF,YAAT,CAAsBG,IAAtB,EAAyD;AAC9D,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,WAA3B,EAAiD;AAC/C,WAAOD,iBAAiBC,WAAjB,IAAgCD,UAAUC,YAAYC,SAA7D;AACD;AACD,MAAIF,QAAQF,KAAKI,SAAjB;AACA,MAAIH,WAAWC,KAAX,wBAAJ,EAAuC;AACrC,WAAO,WAAP;AACD,GAFD,MAEO,IAAID,WAAWC,KAAX,mBAAJ,EAAkC;AACvC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,sBAAJ,EAAqC;AAC1C,WAAO,SAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,WAAO,QAAP;AACD,GAFM,MAEA,IAAID,WAAWC,KAAX,qBAAJ,EAAoC;AACzC,QAAI,aAAMG,oBAAN,CAA2BL,IAA3B,uBAAJ,EAAqD;AACnD,aAAO,UAAP;AACD;AACD,WAAO,QAAP;AACD,GALM,MAKA;AACL,WAAOM,SAAP;AACD;AACF;;AAEM,SAASR,eAAT,CAAyBS,QAAzB,EAAgE;AACrE,UAAQA,QAAR;AACE,SAAK,OAAL;AACE;AACF,SAAK,MAAL;AACE;AACF,SAAK,MAAL;AACE;AACF,SAAK,SAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,QAAL;AACE;AACF,SAAK,OAAL;AACE;AACF,SAAK,UAAL;AACE;AACF,SAAK,UAAL;AACE;AACF;AACE,aAAOD,SAAP;AAxBJ;AA0BD;;AAEM,SAASP,aAAT,CAAuBS,KAAvB,EAA6C;AAClD,MAAIC,KAAJ;AACA,MAAIC,SAAS,EAAb;AACA,MAAIF,sCAAJ,EAAqCC,QAAQD,MAAMG,eAAN,EAAR,CAArC,KACK,IAAIH,mCAAJ,EAAkCC,QAAQ,UAAR,CAAlC,KACA;AACH,6BAAUD,qCAAV,EAA0CA,MAAMI,WAAN,CAAkBC,IAA5D;AACAJ,YAAQ,YAAR;AACA,QAAID,MAAMM,IAAN,KAAeR,SAAnB,EAA8BG,SAAU,WAAUD,MAAMM,IAAK,EAA/B;AAC9B,SAAK,IAAIC,GAAT,IAAgBP,MAAMQ,IAAtB,EAA4B;AAC1B,UAAIC,IAAIlB,cAAcgB,GAAd,CAAR;AACAL,gBACEO,EACGC,KADH,CACS,IADT,EAEGC,GAFH,CAEOC,KAAK,OAAOA,CAFnB,EAGGC,IAHH,CAGQ,IAHR,IAGgB,IAJlB;AAKD;AACF;AACDZ,WAAU,WAAUD,MAAMc,OAAN,EAAgB,EAApC;AACA,MAAId,MAAMe,aAAN,KAAwBjB,SAA5B,EAAuCG,SAAU,qBAAoBD,MAAMe,aAAc,EAAlD;AACvC,MAAIf,MAAMgB,cAAN,KAAyBlB,SAA7B,EAAwCG,SAAU,oBAAmBD,MAAMgB,cAAe,EAAlD;AACxC,SAAOd,SAAU,GAAED,KAAM,KAAIC,MAAO,EAA7B,GAAiCD,KAAxC;AACD","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport {\n  AbstractValue,\n  ArrayValue,\n  BooleanValue,\n  EmptyValue,\n  FunctionValue,\n  NullValue,\n  NumberValue,\n  IntegralValue,\n  ObjectValue,\n  StringValue,\n  SymbolValue,\n  UndefinedValue,\n  PrimitiveValue,\n  Value,\n} from \"./values/index.js\";\nimport invariant from \"./invariant.js\";\n\nexport function typeToString(type: typeof Value): void | string {\n  function isInstance(proto, Constructor): boolean {\n    return proto instanceof Constructor || proto === Constructor.prototype;\n  }\n  let proto = type.prototype;\n  if (isInstance(proto, UndefinedValue)) {\n    return \"undefined\";\n  } else if (isInstance(proto, NullValue)) {\n    return \"object\";\n  } else if (isInstance(proto, StringValue)) {\n    return \"string\";\n  } else if (isInstance(proto, BooleanValue)) {\n    return \"boolean\";\n  } else if (isInstance(proto, NumberValue)) {\n    return \"number\";\n  } else if (isInstance(proto, SymbolValue)) {\n    return \"symbol\";\n  } else if (isInstance(proto, ObjectValue)) {\n    if (Value.isTypeCompatibleWith(type, FunctionValue)) {\n      return \"function\";\n    }\n    return \"object\";\n  } else {\n    return undefined;\n  }\n}\n\nexport function getTypeFromName(typeName: string): void | typeof Value {\n  switch (typeName) {\n    case \"empty\":\n      return EmptyValue;\n    case \"void\":\n      return UndefinedValue;\n    case \"null\":\n      return NullValue;\n    case \"boolean\":\n      return BooleanValue;\n    case \"string\":\n      return StringValue;\n    case \"symbol\":\n      return SymbolValue;\n    case \"number\":\n      return NumberValue;\n    case \"object\":\n      return ObjectValue;\n    case \"array\":\n      return ArrayValue;\n    case \"function\":\n      return FunctionValue;\n    case \"integral\":\n      return IntegralValue;\n    default:\n      return undefined;\n  }\n}\n\nexport function describeValue(value: Value): string {\n  let title;\n  let suffix = \"\";\n  if (value instanceof PrimitiveValue) title = value.toDisplayString();\n  else if (value instanceof ObjectValue) title = \"[object]\";\n  else {\n    invariant(value instanceof AbstractValue, value.constructor.name);\n    title = \"[abstract]\";\n    if (value.kind !== undefined) title += `, kind: ${value.kind}`;\n    for (let arg of value.args) {\n      let t = describeValue(arg);\n      suffix +=\n        t\n          .split(\"\\n\")\n          .map(u => \"  \" + u)\n          .join(\"\\n\") + \"\\n\";\n    }\n  }\n  title += `, hash: ${value.getHash()}`;\n  if (value.intrinsicName !== undefined) title += `, intrinsic name: ${value.intrinsicName}`;\n  if (value.__originalName !== undefined) title += `, original name: ${value.__originalName}`;\n  return suffix ? `${title}\\n${suffix}` : title;\n}\n"]}