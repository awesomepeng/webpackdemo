{"version":3,"sources":["../src/statistics.js"],"names":["RealmStatistics","constructor","getTime","getMemory","simplifications","simplificationAttempts","evaluatedNodes","parsing","PerformanceTracker","fixupSourceLocations","fixupFilenames","evaluation","getRealmStatistics","projectPerformanceTrackers","suffix","projection","res","key","Object","keys","value","log","console","logPerformanceTrackers","format","time","memory","_getTime","_getMemory","_running","start","undefined","stop","measure","action"],"mappings":"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","file":"statistics.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"./invariant.js\";\n\nexport class RealmStatistics {\n  constructor(getTime: void | (() => number), getMemory: void | (() => number)) {\n    this.simplifications = 0;\n    this.simplificationAttempts = 0;\n    this.evaluatedNodes = 0;\n\n    this.parsing = new PerformanceTracker(getTime, getMemory);\n    this.fixupSourceLocations = new PerformanceTracker(getTime, getMemory);\n    this.fixupFilenames = new PerformanceTracker(getTime, getMemory);\n    this.evaluation = new PerformanceTracker(getTime, getMemory);\n  }\n\n  simplifications: number;\n  simplificationAttempts: number;\n  evaluatedNodes: number;\n\n  // legacy projection\n  getRealmStatistics(): any {\n    return {\n      simplifications: this.simplifications,\n      simplificationAttempts: this.simplificationAttempts,\n      evaluatedNodes: this.evaluatedNodes,\n    };\n  }\n\n  parsing: PerformanceTracker;\n  fixupSourceLocations: PerformanceTracker;\n  fixupFilenames: PerformanceTracker;\n  evaluation: PerformanceTracker;\n\n  projectPerformanceTrackers(suffix: string, projection: PerformanceTracker => number): any {\n    let res = {};\n    for (let key of Object.keys(this)) {\n      let value = (this: any)[key];\n      if (value instanceof PerformanceTracker) res[key + suffix] = projection(value);\n    }\n    return res;\n  }\n\n  log(): void {\n    console.log(`=== realm statistics`);\n    console.log(`${this.evaluatedNodes} AST nodes evaluated.`);\n    console.log(`${this.simplifications} abstract values simplified after ${this.simplificationAttempts} attempts.`);\n  }\n\n  logPerformanceTrackers(format: PerformanceTracker => string): void {\n    console.log(\n      `${format(this.parsing)} parsing, ${format(this.fixupSourceLocations)} fixing source locations, ${format(\n        this.fixupFilenames\n      )} fixing filenames, ${format(this.evaluation)} evaluating global code`\n    );\n  }\n}\n\nexport class PerformanceTracker {\n  time: number;\n  memory: number;\n\n  _getTime: void | (() => number);\n  _getMemory: void | (() => number);\n  _running: boolean;\n\n  constructor(getTime: void | (() => number), getMemory: void | (() => number)) {\n    this.time = this.memory = 0;\n    this._getTime = getTime;\n    this._getMemory = getMemory;\n    this._running = false;\n  }\n\n  start(): void {\n    invariant(this._running === false);\n    if (this._getTime !== undefined) this.time = this._getTime() - this.time;\n    if (this._getMemory !== undefined) this.memory = this._getMemory() - this.memory;\n    this._running = true;\n  }\n\n  stop(): void {\n    invariant(this._running === true);\n    if (this._getTime !== undefined) this.time = this._getTime() - this.time;\n    if (this._getMemory !== undefined) this.memory = this._getMemory() - this.memory;\n    this._running = false;\n  }\n\n  measure<T>(action: () => T): T {\n    this.start();\n    try {\n      return action();\n    } finally {\n      this.stop();\n    }\n  }\n}\n"]}