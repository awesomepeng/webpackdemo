"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResidualHeapSerializer = undefined;

var _realm = require("../realm.js");

var _index = require("../methods/index.js");

var _index2 = require("../values/index.js");

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

var _generator = require("../utils/generator.js");

var _invariant = require("../invariant.js");

var _invariant2 = _interopRequireDefault(_invariant);

var _types = require("./types.js");

var _statistics = require("./statistics.js");

var _logger = require("../utils/logger.js");

var _modules = require("../utils/modules.js");

var _HeapInspector = require("../utils/HeapInspector.js");

var _ResidualFunctions = require("./ResidualFunctions.js");

var _factorify = require("./factorify.js");

var _babelhelpers = require("../utils/babelhelpers.js");

var _Emitter = require("./Emitter.js");

var _ResidualHeapValueIdentifiers = require("./ResidualHeapValueIdentifiers.js");

var _utils = require("./utils.js");

var _errors = require("../errors.js");

var _hoisting = require("../react/hoisting.js");

var _singletons = require("../singletons.js");

var _ResidualReactElementSerializer = require("./ResidualReactElementSerializer.js");

var _environment = require("../environment.js");

var _GeneratorDAG = require("./GeneratorDAG.js");

var _ResidualFunctionInstantiator = require("./ResidualFunctionInstantiator");

var _utils2 = require("../utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

function commentStatement(text) {
  let s = t.emptyStatement();
  s.leadingComments = [{ type: "BlockComment", value: text }];
  return s;
}

class CountingSemaphore {
  constructor(action, initialCount = 1) {
    (0, _invariant2.default)(initialCount >= 1);
    this.count = initialCount;
    this.action = action;
  }
  acquireOne() {
    this.count++;
  }
  releaseOne() {
    (0, _invariant2.default)(this.count > 0);
    if (--this.count === 0) this.action();
  }
}

class ResidualHeapSerializer {
  constructor(realm, logger, modules, residualHeapValueIdentifiers, residualHeapInspector, residualValues, residualFunctionInstances, residualClassMethodInstances, residualFunctionInfos, options, referencedDeclaredValues, additionalFunctionValuesAndEffects, additionalFunctionValueInfos, declarativeEnvironmentRecordsBindings, referentializer, generatorDAG, conditionalFeasibility, additionalGeneratorRoots) {
    this.realm = realm;
    this.logger = logger;
    this.modules = modules;
    this.residualHeapValueIdentifiers = residualHeapValueIdentifiers;
    this.referentializer = referentializer;

    let realmGenerator = this.realm.generator;
    (0, _invariant2.default)(realmGenerator);
    this.generator = realmGenerator;
    let realmPreludeGenerator = this.realm.preludeGenerator;
    (0, _invariant2.default)(realmPreludeGenerator);
    this.preludeGenerator = realmPreludeGenerator;

    this.prelude = [];
    this._descriptors = new Map();
    this.needsEmptyVar = false;
    this.needsAuxiliaryConstructor = false;
    this.descriptorNameGenerator = this.preludeGenerator.createNameGenerator("$$");
    this.factoryNameGenerator = this.preludeGenerator.createNameGenerator("$_");
    this.intrinsicNameGenerator = this.preludeGenerator.createNameGenerator("$i_");
    this.functionNameGenerator = this.preludeGenerator.createNameGenerator("$f_");
    this.initializeConditionNameGenerator = this.preludeGenerator.createNameGenerator("_initialized");
    this.initializerNameGenerator = this.preludeGenerator.createNameGenerator("__init_");
    this.requireReturns = new Map();
    this.serializedValues = new Set();
    this._serializedValueWithIdentifiers = new Set();
    this.additionalFunctionValueNestedFunctions = new Set();
    this.residualReactElementSerializer = new _ResidualReactElementSerializer.ResidualReactElementSerializer(this.realm, this);
    this.residualFunctions = new _ResidualFunctions.ResidualFunctions(this.realm, options, this.modules, this.requireReturns, {
      getContainingAdditionalFunction: functionValue => {
        let instance = this.residualFunctionInstances.get(functionValue);
        (0, _invariant2.default)(instance !== undefined);
        return instance.containingAdditionalFunction;
      },
      getLocation: value => this.getSerializeObjectIdentifier(value),
      createLocation: containingAdditionalFunction => {
        let location = t.identifier(this.initializeConditionNameGenerator.generate());
        let declar = t.variableDeclaration("var", [t.variableDeclarator(location)]);
        this.getPrelude(containingAdditionalFunction).push(declar);
        return location;
      },
      createFunction: (containingAdditionalFunction, statements) => {
        let id = t.identifier(this.initializerNameGenerator.generate());
        this.getPrelude(containingAdditionalFunction).push(t.functionDeclaration(id, [], t.blockStatement(statements)));
        return id;
      }
    }, this.prelude, this.factoryNameGenerator, residualFunctionInfos, residualFunctionInstances, residualClassMethodInstances, additionalFunctionValueInfos, this.additionalFunctionValueNestedFunctions, referentializer);
    this.emitter = new _Emitter.Emitter(this.residualFunctions, referencedDeclaredValues, conditionalFeasibility, this.realm.derivedIds);
    this.mainBody = this.emitter.getBody();
    this.residualHeapInspector = residualHeapInspector;
    this.residualValues = residualValues;
    this.residualFunctionInstances = residualFunctionInstances;
    this.residualClassMethodInstances = residualClassMethodInstances;
    this.residualFunctionInfos = residualFunctionInfos;
    this._options = options;
    this.referencedDeclaredValues = referencedDeclaredValues;
    this.activeGeneratorBodies = new Map();
    this.additionalFunctionValuesAndEffects = additionalFunctionValuesAndEffects;
    this.additionalFunctionValueInfos = additionalFunctionValueInfos;
    this.rewrittenAdditionalFunctions = new Map();
    this.declarativeEnvironmentRecordsBindings = declarativeEnvironmentRecordsBindings;
    this.generatorDAG = generatorDAG;
    this.conditionalFeasibility = conditionalFeasibility;
    this.additionalFunctionGenerators = new Map();
    this.declaredGlobalLets = new Map();
    this._objectSemaphores = new Map();
    this.additionalGeneratorRoots = additionalGeneratorRoots;
  }

  // function values nested in additional functions can't delay initializations
  // TODO: revisit this and fix additional functions to be capable of delaying initializations


  getStatistics() {
    (0, _invariant2.default)(this.realm.statistics instanceof _statistics.SerializerStatistics, "serialization requires SerializerStatistics");
    return this.realm.statistics;
  }

  _acquireOneObjectSemaphore(object) {
    let semaphore = this._objectSemaphores.get(object);
    if (semaphore !== undefined) semaphore.acquireOne();
    return semaphore;
  }

  // Configures all mutable aspects of an object, in particular:
  // symbols, properties, prototype.
  // For every created object that corresponds to a value,
  // this function should be invoked once.
  // Thus, as a side effect, we gather statistics here on all emitted objects.
  _emitObjectProperties(obj, properties = obj.properties, objectPrototypeAlreadyEstablished = false, cleanupDummyProperties, skipPrototype = false) {
    //inject symbols
    for (let [symbol, propertyBinding] of obj.symbols) {
      (0, _invariant2.default)(propertyBinding);
      let desc = propertyBinding.descriptor;
      if (desc === undefined) continue; //deleted
      let semaphore = this._acquireOneObjectSemaphore(obj);
      this.emitter.emitNowOrAfterWaitingForDependencies(this._getDescriptorValues(desc).concat([symbol, obj]), () => {
        (0, _invariant2.default)(desc !== undefined);
        this._emitProperty(obj, symbol, desc);
        if (semaphore !== undefined) semaphore.releaseOne();
      }, this.emitter.getBody());
    }

    // inject properties
    for (let [key, propertyBinding] of properties) {
      (0, _invariant2.default)(propertyBinding);
      if (propertyBinding.pathNode !== undefined) continue; // Property is assigned to inside loop
      let desc = propertyBinding.descriptor;
      if (desc === undefined) continue; //deleted
      if (this.residualHeapInspector.canIgnoreProperty(obj, key)) continue;
      (0, _invariant2.default)(desc !== undefined);
      let semaphore = this._acquireOneObjectSemaphore(obj);
      let body = this.emitter.getBody();
      this.emitter.emitNowOrAfterWaitingForDependencies(this._getDescriptorValues(desc).concat(obj), () => {
        (0, _invariant2.default)(desc !== undefined);
        this._emitProperty(obj, key, desc, cleanupDummyProperties != null && cleanupDummyProperties.has(key));
        if (semaphore !== undefined) semaphore.releaseOne();
      }, body);
    }

    // inject properties with computed names
    if (obj.unknownProperty !== undefined) {
      let desc = obj.unknownProperty.descriptor;
      if (desc !== undefined) {
        let val = desc.value;
        (0, _invariant2.default)(val instanceof _index2.AbstractValue);
        let semaphore = this._acquireOneObjectSemaphore(obj);
        this.emitter.emitNowOrAfterWaitingForDependencies(this._getNestedValuesFromAbstract(val, [obj]), () => {
          (0, _invariant2.default)(val instanceof _index2.AbstractValue);
          this._emitPropertiesWithComputedNames(obj, val);
          if (semaphore !== undefined) semaphore.releaseOne();
        }, this.emitter.getBody());
      }
    }

    // prototype
    if (!skipPrototype) {
      this._emitObjectPrototype(obj, objectPrototypeAlreadyEstablished);
      if (obj instanceof _index2.FunctionValue) this._emitConstructorPrototype(obj);
    }

    this.getStatistics().objects++;
    this.getStatistics().objectProperties += obj.properties.size;
  }

  _emitObjectPrototype(obj, objectPrototypeAlreadyEstablished) {
    let kind = obj.getKind();
    let proto = obj.$Prototype;
    if (objectPrototypeAlreadyEstablished) {
      if (this.realm.invariantLevel >= 3) {
        this.emitter.emitNowOrAfterWaitingForDependencies([proto, obj], () => {
          (0, _invariant2.default)(proto);
          let serializedProto = this.serializeValue(proto);
          let uid = this.getSerializeObjectIdentifier(obj);
          const fetchedPrototype = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) || this.realm.isCompatibleWith("mobile") ? t.memberExpression(uid, _babelhelpers.protoExpression) : t.callExpression(this.preludeGenerator.memoizeReference("Object.getPrototypeOf"), [uid]);
          let condition = t.binaryExpression("!==", fetchedPrototype, serializedProto);
          let consequent = this.generator.getErrorStatement(t.stringLiteral("unexpected prototype"));
          this.emitter.emit(t.ifStatement(condition, consequent));
        }, this.emitter.getBody());
      }
      return;
    }
    if (proto === this.realm.intrinsics[kind + "Prototype"]) return;

    let semaphore = this._acquireOneObjectSemaphore(obj);
    this.emitter.emitNowOrAfterWaitingForDependencies([proto, obj], () => {
      (0, _invariant2.default)(proto);
      let serializedProto = this.serializeValue(proto);
      let uid = this.getSerializeObjectIdentifier(obj);
      if (!this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION) && !this.realm.isCompatibleWith("mobile")) this.emitter.emit(t.expressionStatement(t.callExpression(this.preludeGenerator.memoizeReference("Object.setPrototypeOf"), [uid, serializedProto])));else {
        this.emitter.emit(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(uid, _babelhelpers.protoExpression), serializedProto)));
      }
      if (semaphore !== undefined) semaphore.releaseOne();
    }, this.emitter.getBody());
  }

  _emitConstructorPrototype(func) {
    // If the original prototype object was mutated,
    // request its serialization here as this might be observable by
    // residual code.
    let prototype = _HeapInspector.HeapInspector.getPropertyValue(func, "prototype");
    if (prototype instanceof _index2.ObjectValue && this.residualValues.has(prototype)) {
      this.emitter.emitNowOrAfterWaitingForDependencies([func], () => {
        (0, _invariant2.default)(prototype instanceof _index2.Value);
        this.serializeValue(prototype);
      }, this.emitter.getBody());
    }
  }

  _getNestedValuesFromAbstract(absVal, values) {
    if (absVal.kind === "widened property") return values;
    if (absVal.kind === "template for prototype member expression") return values;
    (0, _invariant2.default)(absVal.args.length === 3);
    let cond = absVal.args[0];
    (0, _invariant2.default)(cond instanceof _index2.AbstractValue);
    if (cond.kind === "template for property name condition") {
      let P = cond.args[0];
      values.push(P);
      let V = absVal.args[1];
      values.push(V);
      let W = absVal.args[2];
      if (W instanceof _index2.AbstractValue) this._getNestedValuesFromAbstract(W, values);else values.push(W);
    } else {
      // conditional assignment
      values.push(cond);
      let consequent = absVal.args[1];
      if (consequent instanceof _index2.AbstractValue) {
        this._getNestedValuesFromAbstract(consequent, values);
      } else {
        values.push(consequent);
      }
      let alternate = absVal.args[2];
      if (alternate instanceof _index2.AbstractValue) {
        this._getNestedValuesFromAbstract(alternate, values);
      } else {
        values.push(alternate);
      }
    }
    return values;
  }

  _emitPropertiesWithComputedNames(obj, absVal) {
    if (absVal.kind === "widened property") return;
    if (absVal.kind === "template for prototype member expression") return;
    (0, _invariant2.default)(absVal.args.length === 3);
    let cond = absVal.args[0];
    (0, _invariant2.default)(cond instanceof _index2.AbstractValue);
    if (cond.kind === "template for property name condition") {
      let P = cond.args[0];
      (0, _invariant2.default)(P instanceof _index2.AbstractValue);
      let V = absVal.args[1];
      let earlier_props = absVal.args[2];
      if (earlier_props instanceof _index2.AbstractValue) this._emitPropertiesWithComputedNames(obj, earlier_props);
      let uid = this.getSerializeObjectIdentifier(obj);
      let serializedP = this.serializeValue(P);
      let serializedV = this.serializeValue(V);
      this.emitter.emit(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(uid, serializedP, true), serializedV)));
    } else {
      // conditional assignment
      let serializedCond = this.serializeValue(cond);
      let consequent = absVal.args[1];
      let valuesToProcess = new Set();
      let consequentStatement;
      let alternateStatement;

      if (consequent instanceof _index2.AbstractValue) {
        let oldBody = this.emitter.beginEmitting("consequent", {
          type: "ConditionalAssignmentBranch",
          parentBody: undefined,
          entries: [],
          done: false
        },
        /*isChild*/true);
        this._emitPropertiesWithComputedNames(obj, consequent);
        let consequentBody = this.emitter.endEmitting("consequent", oldBody, valuesToProcess, /*isChild*/true);
        consequentStatement = t.blockStatement(consequentBody.entries);
      }
      let alternate = absVal.args[2];
      if (alternate instanceof _index2.AbstractValue) {
        let oldBody = this.emitter.beginEmitting("alternate", {
          type: "ConditionalAssignmentBranch",
          parentBody: undefined,
          entries: [],
          done: false
        },
        /*isChild*/true);
        this._emitPropertiesWithComputedNames(obj, alternate);
        let alternateBody = this.emitter.endEmitting("alternate", oldBody, valuesToProcess, /*isChild*/true);
        alternateStatement = t.blockStatement(alternateBody.entries);
      }
      if (consequentStatement) {
        this.emitter.emit(t.ifStatement(serializedCond, consequentStatement, alternateStatement));
      } else if (alternateStatement) {
        this.emitter.emit(t.ifStatement(t.unaryExpression("!", serializedCond), alternateStatement));
      }
      this.emitter.processValues(valuesToProcess);
    }
  }

  // Overridable.
  getSerializeObjectIdentifier(val) {
    return this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val);
  }

  _emitProperty(val, key, desc, deleteIfMightHaveBeenDeleted = false) {
    // Location for the property to be assigned to
    let locationFunction = () => {
      let serializedKey = key instanceof _index2.SymbolValue || key instanceof _index2.AbstractValue ? this.serializeValue(key) : (0, _babelhelpers.getAsPropertyNameExpression)(key);
      let computed = key instanceof _index2.SymbolValue || key instanceof _index2.AbstractValue || !t.isIdentifier(serializedKey);
      return t.memberExpression(this.getSerializeObjectIdentifier(val), serializedKey, computed);
    };
    if (desc === undefined) {
      this._deleteProperty(locationFunction());
    } else {
      this.emitter.emit(this.emitDefinePropertyBody(deleteIfMightHaveBeenDeleted, locationFunction, val, key, desc));
    }
  }

  emitDefinePropertyBody(deleteIfMightHaveBeenDeleted, locationFunction, val, key, desc) {
    if (desc.joinCondition) {
      let cond = this.serializeValue(desc.joinCondition);
      (0, _invariant2.default)(cond !== undefined);
      let trueBody;
      let falseBody;
      if (desc.descriptor1) trueBody = this.emitDefinePropertyBody(deleteIfMightHaveBeenDeleted, locationFunction, val, key, desc.descriptor1);
      if (desc.descriptor2) falseBody = this.emitDefinePropertyBody(deleteIfMightHaveBeenDeleted, locationFunction, val, key, desc.descriptor2);
      if (trueBody && falseBody) return t.ifStatement(cond, trueBody, falseBody);
      if (trueBody) return t.ifStatement(cond, trueBody);
      if (falseBody) return t.ifStatement(t.unaryExpression("!", cond), falseBody);
      (0, _invariant2.default)(false);
    }
    if (locationFunction !== undefined && this._canEmbedProperty(val, key, desc)) {
      let descValue = desc.value;
      (0, _invariant2.default)(descValue instanceof _index2.Value);
      (0, _invariant2.default)(!this.emitter.getReasonToWaitForDependencies([descValue, val]), "precondition of _emitProperty");
      let mightHaveBeenDeleted = descValue.mightHaveBeenDeleted();
      // The only case we do not need to remove the dummy property is array index property.
      return this._getPropertyAssignmentStatement(locationFunction(), descValue, mightHaveBeenDeleted, deleteIfMightHaveBeenDeleted);
    }
    let body = [];
    let descProps = [];
    let boolKeys = ["enumerable", "configurable"];
    let valKeys = [];

    if (!desc.get && !desc.set) {
      boolKeys.push("writable");
      valKeys.push("value");
    } else {
      valKeys.push("set", "get");
    }

    let descriptorsKey = [];
    for (let boolKey of boolKeys) {
      if (boolKey in desc) {
        let b = desc[boolKey];
        (0, _invariant2.default)(b !== undefined);
        descProps.push(t.objectProperty(t.identifier(boolKey), t.booleanLiteral(b)));
        descriptorsKey.push(`${boolKey}:${b.toString()}`);
      }
    }

    descriptorsKey = descriptorsKey.join(",");
    let descriptorId = this._descriptors.get(descriptorsKey);
    if (descriptorId === undefined) {
      descriptorId = t.identifier(this.descriptorNameGenerator.generate(descriptorsKey));
      let declar = t.variableDeclaration("var", [t.variableDeclarator(descriptorId, t.objectExpression(descProps))]);
      // The descriptors are used across all scopes, and thus must be declared in the prelude.
      this.prelude.push(declar);
      this._descriptors.set(descriptorsKey, descriptorId);
    }
    (0, _invariant2.default)(descriptorId !== undefined);

    for (let descKey of valKeys) {
      if (descKey in desc) {
        let descValue = desc[descKey];
        (0, _invariant2.default)(descValue instanceof _index2.Value);
        if (descValue instanceof _index2.UndefinedValue) {
          this.serializeValue(descValue);
          continue;
        }
        (0, _invariant2.default)(!this.emitter.getReasonToWaitForDependencies([descValue]), "precondition of _emitProperty");
        body.push(t.assignmentExpression("=", t.memberExpression(descriptorId, t.identifier(descKey)), this.serializeValue(descValue)));
      }
    }
    let serializedKey = key instanceof _index2.SymbolValue || key instanceof _index2.AbstractValue ? this.serializeValue(key) : (0, _babelhelpers.getAsPropertyNameExpression)(key, /*canBeIdentifier*/false);
    (0, _invariant2.default)(!this.emitter.getReasonToWaitForDependencies([val]), "precondition of _emitProperty");
    body.push(t.callExpression(this.preludeGenerator.memoizeReference("Object.defineProperty"), [this.getSerializeObjectIdentifier(val), serializedKey, descriptorId]));
    return t.expressionStatement(t.sequenceExpression(body));
  }

  _serializeDeclarativeEnvironmentRecordBinding(residualFunctionBinding) {
    if (!residualFunctionBinding.serializedValue) {
      let value = residualFunctionBinding.value;
      (0, _invariant2.default)(residualFunctionBinding.declarativeEnvironmentRecord);

      if (residualFunctionBinding.hasLeaked) {
        this.referentializer.referentializeLeakedBinding(residualFunctionBinding);
      } else {
        residualFunctionBinding.serializedValue = value !== undefined ? this.serializeValue(value) : _babelhelpers.voidExpression;
        if (residualFunctionBinding.modified) {
          this.referentializer.referentializeModifiedBinding(residualFunctionBinding);
        }
      }

      if (value !== undefined && value.mightBeObject()) {
        // Increment ref count one more time to ensure that this object will be assigned a unique id.
        // This ensures that only once instance is created across all possible residual function invocations.
        this.residualHeapValueIdentifiers.incrementReferenceCount(value);
      }
    }
  }

  // Augments an initial set of generators with all generators from
  // which any of a given set of function values is referenced.
  _getReferencingGenerators(initialGenerators, functionValues, referencingOnlyOptimizedFunction) {
    let result = new Set(initialGenerators);
    let activeFunctions = functionValues.slice();
    let visitedFunctions = new Set();

    while (activeFunctions.length > 0) {
      let f = activeFunctions.pop();
      if (visitedFunctions.has(f)) continue;
      visitedFunctions.add(f);

      if (f === referencingOnlyOptimizedFunction) {
        let g = this.additionalFunctionGenerators.get(f);
        (0, _invariant2.default)(g !== undefined);
        result.add(g);
      } else {
        let scopes = this.residualValues.get(f);
        (0, _invariant2.default)(scopes);
        for (let scope of scopes) if (scope instanceof _index2.FunctionValue) {
          activeFunctions.push(scope);
        } else {
          (0, _invariant2.default)(scope instanceof _generator.Generator);
          result.add(scope);
        }
      }
    }
    return Array.from(result);
  }

  isDefinedInsideFunction(childFunction, maybeParentFunctions) {
    for (let maybeParentFunction of maybeParentFunctions) {
      if (childFunction === maybeParentFunction) {
        continue;
      }
      let env = childFunction.$Environment;
      while (env.parent !== null) {
        let envRecord = env.environmentRecord;
        if (envRecord instanceof _environment.FunctionEnvironmentRecord && envRecord.$FunctionObject === maybeParentFunction) {
          return true;
        }
        env = env.parent;
      }
    }
    return false;
  }

  // Try and get the root optimized function when passed in an optimized function
  // that may or may not be nested in the tree of said root, or is the root optimized function
  tryGetOptimizedFunctionRoot(val) {
    let scopes = this.residualValues.get(val);
    let functionValues = new Set();
    (0, _invariant2.default)(scopes !== undefined);
    for (let scope of scopes) {
      let s = scope;
      while (s instanceof _generator.Generator) {
        s = this.generatorDAG.getParent(s);
      }
      if (s === "GLOBAL") return undefined;
      (0, _invariant2.default)(s instanceof _index2.FunctionValue);
      functionValues.add(s);
    }
    let additionalFunction;

    for (let functionValue of functionValues) {
      if (this.additionalFunctionGenerators.has(functionValue)) {
        if (this.isDefinedInsideFunction(functionValue, functionValues)) {
          continue;
        }
        if (additionalFunction !== undefined && additionalFunction !== functionValue) {
          return undefined;
        }
        additionalFunction = functionValue;
      } else {
        let f = this.tryGetOptimizedFunctionRoot(functionValue);
        if (f === undefined) return undefined;
        if (additionalFunction !== undefined && additionalFunction !== f) return undefined;
        additionalFunction = f;
      }
    }
    return additionalFunction;
  }

  _getActiveBodyOfGenerator(generator) {
    return generator === this.generator ? this.mainBody : this.activeGeneratorBodies.get(generator);
  }

  // Determine whether initialization code for a value should go into the main body, or a more specific initialization body.
  _getTarget(val, trace) {
    let scopes = this.residualValues.get(val);
    (0, _invariant2.default)(scopes !== undefined, "value must have been visited");

    // All relevant values were visited in at least one scope.
    (0, _invariant2.default)(scopes.size >= 1);
    if (trace) this._logScopes(scopes);

    // If a value is used in more than one scope, prevent inlining as it might be an additional root with a particular creation scope
    if (scopes.size > 1) this.residualHeapValueIdentifiers.incrementReferenceCount(val);

    // First, let's figure out from which function and generator scopes this value is referenced.
    let functionValues = [];
    let generators = [];
    for (let scope of scopes) {
      if (scope instanceof _index2.FunctionValue) {
        functionValues.push(scope);
      } else {
        (0, _invariant2.default)(scope instanceof _generator.Generator, "scope must be either function value or generator");
        generators.push(scope);
      }
    }

    let referencingOnlyOptimizedFunction = this.tryGetOptimizedFunctionRoot(val);
    if (generators.length === 0) {
      // This value is only referenced from residual functions.
      if (this._options.delayInitializations && (referencingOnlyOptimizedFunction === undefined || !functionValues.includes(referencingOnlyOptimizedFunction))) {
        // We can delay the initialization, and move it into a conditional code block in the residual functions!
        let body = this.residualFunctions.residualFunctionInitializers.registerValueOnlyReferencedByResidualFunctions(functionValues, val);

        return {
          body,
          usedOnlyByResidualFunctions: true,
          referencingOnlyOptimizedFunction,
          description: "delay_initializer"
        };
      }
    }

    if (trace) console.log(`  is referenced only by additional function? ${referencingOnlyOptimizedFunction !== undefined ? "yes" : "no"}`);

    // flatten all function values into the scopes that use them
    generators = this._getReferencingGenerators(generators, functionValues, referencingOnlyOptimizedFunction);

    if (referencingOnlyOptimizedFunction === undefined) {
      // Remove all generators rooted in additional functions,
      // since we know that there's at least one root that's not in an additional function
      // which requires the value to be emitted outside of the additional function.
      generators = generators.filter(generator => {
        let s = generator;
        while (s instanceof _generator.Generator) {
          s = this.generatorDAG.getParent(s);
        }
        return s === "GLOBAL";
      });
      if (generators.length === 0) {
        // This means that the value was referenced by multiple additional functions, and thus it must have existed at the end of global code execution.
        // TODO: Emit to the end, not somewhere in the middle of the mainBody.
        // TODO: Revisit for nested additional functions
        return { body: this.mainBody };
      }
    }

    const getGeneratorParent = g => {
      let s = this.generatorDAG.getParent(g);
      return s instanceof _generator.Generator ? s : undefined;
    };
    // This value is referenced from more than one generator.
    // Let's find the body associated with their common ancestor.
    let commonAncestor = Array.from(generators).reduce((x, y) => (0, _utils.commonAncestorOf)(x, y, getGeneratorParent), generators[0]);
    // In the case where we have no common ancestor but we have an optimized function reference,
    // we can attempt to use the generator of the single optimized function
    if (commonAncestor === undefined && referencingOnlyOptimizedFunction !== undefined) {
      commonAncestor = this.additionalFunctionGenerators.get(referencingOnlyOptimizedFunction);
    }
    (0, _invariant2.default)(commonAncestor !== undefined, "there must always be a common generator ancestor");
    if (trace) console.log(`  common ancestor: ${commonAncestor.getName()}`);

    let body;
    while (true) {
      body = this._getActiveBodyOfGenerator(commonAncestor);
      if (body !== undefined) break;
      commonAncestor = getGeneratorParent(commonAncestor);
      (0, _invariant2.default)(commonAncestor !== undefined, "there must always be an active body for the common generator ancestor");
    }

    // So we have a (common ancestor) body now.
    (0, _invariant2.default)(body !== undefined, "there must always be an active body");

    // However, there's a potential problem: That body might belong to a generator
    // which has nested generators that are currently being processed (they are not "done" yet).
    // This becomes a problem when the value for which we are trying to determine the target body
    // depends on other values which are only declared in such not-yet-done nested generator!
    // So we find all such not-yet-done bodies here, and pick a most nested one
    // which is related to one of the scopes this value is used by.
    let notYetDoneBodies = new Set();
    this.emitter.dependenciesVisitor(val, {
      onArrayWithWidenedNumericProperty: dependency => {
        if (trace) {
          console.log(`  depending on unknown array with numeric properties and an identifier ${dependency.intrinsicName || "?"}`);
        }
        (0, _invariant2.default)(referencingOnlyOptimizedFunction === undefined || this.emitter.emittingToAdditionalFunction(), "additional function inconsistency");
        let declarationBody = this.emitter.getDeclarationBody(dependency);
        if (declarationBody !== undefined) {
          if (trace) console.log(`    has declaration body`);
          for (let b = declarationBody; b !== undefined; b = b.parentBody) {
            if (notYetDoneBodies.has(b)) break;
            notYetDoneBodies.add(b);
          }
        }
      },
      onAbstractValueWithIdentifier: dependency => {
        if (trace) console.log(`  depending on abstract value with identifier ${dependency.intrinsicName || "?"}`);
        (0, _invariant2.default)(referencingOnlyOptimizedFunction === undefined || this.emitter.emittingToAdditionalFunction(), "additional function inconsistency");
        let declarationBody = this.emitter.getDeclarationBody(dependency);
        if (declarationBody !== undefined) {
          if (trace) console.log(`    has declaration body`);
          for (let b = declarationBody; b !== undefined; b = b.parentBody) {
            if (notYetDoneBodies.has(b)) break;
            notYetDoneBodies.add(b);
          }
        }
      }
    });
    if (trace) console.log(`  got ${notYetDoneBodies.size} not yet done bodies`);
    for (let s of generators) for (let g = s; g !== undefined; g = getGeneratorParent(g)) {
      let scopeBody = this._getActiveBodyOfGenerator(g);
      if (scopeBody !== undefined && (scopeBody.nestingLevel || 0) > (body.nestingLevel || 0) && notYetDoneBodies.has(scopeBody)) {
        // TODO: If there are multiple such scopeBody's, why is it okay to pick an arbitrary one?
        body = scopeBody;
        break;
      }
    }

    return { body, commonAncestor };
  }

  _getValueDebugName(val) {
    let name;
    if (val instanceof _index2.FunctionValue) {
      name = val.getName();
    } else {
      const id = this.residualHeapValueIdentifiers.getIdentifier(val);
      (0, _invariant2.default)(id);
      name = id.name;
    }
    return name;
  }

  serializeBinding(binding) {
    let record = binding.environment;
    (0, _invariant2.default)(record instanceof _environment.DeclarativeEnvironmentRecord, "only declarative environments has bindings");

    let residualFunctionBindings = this.declarativeEnvironmentRecordsBindings.get(record);
    (0, _invariant2.default)(residualFunctionBindings, "all bindings that create abstract values must have at least one call emitted to the generator so the function environment should have been visited");
    let residualBinding = residualFunctionBindings.get(binding.name);
    (0, _invariant2.default)(residualBinding, "any referenced residual binding should have been visited");

    this._serializeDeclarativeEnvironmentRecordBinding(residualBinding);

    let location = residualBinding.serializedUnscopedLocation;
    (0, _invariant2.default)(location !== undefined);
    return location;
  }

  getPrelude(additionalFunction) {
    if (additionalFunction !== undefined) {
      let body = this.residualFunctions.additionalFunctionPreludes.get(additionalFunction);
      (0, _invariant2.default)(body !== undefined);
      return body;
    } else {
      return this.prelude;
    }
  }

  _declare(emittingToResidualFunction, referencingOnlyOptimizedFunction, bindingType, id, init) {
    if (emittingToResidualFunction) {
      let declar = t.variableDeclaration(bindingType, [t.variableDeclarator(id)]);
      this.getPrelude(referencingOnlyOptimizedFunction).push(declar);
      let assignment = t.expressionStatement(t.assignmentExpression("=", id, init));
      this.emitter.emit(assignment);
    } else {
      let declar = t.variableDeclaration(bindingType, [t.variableDeclarator(id, init)]);
      this.emitter.emit(declar);
    }
  }

  serializeValue(val, referenceOnly, bindingType) {
    (0, _invariant2.default)(!(val instanceof _index2.ObjectValue && val.refuseSerialization));
    if (val instanceof _index2.AbstractValue) {
      if (val.kind === "widened") {
        this.serializedValues.add(val);
        let name = val.intrinsicName;
        (0, _invariant2.default)(name !== undefined);
        return t.identifier(name);
      } else if (val.kind === "widened property") {
        this.serializedValues.add(val);
        return this._serializeAbstractValueHelper(val);
      }
    }

    // make sure we're not serializing a class method here
    if (val instanceof _index2.ECMAScriptSourceFunctionValue && this.residualClassMethodInstances.has(val)) {
      let classMethodInstance = this.residualClassMethodInstances.get(val);
      (0, _invariant2.default)(classMethodInstance);
      // anything other than a class constructor should never go through serializeValue()
      // so we need to log a nice error message to the user
      if (classMethodInstance.methodType !== "constructor") {
        let error = new _errors.CompilerDiagnostic("a class method incorrectly went through the serializeValue() code path", val.$ECMAScriptCode.loc, "PP0022", "FatalError");
        this.realm.handleError(error);
        throw new _errors.FatalError();
      }
    }

    if (this._serializedValueWithIdentifiers.has(val)) {
      return this.getSerializeObjectIdentifier(val);
    }

    this.serializedValues.add(val);
    if (!referenceOnly && _HeapInspector.HeapInspector.isLeaf(val)) {
      let res = this._serializeValue(val);
      (0, _invariant2.default)(res !== undefined);
      return res;
    }
    this._serializedValueWithIdentifiers.add(val);

    let target = this._getTarget(val);
    let oldBody = this.emitter.beginEmitting(val, target.body);
    let init = this._serializeValue(val);

    let id = this.residualHeapValueIdentifiers.getIdentifier(val);
    if (this._options.debugIdentifiers !== undefined && this._options.debugIdentifiers.includes(id.name)) {
      console.log(`Tracing value with identifier ${id.name} (${val.constructor.name}) targetting ${target.body.type}`);
      this._getTarget(val, true);
    }
    let result = id;
    this.residualHeapValueIdentifiers.incrementReferenceCount(val);

    if (this.residualHeapValueIdentifiers.needsIdentifier(val)) {
      if (init) {
        if (this._options.debugScopes) {
          let scopes = this.residualValues.get(val);
          (0, _invariant2.default)(scopes !== undefined);
          const scopeList = Array.from(scopes).map(s => `"${s.getName()}"`).join(",");
          let comment = `${this._getValueDebugName(val)} referenced from scopes [${scopeList}]`;
          if (target.commonAncestor !== undefined) comment = `${comment} with common ancestor: ${target.commonAncestor.getName()}`;
          if (target.description !== undefined) comment = `${comment} => ${target.description} `;
          this.emitter.emit(commentStatement(comment));
        }
        if (init !== id) {
          this._declare(!!target.usedOnlyByResidualFunctions, target.referencingOnlyOptimizedFunction, bindingType || "var", id, init);
        }
        this.getStatistics().valueIds++;
        if (target.usedOnlyByResidualFunctions) this.getStatistics().delayedValues++;
      }
    } else {
      if (init) {
        this.residualHeapValueIdentifiers.deleteIdentifier(val);
        result = init;
        this.getStatistics().valuesInlined++;
      }
    }

    this.emitter.endEmitting(val, oldBody);
    return result;
  }

  _serializeValueIntrinsic(val) {
    let intrinsicName = val.intrinsicName;
    (0, _invariant2.default)(intrinsicName);
    if (val instanceof _index2.ObjectValue && val.intrinsicNameGenerated) {
      // The intrinsic was generated at a particular point in time.
      return this.preludeGenerator.convertStringToMember(intrinsicName);
    } else {
      // The intrinsic conceptually exists ahead of time.
      (0, _invariant2.default)(this.emitter.getBody().type === "MainGenerator" || this.emitter.getBody().type === "AdditionalFunction" || this.emitter.getBody().type === "DelayInitializations");
      return this.preludeGenerator.memoizeReference(intrinsicName);
    }
  }

  _getDescriptorValues(desc) {
    if (desc.joinCondition !== undefined) return [desc.joinCondition];
    (0, _invariant2.default)(desc.value === undefined || desc.value instanceof _index2.Value);
    if (desc.value !== undefined) return [desc.value];
    (0, _invariant2.default)(desc.get !== undefined);
    (0, _invariant2.default)(desc.set !== undefined);
    return [desc.get, desc.set];
  }

  _deleteProperty(location) {
    (0, _invariant2.default)(location.type === "MemberExpression");
    this.emitter.emit(t.expressionStatement(t.unaryExpression("delete", location, true)));
  }

  _assignProperty(location, value, mightHaveBeenDeleted, deleteIfMightHaveBeenDeleted = false) {
    this.emitter.emit(this._getPropertyAssignmentStatement(location, value, mightHaveBeenDeleted, deleteIfMightHaveBeenDeleted));
  }

  _getPropertyAssignmentStatement(location, value, mightHaveBeenDeleted, deleteIfMightHaveBeenDeleted = false) {
    if (mightHaveBeenDeleted) {
      // We always need to serialize this value in order to keep the invariants happy.
      let serializedValue = this.serializeValue(value);
      let condition;
      if (value instanceof _index2.AbstractValue && value.kind === "conditional") {
        let [c, x, y] = value.args;
        if (x instanceof _index2.EmptyValue) {
          if (c instanceof _index2.AbstractValue && c.kind === "!") condition = this.serializeValue(c.args[0]);else condition = t.unaryExpression("!", this.serializeValue(c));
          serializedValue = this.serializeValue(y);
        } else if (y instanceof _index2.EmptyValue) {
          condition = this.serializeValue(c);
          serializedValue = this.serializeValue(x);
        }
      }
      if (condition === undefined) {
        condition = t.binaryExpression("!==", this.serializeValue(value), this._serializeEmptyValue());
      }
      let assignment = t.expressionStatement(t.assignmentExpression("=", location, serializedValue));
      let deletion = null;
      if (deleteIfMightHaveBeenDeleted) {
        (0, _invariant2.default)(location.type === "MemberExpression");
        deletion = t.expressionStatement(t.unaryExpression("delete", location, true));
      }
      return t.ifStatement(condition, assignment, deletion);
    } else {
      return t.expressionStatement(t.assignmentExpression("=", location, this.serializeValue(value)));
    }
  }

  _serializeArrayIndexProperties(array, indexPropertyLength, remainingProperties) {
    let elems = [];
    for (let i = 0; i < indexPropertyLength; i++) {
      let key = i + "";
      let propertyBinding = remainingProperties.get(key);
      let elem = null;
      // "propertyBinding === undefined" means array has a hole in the middle.
      if (propertyBinding !== undefined) {
        let descriptor = propertyBinding.descriptor;
        // "descriptor === undefined" means this array item has been deleted.
        if (descriptor !== undefined && descriptor.value !== undefined && this._canEmbedProperty(array, key, descriptor)) {
          let elemVal = descriptor.value;
          (0, _invariant2.default)(elemVal instanceof _index2.Value);
          let mightHaveBeenDeleted = elemVal.mightHaveBeenDeleted();
          let delayReason = this.emitter.getReasonToWaitForDependencies(elemVal) || this.emitter.getReasonToWaitForActiveValue(array, mightHaveBeenDeleted);
          if (!delayReason) {
            elem = this.serializeValue(elemVal);
            remainingProperties.delete(key);
          }
        }
      }
      elems.push(elem);
    }
    return elems;
  }

  _serializeArrayLengthIfNeeded(val, numberOfIndexProperties, remainingProperties) {
    const realm = this.realm;
    let lenProperty;
    if (val.mightBeHavocedObject()) {
      lenProperty = this.realm.evaluateWithoutLeakLogic(() => (0, _index.Get)(realm, val, "length"));
    } else {
      lenProperty = (0, _index.Get)(realm, val, "length");
    }
    // Need to serialize length property if:
    // 1. array length is abstract.
    // 2. array length is concrete, but different from number of index properties
    //  we put into initialization list.
    if (lenProperty instanceof _index2.AbstractValue || _singletons.To.ToLength(realm, lenProperty) !== numberOfIndexProperties) {
      if (!(lenProperty instanceof _index2.AbstractValue) || lenProperty.kind !== "widened property") {
        let semaphore = this._acquireOneObjectSemaphore(val);
        this.emitter.emitNowOrAfterWaitingForDependencies([val, lenProperty], () => {
          this._assignProperty(t.memberExpression(this.getSerializeObjectIdentifier(val), t.identifier("length")), lenProperty, false /*mightHaveBeenDeleted*/
          );
          if (semaphore !== undefined) semaphore.releaseOne();
        }, this.emitter.getBody());
      }
      remainingProperties.delete("length");
    }
  }

  _serializeValueArray(val) {
    let remainingProperties = new Map(val.properties);

    let [unconditionalLength, assignmentNotNeeded] = (0, _utils.getSuggestedArrayLiteralLength)(this.realm, val);
    // Use the unconditional serialized index properties as array initialization list.
    const initProperties = this._serializeArrayIndexProperties(val, unconditionalLength, remainingProperties);
    if (!assignmentNotNeeded) this._serializeArrayLengthIfNeeded(val, unconditionalLength, remainingProperties);
    this._emitObjectProperties(val, remainingProperties);
    return t.arrayExpression(initProperties);
  }

  _serializeValueMap(val) {
    let kind = val.getKind();
    let elems = [];

    let entries;
    let omitDeadEntries;

    if (kind === "Map") {
      entries = val.$MapData;
      omitDeadEntries = false;
    } else {
      (0, _invariant2.default)(kind === "WeakMap");
      entries = val.$WeakMapData;
      omitDeadEntries = true;
    }
    (0, _invariant2.default)(entries !== undefined);
    let len = entries.length;
    let mapConstructorDoesntTakeArguments = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION);

    for (let i = 0; i < len; i++) {
      let entry = entries[i];
      let key = entry.$Key;
      let value = entry.$Value;
      if (key === undefined || value === undefined || omitDeadEntries && !this.residualValues.has(key)) continue;
      let mightHaveBeenDeleted = key.mightHaveBeenDeleted();
      let delayReason = this.emitter.getReasonToWaitForDependencies(key) || this.emitter.getReasonToWaitForDependencies(value) || this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted || mapConstructorDoesntTakeArguments);
      if (delayReason) {
        this.emitter.emitAfterWaiting(delayReason, [key, value, val], () => {
          (0, _invariant2.default)(key !== undefined);
          (0, _invariant2.default)(value !== undefined);
          this.emitter.emit(t.expressionStatement(t.callExpression(t.memberExpression(this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val), t.identifier("set")), [this.serializeValue(key), this.serializeValue(value)])));
        }, this.emitter.getBody());
      } else {
        let serializedKey = this.serializeValue(key);
        let serializedValue = this.serializeValue(value);
        let elem = t.arrayExpression([serializedKey, serializedValue]);
        elems.push(elem);
      }
    }

    this._emitObjectProperties(val);
    let args = elems.length > 0 ? [t.arrayExpression(elems)] : [];
    return t.newExpression(this.preludeGenerator.memoizeReference(kind), args);
  }

  _serializeValueSet(val) {
    let kind = val.getKind();
    let elems = [];

    let entries;
    let omitDeadEntries;

    if (kind === "Set") {
      entries = val.$SetData;
      omitDeadEntries = false;
    } else {
      (0, _invariant2.default)(kind === "WeakSet");
      entries = val.$WeakSetData;
      omitDeadEntries = true;
    }

    (0, _invariant2.default)(entries !== undefined);
    let len = entries.length;
    let setConstructorDoesntTakeArguments = this.realm.isCompatibleWith(this.realm.MOBILE_JSC_VERSION);

    for (let i = 0; i < len; i++) {
      let entry = entries[i];
      if (entry === undefined || omitDeadEntries && !this.residualValues.has(entry)) continue;
      let mightHaveBeenDeleted = entry.mightHaveBeenDeleted();
      let delayReason = this.emitter.getReasonToWaitForDependencies(entry) || this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted || setConstructorDoesntTakeArguments);
      if (delayReason) {
        this.emitter.emitAfterWaiting(delayReason, [entry, val], () => {
          (0, _invariant2.default)(entry !== undefined);
          this.emitter.emit(t.expressionStatement(t.callExpression(t.memberExpression(this.residualHeapValueIdentifiers.getIdentifierAndIncrementReferenceCount(val), t.identifier("add")), [this.serializeValue(entry)])));
        }, this.emitter.getBody());
      } else {
        let elem = this.serializeValue(entry);
        elems.push(elem);
      }
    }

    this._emitObjectProperties(val);
    let args = elems.length > 0 ? [t.arrayExpression(elems)] : [];
    return t.newExpression(this.preludeGenerator.memoizeReference(kind), args);
  }

  _serializeValueTypedArrayOrDataView(val) {
    let buf = val.$ViewedArrayBuffer;
    (0, _invariant2.default)(buf !== undefined);
    let outlinedArrayBuffer = this.serializeValue(buf, true);
    this._emitObjectProperties(val);
    return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [outlinedArrayBuffer]);
  }

  _serializeValueArrayBuffer(val) {
    let elems = [];

    let len = val.$ArrayBufferByteLength;
    let db = val.$ArrayBufferData;
    (0, _invariant2.default)(len !== undefined);
    (0, _invariant2.default)(db);
    let allzero = true;
    for (let i = 0; i < len; i++) {
      if (db[i] !== 0) {
        allzero = false;
      }
      let elem = t.numericLiteral(db[i]);
      elems.push(elem);
    }

    this._emitObjectProperties(val);
    if (allzero) {
      // if they're all zero, just emit the array buffer constructor
      return t.newExpression(this.preludeGenerator.memoizeReference(val.getKind()), [t.numericLiteral(len)]);
    } else {
      // initialize from a byte array otherwise
      let arrayValue = t.arrayExpression(elems);
      let consExpr = t.newExpression(this.preludeGenerator.memoizeReference("Uint8Array"), [arrayValue]);
      // access the Uint8Array.buffer property to extract the created buffer
      return t.memberExpression(consExpr, t.identifier("buffer"));
    }
  }

  _serializeValueFunction(val) {
    if (val instanceof _index2.BoundFunctionValue) {
      this._emitObjectProperties(val);
      return t.callExpression(t.memberExpression(this.serializeValue(val.$BoundTargetFunction), t.identifier("bind")), [].concat(this.serializeValue(val.$BoundThis), val.$BoundArguments.map((boundArg, i) => this.serializeValue(boundArg))));
    }

    (0, _invariant2.default)(!(val instanceof _index2.NativeFunctionValue), "all native function values should be intrinsics");
    (0, _invariant2.default)(val instanceof _index2.ECMAScriptSourceFunctionValue);

    let instance = this.residualFunctionInstances.get(val);
    (0, _invariant2.default)(instance !== undefined);
    let residualBindings = instance.residualFunctionBindings;

    let inOptimizedFunction = this.tryGetOptimizedFunctionRoot(val);
    if (inOptimizedFunction !== undefined) instance.containingAdditionalFunction = inOptimizedFunction;
    let bindingsEmittedSemaphore = new CountingSemaphore(() => {
      (0, _invariant2.default)(instance);
      // hoist if we are in an additionalFunction
      if (inOptimizedFunction !== undefined && (0, _hoisting.canHoistFunction)(this.realm, val, undefined, new Set())) {
        instance.insertionPoint = new _types.BodyReference(this.mainBody, this.mainBody.entries.length);
        instance.containingAdditionalFunction = undefined;
      } else {
        instance.insertionPoint = this.emitter.getBodyReference();
      }
    });

    for (let [boundName, residualBinding] of residualBindings) {
      let referencedValues = [];
      let serializeBindingFunc;
      if (!residualBinding.declarativeEnvironmentRecord) {
        serializeBindingFunc = () => this._serializeGlobalBinding(boundName, residualBinding);
      } else {
        serializeBindingFunc = () => this._serializeDeclarativeEnvironmentRecordBinding(residualBinding);
        if (residualBinding.value !== undefined) referencedValues.push(residualBinding.value);
      }
      bindingsEmittedSemaphore.acquireOne();
      this.emitter.emitNowOrAfterWaitingForDependencies(referencedValues, () => {
        serializeBindingFunc();
        bindingsEmittedSemaphore.releaseOne();
      }, this.emitter.getBody());
    }
    if (val.$FunctionKind === "classConstructor") {
      let homeObject = val.$HomeObject;
      if (homeObject instanceof _index2.ObjectValue && homeObject.$IsClassPrototype) {
        this._serializeClass(val, homeObject, bindingsEmittedSemaphore);
        return;
      }
    }
    bindingsEmittedSemaphore.releaseOne();
    this._emitObjectProperties(val);
    let additionalFVEffects = this.additionalFunctionValuesAndEffects;
    let additionalEffects = additionalFVEffects && additionalFVEffects.get(val);
    if (additionalEffects) this._serializeAdditionalFunction(val, additionalEffects);
  }

  _serializeClass(classFunc, classPrototype, bindingsEmittedSemaphore) {
    let classMethodInstance = this.residualClassMethodInstances.get(classFunc);

    (0, _invariant2.default)(classMethodInstance !== undefined);

    let classProtoId;
    let hasSerializedClassProtoId = false;
    let propertiesToSerialize = new Map();

    // handle class inheritance
    if (!(classFunc.$Prototype instanceof _index2.NativeFunctionValue)) {
      classMethodInstance.classSuperNode = this.serializeValue(classFunc.$Prototype);
    }

    let serializeClassPrototypeId = () => {
      if (!hasSerializedClassProtoId) {
        let classId = this.getSerializeObjectIdentifier(classFunc);
        classProtoId = t.identifier(this.intrinsicNameGenerator.generate());
        hasSerializedClassProtoId = true;
        this.emitter.emit(t.variableDeclaration("var", [t.variableDeclarator(classProtoId, t.memberExpression(classId, t.identifier("prototype")))]));
      }
    };

    let serializeClassMethodOrProperty = (propertyNameOrSymbol, methodFuncOrProperty) => {
      const serializeNameAndId = () => {
        let methodFuncOrPropertyId = this.serializeValue(methodFuncOrProperty);
        let name;

        if (typeof propertyNameOrSymbol === "string") {
          name = t.identifier(propertyNameOrSymbol);
        } else {
          name = this.serializeValue(propertyNameOrSymbol);
        }
        return { name, methodFuncOrPropertyId };
      };

      if (methodFuncOrProperty instanceof _index2.ECMAScriptSourceFunctionValue) {
        if (methodFuncOrProperty !== classFunc) {
          // if the method does not have a $HomeObject, it's not a class method
          if (methodFuncOrProperty.$HomeObject !== undefined) {
            this.serializedValues.add(methodFuncOrProperty);
            this._serializeClassMethod(propertyNameOrSymbol, methodFuncOrProperty);
          } else {
            // if the method is not part of the class, we have to assign it to the prototype
            // we can't serialize via emitting the properties as that will emit all
            // the prototype and we only want to mutate the prototype here
            serializeClassPrototypeId();
            (0, _invariant2.default)(classProtoId !== undefined);
            let { name, methodFuncOrPropertyId } = serializeNameAndId();
            this.emitter.emit(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(classProtoId, name), methodFuncOrPropertyId)));
          }
        }
      } else {
        let prototypeId = t.memberExpression(this.getSerializeObjectIdentifier(classFunc), t.identifier("prototype"));
        let { name, methodFuncOrPropertyId } = serializeNameAndId();
        this.emitter.emit(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(prototypeId, name), methodFuncOrPropertyId)));
      }
    };

    let serializeClassProperty = (propertyNameOrSymbol, propertyValue) => {
      // we handle the prototype via class syntax
      if (propertyNameOrSymbol === "prototype") {
        this.serializedValues.add(propertyValue);
      } else if (propertyValue instanceof _index2.ECMAScriptSourceFunctionValue && propertyValue.$HomeObject === classFunc) {
        serializeClassMethodOrProperty(propertyNameOrSymbol, propertyValue);
      } else {
        let prop = classFunc.properties.get(propertyNameOrSymbol);
        (0, _invariant2.default)(prop);
        propertiesToSerialize.set(propertyNameOrSymbol, prop);
      }
    };

    // find the all the properties on the class that we need to serialize
    for (let [propertyName, method] of classFunc.properties) {
      if (!this.residualHeapInspector.canIgnoreProperty(classFunc, propertyName) && !_utils.ClassPropertiesToIgnore.has(propertyName) && method.descriptor !== undefined && !(propertyName === "length" && (0, _utils.canIgnoreClassLengthProperty)(classFunc, method.descriptor, this.logger))) {
        (0, _utils.withDescriptorValue)(propertyName, method.descriptor, serializeClassProperty);
      }
    }
    // pass in the properties and set it so we don't serialize the prototype
    bindingsEmittedSemaphore.releaseOne();
    this._emitObjectProperties(classFunc, propertiesToSerialize, undefined, undefined, true);

    // handle non-symbol properties
    for (let [propertyName, method] of classPrototype.properties) {
      (0, _utils.withDescriptorValue)(propertyName, method.descriptor, serializeClassMethodOrProperty);
    }
    // handle symbol properties
    for (let [symbol, method] of classPrototype.symbols) {
      (0, _utils.withDescriptorValue)(symbol, method.descriptor, serializeClassMethodOrProperty);
    }
    // assign the AST method key node for the "constructor"
    classMethodInstance.classMethodKeyNode = t.identifier("constructor");
  }

  _serializeClassMethod(key, methodFunc) {
    let classMethodInstance = this.residualClassMethodInstances.get(methodFunc);

    (0, _invariant2.default)(classMethodInstance !== undefined);
    if (typeof key === "string") {
      classMethodInstance.classMethodKeyNode = t.identifier(key);
      // as we know the method name is a string again, we can remove the computed status
      classMethodInstance.classMethodComputed = false;
    } else if (key instanceof _index2.SymbolValue) {
      classMethodInstance.classMethodKeyNode = this.serializeValue(key);
    } else {
      (0, _invariant2.default)(false, "Unknown method key type");
    }
    this._serializeValueFunction(methodFunc);
  }

  // Checks whether a property can be defined via simple assignment, or using object literal syntax.
  _canEmbedProperty(obj, key, prop) {
    if (prop.joinCondition !== undefined) return false;

    let targetDescriptor = this.residualHeapInspector.getTargetIntegrityDescriptor(obj);

    if (obj instanceof _index2.FunctionValue && key === "prototype" || obj.getKind() === "RegExp" && key === "lastIndex") return prop.writable === targetDescriptor.writable && !prop.configurable && !prop.enumerable && !prop.set && !prop.get;else if (prop.writable === targetDescriptor.writable && prop.configurable === targetDescriptor.configurable && !!prop.enumerable && !prop.set && !prop.get) {
      return !(prop.value instanceof _index2.AbstractValue && prop.value.kind === "widened property");
    } else {
      return false;
    }
  }

  _findLastObjectPrototype(obj) {
    while (obj.$Prototype instanceof _index2.ObjectValue) obj = obj.$Prototype;
    return obj;
  }

  _serializeValueRegExpObject(val) {
    let source = val.$OriginalSource;
    let flags = val.$OriginalFlags;
    (0, _invariant2.default)(typeof source === "string");
    (0, _invariant2.default)(typeof flags === "string");
    this._emitObjectProperties(val);
    source = new RegExp(source).source; // add escapes as per 21.2.3.2.4
    return t.regExpLiteral(source, flags);
  }

  // Overridable.
  serializeValueRawObject(val, skipPrototype, emitIntegrityCommand) {
    let remainingProperties = new Map(val.properties);
    const dummyProperties = new Set();
    let props = [];
    if (val.temporalAlias !== undefined) {
      return t.objectExpression(props);
    } else {
      for (let [key, propertyBinding] of val.properties) {
        if (propertyBinding.pathNode !== undefined) continue; // written to inside loop
        let descriptor = propertyBinding.descriptor;
        if (descriptor === undefined || descriptor.value === undefined) continue; // deleted
        let serializedKey = (0, _babelhelpers.getAsPropertyNameExpression)(key);
        if (this._canEmbedProperty(val, key, descriptor)) {
          let propValue = descriptor.value;
          (0, _invariant2.default)(propValue instanceof _index2.Value);
          if (this.residualHeapInspector.canIgnoreProperty(val, key)) continue;
          let mightHaveBeenDeleted = propValue.mightHaveBeenDeleted();
          let delayReason = this.emitter.getReasonToWaitForDependencies(propValue) || this.emitter.getReasonToWaitForActiveValue(val, mightHaveBeenDeleted);
          // Although the property needs to be delayed, we still want to emit dummy "undefined"
          // value as part of the object literal to ensure a consistent property ordering.
          let serializedValue = _babelhelpers.voidExpression;
          if (delayReason) {
            // May need to be cleaned up later.
            dummyProperties.add(key);
          } else {
            remainingProperties.delete(key);
            serializedValue = this.serializeValue(propValue);
          }
          props.push(t.objectProperty(serializedKey, serializedValue));
        } else if (descriptor.value instanceof _index2.Value && descriptor.value.mightHaveBeenDeleted()) {
          dummyProperties.add(key);
          props.push(t.objectProperty(serializedKey, _babelhelpers.voidExpression));
        }
      }
    }
    this._emitObjectProperties(val, remainingProperties,
    /*objectPrototypeAlreadyEstablished*/false, dummyProperties, skipPrototype);
    return t.objectExpression(props);
  }

  _serializeValueObjectViaConstructor(val, skipPrototype, classConstructor) {
    let proto = val.$Prototype;
    this._emitObjectProperties(val, val.properties,
    /*objectPrototypeAlreadyEstablished*/true, undefined, skipPrototype);
    let serializedProto = this.serializeValue(classConstructor ? classConstructor : proto);
    if (val.temporalAlias === undefined) {
      this.needsAuxiliaryConstructor = true;
      return t.sequenceExpression([t.assignmentExpression("=", t.memberExpression(_babelhelpers.constructorExpression, t.identifier("prototype")), classConstructor ? t.memberExpression(serializedProto, t.identifier("prototype")) : serializedProto), t.newExpression(_babelhelpers.constructorExpression, [])]);
    } else {
      this.emitter.emitAfterWaiting(val.temporalAlias, [], () => {
        (0, _invariant2.default)(val.temporalAlias !== undefined);
        let uid = this.serializeValue(val.temporalAlias);
        this.emitter.emit(t.expressionStatement(t.callExpression(this.preludeGenerator.memoizeReference("Object.setPrototypeOf"), [uid, serializedProto])));
      }, this.emitter.getBody());
      return t.objectExpression([]);
    }
  }

  serializeValueObject(val, emitIntegrityCommand) {
    // If this object is a prototype object that was implicitly created by the runtime
    // for a constructor, then we can obtain a reference to this object
    // in a special way that's handled alongside function serialization.
    let constructor = val.originalConstructor;
    if (constructor !== undefined) {
      let prototypeId = this.residualHeapValueIdentifiers.getIdentifier(val);
      this.emitter.emitNowOrAfterWaitingForDependencies([constructor], () => {
        (0, _invariant2.default)(constructor !== undefined);
        (0, _invariant2.default)(prototypeId !== undefined);
        this.serializeValue(constructor);
        this._emitObjectProperties(val);
        (0, _invariant2.default)(prototypeId.type === "Identifier");
        this.residualFunctions.setFunctionPrototype(constructor, prototypeId);
      }, this.emitter.getBody());
      return prototypeId;
    }

    let kind = val.getKind();
    switch (kind) {
      case "RegExp":
        return this._serializeValueRegExpObject(val);
      case "Number":
        let numberData = val.$NumberData;
        (0, _invariant2.default)(numberData !== undefined);
        numberData.throwIfNotConcreteNumber();
        (0, _invariant2.default)(numberData instanceof _index2.NumberValue, "expected number data internal slot to be a number value");
        this._emitObjectProperties(val);
        return t.newExpression(this.preludeGenerator.memoizeReference("Number"), [t.numericLiteral(numberData.value)]);
      case "String":
        let stringData = val.$StringData;
        (0, _invariant2.default)(stringData !== undefined);
        stringData.throwIfNotConcreteString();
        (0, _invariant2.default)(stringData instanceof _index2.StringValue, "expected string data internal slot to be a string value");
        this._emitObjectProperties(val);
        return t.newExpression(this.preludeGenerator.memoizeReference("String"), [t.stringLiteral(stringData.value)]);
      case "Boolean":
        let booleanData = val.$BooleanData;
        (0, _invariant2.default)(booleanData !== undefined);
        booleanData.throwIfNotConcreteBoolean();
        (0, _invariant2.default)(booleanData instanceof _index2.BooleanValue, "expected boolean data internal slot to be a boolean value");
        this._emitObjectProperties(val);
        return t.newExpression(this.preludeGenerator.memoizeReference("Boolean"), [t.booleanLiteral(booleanData.value)]);
      case "Date":
        let dateValue = val.$DateValue;
        (0, _invariant2.default)(dateValue !== undefined);
        let serializedDateValue = this.serializeValue(dateValue);
        this._emitObjectProperties(val);
        return t.newExpression(this.preludeGenerator.memoizeReference("Date"), [serializedDateValue]);
      case "Float32Array":
      case "Float64Array":
      case "Int8Array":
      case "Int16Array":
      case "Int32Array":
      case "Uint8Array":
      case "Uint16Array":
      case "Uint32Array":
      case "Uint8ClampedArray":
      case "DataView":
        return this._serializeValueTypedArrayOrDataView(val);
      case "ArrayBuffer":
        return this._serializeValueArrayBuffer(val);
      case "ReactElement":
        this.residualReactElementSerializer.serializeReactElement(val);
        return;
      case "Map":
      case "WeakMap":
        return this._serializeValueMap(val);
      case "Set":
      case "WeakSet":
        return this._serializeValueSet(val);
      default:
        (0, _invariant2.default)(kind === "Object", "invariant established by visitor");

        let proto = val.$Prototype;
        let { skipPrototype, constructor: _constructor } = (0, _utils.getObjectPrototypeMetadata)(this.realm, val);
        let createViaAuxiliaryConstructor = val.temporalAlias === undefined && proto !== this.realm.intrinsics.ObjectPrototype && this._findLastObjectPrototype(val) === this.realm.intrinsics.ObjectPrototype && proto instanceof _index2.ObjectValue && !skipPrototype;

        return createViaAuxiliaryConstructor || _constructor ? this._serializeValueObjectViaConstructor(val, skipPrototype, _constructor) : this.serializeValueRawObject(val, skipPrototype, emitIntegrityCommand);
    }
  }

  _serializeValueSymbol(val) {
    let args = [];
    if (val.$Description instanceof _index2.Value) {
      let serializedArg = this.serializeValue(val.$Description);
      (0, _invariant2.default)(serializedArg);
      args.push(serializedArg);
    }
    // check if symbol value exists in the global symbol map, in that case we emit an invocation of System.for
    // to look it up
    let globalReg = this.realm.globalSymbolRegistry.find(e => e.$Symbol === val) !== undefined;
    if (globalReg) {
      return t.callExpression(this.preludeGenerator.memoizeReference("Symbol.for"), args);
    } else {
      return t.callExpression(this.preludeGenerator.memoizeReference("Symbol"), args);
    }
  }

  _serializeValueProxy(val) {
    return t.newExpression(this.preludeGenerator.memoizeReference("Proxy"), [this.serializeValue(val.$ProxyTarget), this.serializeValue(val.$ProxyHandler)]);
  }

  _serializeAbstractValueHelper(val) {
    let serializedArgs = val.args.map((abstractArg, i) => this.serializeValue(abstractArg));
    if (val.kind === "abstractConcreteUnion") {
      let abstractIndex = val.args.findIndex(v => v instanceof _index2.AbstractValue);
      (0, _invariant2.default)(abstractIndex >= 0 && abstractIndex < val.args.length);
      return serializedArgs[abstractIndex];
    }
    if (val.kind === "explicit conversion to object") {
      let ob = serializedArgs[0];
      (0, _invariant2.default)(ob !== undefined);
      return t.callExpression(this.preludeGenerator.memoizeReference("Object.assign"), [ob]);
    } else if (val.kind === "template for prototype member expression") {
      let obj = this.serializeValue(val.args[0]);
      let prop = this.serializeValue(val.args[1]);
      return t.memberExpression(obj, prop, true);
    }
    let serializedValue = val.buildNode(serializedArgs);
    if (serializedValue.type === "Identifier") {
      let id = serializedValue;
      (0, _invariant2.default)(!this.realm.derivedIds.has(id.name) || this.emitter.cannotDeclare() || this.emitter.hasBeenDeclared(val) || this.emitter.emittingToAdditionalFunction() && this.referencedDeclaredValues.get(val) === undefined, `an abstract value with an identifier "${id.name}" was referenced before being declared`);
    }
    return serializedValue;
  }

  _serializeAbstractValue(val) {
    (0, _invariant2.default)(val.kind !== "sentinel member expression", "invariant established by visitor");
    if (val.kind === "conditional") {
      let cf = this.conditionalFeasibility.get(val);
      (0, _invariant2.default)(cf !== undefined);
      if (cf.t && !cf.f) return this.serializeValue(val.args[1]);else if (!cf.t && cf.f) return this.serializeValue(val.args[2]);else (0, _invariant2.default)(cf.t && cf.f);
    }
    if (val.hasIdentifier()) {
      return this._serializeAbstractValueHelper(val);
    } else {
      // This abstract value's dependencies should all be declared
      // but still need to check them again in case their serialized bodies are in different generator scope.
      let reason = this.emitter.getReasonToWaitForDependencies(val.args);
      if (reason === undefined) {
        return this._serializeAbstractValueHelper(val);
      } else {
        this.emitter.emitAfterWaiting(reason, val.args, () => {
          const serializedValue = this._serializeAbstractValueHelper(val);
          let uid = this.getSerializeObjectIdentifier(val);
          this._declare(this.emitter.cannotDeclare(), undefined, "var", uid, serializedValue);
        }, this.emitter.getBody());
      }
    }
  }

  _serializeEmptyValue() {
    this.needsEmptyVar = true;
    return _babelhelpers.emptyExpression;
  }

  _serializeValue(val) {
    if (val instanceof _index2.AbstractValue) {
      return this._serializeAbstractValue(val);
    } else if (val.isIntrinsic()) {
      return this._serializeValueIntrinsic(val);
    } else if (val instanceof _index2.EmptyValue) {
      return this._serializeEmptyValue();
    } else if (val instanceof _index2.UndefinedValue) {
      return _babelhelpers.voidExpression;
    } else if (_HeapInspector.HeapInspector.isLeaf(val)) {
      return t.valueToNode(val.serialize());
    } else if (val instanceof _index2.ObjectValue) {
      return this._serializeValueObjectBase(val);
    } else {
      (0, _invariant2.default)(val instanceof _index2.SymbolValue);
      return this._serializeValueSymbol(val);
    }
  }

  _serializeValueObjectBase(obj) {
    if (obj instanceof _index2.ProxyValue) {
      return this._serializeValueProxy(obj);
    }

    let objectSemaphore;
    let targetCommand = this.residualHeapInspector.getTargetIntegrityCommand(obj);
    let emitIntegrityCommand;
    if (targetCommand) {
      let body = this.emitter.getBody();
      objectSemaphore = new CountingSemaphore(() => {
        this.emitter.emitNowOrAfterWaitingForDependencies([obj], () => {
          let uid = this.getSerializeObjectIdentifier(obj);
          this.emitter.emit(t.expressionStatement(t.callExpression(this.preludeGenerator.memoizeReference("Object." + targetCommand), [uid])));
        }, body);
      });
      this._objectSemaphores.set(obj, objectSemaphore);
      emitIntegrityCommand = alternateBody => {
        if (objectSemaphore !== undefined) {
          if (alternateBody !== undefined) body = alternateBody;
          objectSemaphore.releaseOne();
          this._objectSemaphores.delete(obj);
        }
        objectSemaphore = undefined;
      };
    }
    let res;
    if ((0, _index.IsArray)(this.realm, obj)) {
      res = this._serializeValueArray(obj);
    } else if (obj instanceof _index2.FunctionValue) {
      res = this._serializeValueFunction(obj);
    } else {
      res = this.serializeValueObject(obj, emitIntegrityCommand);
    }
    if (emitIntegrityCommand !== undefined) emitIntegrityCommand();
    return res;
  }

  _serializeGlobalBinding(boundName, binding) {
    (0, _invariant2.default)(!binding.declarativeEnvironmentRecord);
    if (!binding.serializedValue) {
      binding.referentialized = true;
      if (boundName === "undefined") {
        binding.serializedValue = _babelhelpers.voidExpression;
      } else if (binding.value !== undefined) {
        binding.serializedValue = t.identifier(boundName);
        (0, _invariant2.default)(binding.value !== undefined);
        this.declaredGlobalLets.set(boundName, binding.value);
      }
    }
  }

  _annotateGeneratorStatements(generator, statements) {
    let comment = `generator "${generator.getName()}"`;
    let parent = this.generatorDAG.getParent(generator);
    if (parent instanceof _generator.Generator) {
      comment = `${comment} with parent "${parent.getName()}"`;
    } else if (parent instanceof _index2.FunctionValue) {
      comment = `${comment} with function parent`;
    } else {
      (0, _invariant2.default)(parent === "GLOBAL");
      comment = `${comment} with global parent`;
    }
    let beginComments = [commentStatement("begin " + comment)];
    let effects = generator.effectsToApply;
    if (effects) {
      let valueToString = value => this.residualHeapValueIdentifiers.hasIdentifier(value) ? this.residualHeapValueIdentifiers.getIdentifier(value).name : "?";
      let keyToString = key => typeof key === "string" ? key : key instanceof _index2.Value ? valueToString(key) : "?";

      beginComments.push(commentStatement(`  has effects: ${effects.createdObjects.size} created objects, ${effects.modifiedBindings.size} modified bindings, ${effects.modifiedProperties.size} modified properties`));
      if (effects.createdObjects.size > 0) beginComments.push(commentStatement(`    created objects: ${Array.from(effects.createdObjects).map(valueToString).join(", ")}`));
      if (effects.modifiedBindings.size > 0) beginComments.push(commentStatement(`    modified bindings: ${Array.from(effects.modifiedBindings.keys()).map(b => b.name).join(", ")}`));
      if (effects.modifiedProperties.size > 0) beginComments.push(commentStatement(`    modified properties: ${Array.from(effects.modifiedProperties.keys()).map(b => `${valueToString(b.object)}.${keyToString(b.key)}`).join(", ")}`));
    }
    statements.unshift(...beginComments);
    statements.push(commentStatement("end " + comment));
  }

  _withGeneratorScope(type, generator, valuesToProcess, callback, isChildOverride) {
    let newBody = { type, parentBody: undefined, entries: [], done: false };
    let isChild = isChildOverride || type === "Generator";
    let oldBody = this.emitter.beginEmitting(generator, newBody, /*isChild*/isChild);
    (0, _invariant2.default)(!this.activeGeneratorBodies.has(generator));
    this.activeGeneratorBodies.set(generator, newBody);
    callback(newBody);
    (0, _invariant2.default)(this.activeGeneratorBodies.has(generator));
    this.activeGeneratorBodies.delete(generator);
    const statements = this.emitter.endEmitting(generator, oldBody, valuesToProcess, /*isChild*/isChild).entries;
    if (this._options.debugScopes) this._annotateGeneratorStatements(generator, statements);
    this.getStatistics().generators++;
    return statements;
  }

  _getContext() {
    // TODO #482: Values serialized by nested generators would currently only get defined
    // along the code of the nested generator; their definitions need to get hoisted
    // or repeated so that they are accessible and defined from all using scopes
    let context = {
      serializeValue: this.serializeValue.bind(this),
      serializeBinding: this.serializeBinding.bind(this),
      serializeGenerator: (generator, valuesToProcess) => this._withGeneratorScope("Generator", generator, valuesToProcess, () => generator.serialize(context)),
      initGenerator: generator => {
        let activeGeneratorBody = this._getActiveBodyOfGenerator(generator);
        (0, _invariant2.default)(activeGeneratorBody === this.emitter.getBody(), "generator to init must be current emitter body");
        let s = this.additionalGeneratorRoots.get(generator);
        if (s !== undefined) for (let value of s) this.serializeValue(value);
      },
      finalizeGenerator: generator => {
        let activeGeneratorBody = this._getActiveBodyOfGenerator(generator);
        (0, _invariant2.default)(activeGeneratorBody === this.emitter.getBody(), "generator to finalize must be current emitter body");
        this.emitter.finalizeCurrentBody();
      },
      emit: statement => {
        this.emitter.emit(statement);
      },
      processValues: valuesToProcess => {
        this.emitter.processValues(valuesToProcess);
      },
      getPropertyAssignmentStatement: this._getPropertyAssignmentStatement.bind(this),
      emitDefinePropertyBody: this.emitDefinePropertyBody.bind(this, false, undefined),
      canOmit: value => {
        let canOmit = !this.referencedDeclaredValues.has(value) && !this.residualValues.has(value);
        if (!canOmit) {
          return false;
        }
        if (value instanceof _index2.ObjectValue && value.temporalAlias !== undefined) {
          let temporalAlias = value.temporalAlias;
          return !this.referencedDeclaredValues.has(temporalAlias) && !this.residualValues.has(temporalAlias);
        }
        return canOmit;
      },
      declare: value => {
        this.emitter.declare(value);
      },
      emitPropertyModification: propertyBinding => {
        let desc = propertyBinding.descriptor;
        let object = propertyBinding.object;
        (0, _invariant2.default)(object instanceof _index2.ObjectValue);
        if (this.residualValues.has(object)) {
          let key = propertyBinding.key;
          (0, _invariant2.default)(key !== undefined, "established by visitor");
          let dependencies = [];
          if (desc !== undefined) dependencies.push(...this._getDescriptorValues(desc));
          dependencies.push(object);
          if (key instanceof _index2.Value) dependencies.push(key);
          this.emitter.emitNowOrAfterWaitingForDependencies(dependencies, () => {
            // separate serialize object, as _emitProperty assumes that this already happened
            this.serializeValue(object);
            this._emitProperty(object, key, desc, true);
          }, this.emitter.getBody());
        }
      },
      options: this._options
    };
    return context;
  }

  _shouldBeWrapped(body) {
    for (let i = 0; i < body.length; i++) {
      let item = body[i];
      if (item.type === "ExpressionStatement") {
        continue;
      } else if (item.type === "VariableDeclaration" || item.type === "FunctionDeclaration") {
        return true;
      } else if (item.type === "BlockStatement") {
        if (this._shouldBeWrapped(item.body)) {
          return true;
        }
      } else if (item.type === "IfStatement") {
        if (item.alternate) {
          if (this._shouldBeWrapped(item.alternate.body)) {
            return true;
          }
        }
        if (item.consequent) {
          if (this._shouldBeWrapped(item.consequent.body)) {
            return true;
          }
        }
      }
    }
    return false;
  }

  _serializeAdditionalFunctionGeneratorAndEffects(generator, functionValue, additionalEffects) {
    let inAdditionalFunction = this.tryGetOptimizedFunctionRoot(functionValue);
    return this._withGeneratorScope("AdditionalFunction", generator,
    /*valuesToProcess*/undefined, newBody => {
      let effectsGenerator = additionalEffects.generator;
      (0, _invariant2.default)(effectsGenerator === generator);
      effectsGenerator.serialize(this._getContext());
      this.realm.withEffectsAppliedInGlobalEnv(() => {
        const lazyHoistedReactNodes = this.residualReactElementSerializer.serializeLazyHoistedNodes();
        this.mainBody.entries.push(...lazyHoistedReactNodes);
        return null;
      }, additionalEffects.effects);
    }, !!inAdditionalFunction);
  }

  // result -- serialize it, a return statement will be generated later, must be a Value
  // Generator -- visit all entries
  // Bindings -- only need to serialize bindings if they're captured by some nested function?
  //          -- need to apply them and maybe need to revisit functions in ancestors to make sure
  //          -- we don't overwrite anything they capture
  // PropertyBindings -- visit any property bindings that aren't to createdobjects
  // CreatedObjects -- should take care of itself
  _serializeAdditionalFunction(additionalFunctionValue, additionalEffects) {
    let { effects, transforms, generator, additionalRoots } = additionalEffects;
    // No function info means the function is dead code, also break recursive cycles where we've already started
    // serializing this value
    if (!this.additionalFunctionValueInfos.has(additionalFunctionValue) || this.rewrittenAdditionalFunctions.has(additionalFunctionValue)) {
      return;
    }
    this.rewrittenAdditionalFunctions.set(additionalFunctionValue, []);

    // visit all additional roots before going into the additional functions;
    // this ensures that those potentially stateful additional roots will get
    // initially serialized with the right initial effects applied.
    for (let additionalRoot of additionalRoots) this.serializeValue(additionalRoot);

    let createdObjects = effects.createdObjects;
    let nestedFunctions = new Set([...createdObjects].filter(object => object instanceof _index2.FunctionValue));
    // Allows us to emit function declarations etc. inside of this additional
    // function instead of adding them at global scope
    // TODO: make sure this generator isn't getting mutated oddly
    nestedFunctions.forEach(val => this.additionalFunctionValueNestedFunctions.add(val));
    let body = this._serializeAdditionalFunctionGeneratorAndEffects(generator, additionalFunctionValue, additionalEffects);
    (0, _invariant2.default)(additionalFunctionValue instanceof _index2.ECMAScriptSourceFunctionValue);
    for (let transform of transforms) {
      transform(body);
    }
    this.rewrittenAdditionalFunctions.set(additionalFunctionValue, body);
  }

  prepareAdditionalFunctionValues() {
    let additionalFVEffects = this.additionalFunctionValuesAndEffects;
    if (additionalFVEffects) for (let [additionalFunctionValue, { generator }] of additionalFVEffects.entries()) {
      (0, _invariant2.default)(!this.additionalFunctionGenerators.has(additionalFunctionValue));
      this.additionalFunctionGenerators.set(additionalFunctionValue, generator);
    }
  }

  // Hook point for any serialization needs to be done after generator serialization is complete.
  postGeneratorSerialization() {
    // For overriding only.
  }

  serialize() {
    this.prepareAdditionalFunctionValues();

    this.generator.serialize(this._getContext());
    this.getStatistics().generators++;
    (0, _invariant2.default)(this.emitter.declaredCount() <= this.realm.derivedIds.size);

    // TODO #20: add timers

    // TODO #21: add event listeners

    for (let [moduleId, moduleValue] of this.modules.initializedModules) this.requireReturns.set(moduleId, (0, _ResidualFunctionInstantiator.getReplacement)(this.serializeValue(moduleValue), moduleValue));

    for (let [name, value] of this.declaredGlobalLets) {
      this.emitter.emit(t.expressionStatement(t.assignmentExpression("=", t.identifier(name), this.serializeValue(value))));
    }

    this.postGeneratorSerialization();

    Array.prototype.push.apply(this.prelude, this.preludeGenerator.prelude);

    this.emitter.finalize();

    this.residualFunctions.residualFunctionInitializers.factorifyInitializers(this.factoryNameGenerator);
    let { unstrictFunctionBodies, strictFunctionBodies } = this.residualFunctions.spliceFunctions(this.rewrittenAdditionalFunctions);

    // add strict modes
    let strictDirective = t.directive(t.directiveLiteral("use strict"));
    let globalDirectives = [];
    if (!this.realm.isStrict && !unstrictFunctionBodies.length && strictFunctionBodies.length) {
      // no unstrict functions, only strict ones
      globalDirectives.push(strictDirective);
    } else if (unstrictFunctionBodies.length && strictFunctionBodies.length) {
      // strict and unstrict functions
      funcLoop: for (let node of strictFunctionBodies) {
        if (t.isFunctionExpression(node)) {
          let func = node;
          if (func.body.directives) {
            for (let directive of func.body.directives) {
              if (directive.value.value === "use strict") {
                // already have a use strict directive
                continue funcLoop;
              }
            }
          } else func.body.directives = [];

          func.body.directives.unshift(strictDirective);
        }
      }
    }

    // build ast
    if (this.needsEmptyVar) {
      this.prelude.push(t.variableDeclaration("var", [t.variableDeclarator(_babelhelpers.emptyExpression, t.objectExpression([]))]));
    }
    if (this.needsAuxiliaryConstructor) {
      this.prelude.push(t.variableDeclaration("var", [t.variableDeclarator(_babelhelpers.constructorExpression, t.functionExpression(null, [], t.blockStatement([])))]));
    }

    let body = this.prelude.concat(this.emitter.getBody().entries);
    (0, _factorify.factorifyObjects)(body, this.factoryNameGenerator);

    let ast_body = [];
    if (this.preludeGenerator.declaredGlobals.size > 0) ast_body.push(t.variableDeclaration("var", Array.from(this.preludeGenerator.declaredGlobals).map(key => t.variableDeclarator(t.identifier(key)))));
    if (this.declaredGlobalLets.size > 0) ast_body.push(t.variableDeclaration("let", Array.from(this.declaredGlobalLets.keys()).map(key => t.variableDeclarator(t.identifier(key)))));
    if (body.length) {
      if (this.realm.isCompatibleWith("node-source-maps")) {
        ast_body.push(t.expressionStatement(t.callExpression(t.memberExpression(t.callExpression(t.identifier("require"), [t.stringLiteral("source-map-support")]), t.identifier("install")), [])));
      }

      if (this._shouldBeWrapped(body)) {
        let globalExpression = this.realm.isCompatibleWith("node-cli") ? t.identifier("global") : t.thisExpression();

        let functionExpression = t.functionExpression(null, [], t.blockStatement(body, globalDirectives));
        let callExpression = this.preludeGenerator.usesThis ? t.callExpression(t.memberExpression(functionExpression, t.identifier("call")), [globalExpression]) : t.callExpression(functionExpression, []);
        ast_body.push(t.expressionStatement(callExpression));
      } else {
        Array.prototype.push.apply(ast_body, body);
      }
    }

    // Make sure that the visitor visited exactly the same values as the serializer
    if (this.serializedValues.size !== this.residualValues.size || !Array.from(this.serializedValues).every(val => this.residualValues.has(val))) {
      this._logSerializedResidualMismatches();
      (0, _invariant2.default)(false, "serialized " + this.serializedValues.size + " of " + this.residualValues.size);
    }

    // TODO: find better way to do this?
    // revert changes to functionInstances in case we do multiple serialization passes
    for (let instance of this.residualFunctionInstances.values()) {
      this.referentializer.cleanInstance(instance);
    }

    let program_directives = [];
    if (this.realm.isStrict) program_directives.push(strictDirective);
    return t.file(t.program(ast_body, program_directives));
  }

  _logScopes(scopes) {
    console.log(`  referenced by ${scopes.size} scopes`);
    for (let s of scopes) if (s instanceof _generator.Generator) {
      let text = "";
      for (; s instanceof _generator.Generator; s = this.generatorDAG.getParent(s)) text += "=>" + s.getName();
      console.log(`      ${text}`);
    } else {
      (0, _invariant2.default)(s instanceof _index2.FunctionValue);
      console.log(`      ${s.__originalName || JSON.stringify(s.expressionLocation) || s.constructor.name}`);
    }
  }

  _logSerializedResidualMismatches() {
    let logValue = value => {
      console.log((0, _utils2.describeValue)(value));
      let scopes = this.residualValues.get(value);
      if (scopes !== undefined) this._logScopes(scopes);
    };
    console.log("=== serialized but not visited values");
    for (let value of this.serializedValues) if (!this.residualValues.has(value)) logValue(value);
    console.log("=== visited but not serialized values");
    for (let value of this.residualValues.keys()) if (!this.serializedValues.has(value)) logValue(value);
  }
}
exports.ResidualHeapSerializer = ResidualHeapSerializer;
//# sourceMappingURL=ResidualHeapSerializer.js.map