{"version":3,"sources":["../../src/serializer/GeneratorDAG.js"],"names":["GeneratorDAG","constructor","parents","Map","createdObjects","getParent","generator","a","get","undefined","length","isParent","parent","includes","getCreator","value","add","_add","set","push","effects","effectsToApply","createdObject","isValidPreviousCreator","previousCreator","dependency","getDependencies"],"mappings":";;;;;;;AAWA;;;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,YAAN,CAAmB;;AAIxBC,gBAAc;AACZ,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKC,cAAL,GAAsB,IAAID,GAAJ,EAAtB;AACD;;AAED;AACAE,YAAUC,SAAV,EAAsE;AACpE,QAAIC,IAAI,KAAKL,OAAL,CAAaM,GAAb,CAAiBF,SAAjB,CAAR;AACA,6BAAUC,MAAME,SAAN,IAAmBF,EAAEG,MAAF,IAAY,CAAzC;AACA,WAAOH,EAAE,CAAF,CAAP;AACD;;AAEDI,WAASC,MAAT,EAAuDN,SAAvD,EAAsF;AACpF,QAAIC,IAAI,KAAKL,OAAL,CAAaM,GAAb,CAAiBF,SAAjB,CAAR;AACA,WAAOC,MAAME,SAAN,IAAmBF,EAAEM,QAAF,CAAWD,MAAX,CAA1B;AACD;;AAEDE,aAAWC,KAAX,EAAiD;AAC/C,WAAO,KAAKX,cAAL,CAAoBI,GAApB,CAAwBO,KAAxB,CAAP;AACD;;AAEDC,MAAIJ,MAAJ,EAAsCN,SAAtC,EAAkE;AAChE,SAAKW,IAAL,CAAUL,MAAV,EAAkBN,SAAlB;AACD;;AAEDW,OAAKL,MAAL,EAAmDN,SAAnD,EAA+E;AAC7E,QAAIC,IAAI,KAAKL,OAAL,CAAaM,GAAb,CAAiBF,SAAjB,CAAR;AACA,QAAIC,MAAME,SAAV,EAAqB,KAAKP,OAAL,CAAagB,GAAb,CAAiBZ,SAAjB,EAA6BC,IAAI,EAAjC;AACrB,QAAI,CAACA,EAAEM,QAAF,CAAWD,MAAX,CAAL,EAAyBL,EAAEY,IAAF,CAAOP,MAAP;AACzB,QAAIQ,UAAUd,UAAUe,cAAxB;AACA,QAAID,YAAYX,SAAhB,EACE,KAAK,IAAIa,aAAT,IAA0BF,QAAQhB,cAAlC,EAAkD;AAChD,UAAImB,yBAAyBC,mBAAmB;AAC9C;AACA,YAAIA,oBAAoBf,SAAxB,EAAmC,OAAO,IAAP;;AAEnC;AACA,YAAIe,oBAAoBZ,MAAxB,EAAgC,OAAO,IAAP;;AAEhC;AACA,YAAIY,oBAAoBlB,SAAxB,EAAmC,OAAO,IAAP;;AAEnC;AACA;AACA,eAAO,IAAP,CAZ8C,CAYjC;AACd,OAbD;;AAeA,+BAAUiB,uBAAuB,KAAKnB,cAAL,CAAoBI,GAApB,CAAwBc,aAAxB,CAAvB,CAAV;;AAEA;AACA,WAAKlB,cAAL,CAAoBc,GAApB,CAAwBI,aAAxB,EAAuChB,SAAvC;AACD;;AAEH,SAAK,IAAImB,UAAT,IAAuBnB,UAAUoB,eAAV,EAAvB,EAAoD,KAAKT,IAAL,CAAUX,SAAV,EAAqBmB,UAArB;AACrD;AA1DuB;QAAbzB,Y,GAAAA,Y,EArBb;;;;;;;;;AASA","file":"GeneratorDAG.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport invariant from \"../invariant.js\";\nimport { FunctionValue, ObjectValue } from \"../values/index.js\";\nimport { Generator } from \"../utils/generator.js\";\n\n// This class maintains a DAG containing all generators known so far,\n// and information about the most specific generator that created any\n// particular object.\n// New sub-DAGs are added in chunks, at the beginning for the global generator,\n// and every time the visitor handles another additional function.\n// NOTE: The serializer can only properly handle Generator trees, not actual DAGs.\nexport class GeneratorDAG {\n  parents: Map<Generator, Array<Generator | FunctionValue | \"GLOBAL\">>;\n  createdObjects: Map<ObjectValue, Generator>;\n\n  constructor() {\n    this.parents = new Map();\n    this.createdObjects = new Map();\n  }\n\n  // DAG TODO: This function is dubious in the presence of actual dags.\n  getParent(generator: Generator): Generator | FunctionValue | \"GLOBAL\" {\n    let a = this.parents.get(generator);\n    invariant(a !== undefined && a.length >= 1);\n    return a[0];\n  }\n\n  isParent(parent: Generator | FunctionValue | \"GLOBAL\", generator: Generator): boolean {\n    let a = this.parents.get(generator);\n    return a !== undefined && a.includes(parent);\n  }\n\n  getCreator(value: ObjectValue): Generator | void {\n    return this.createdObjects.get(value);\n  }\n\n  add(parent: FunctionValue | \"GLOBAL\", generator: Generator): void {\n    this._add(parent, generator);\n  }\n\n  _add(parent: Generator | FunctionValue | \"GLOBAL\", generator: Generator): void {\n    let a = this.parents.get(generator);\n    if (a === undefined) this.parents.set(generator, (a = []));\n    if (!a.includes(parent)) a.push(parent);\n    let effects = generator.effectsToApply;\n    if (effects !== undefined)\n      for (let createdObject of effects.createdObjects) {\n        let isValidPreviousCreator = previousCreator => {\n          // It's okay if we don't know about any previous creator.\n          if (previousCreator === undefined) return true;\n\n          // If we already recorded a newly-created object, then we must have done so for our parent\n          if (previousCreator === parent) return true;\n\n          // Since we are dealing with a DAG, and not a tree, we might have already the current generator as the creator\n          if (previousCreator === generator) return true;\n\n          // TODO: There's something else going on that is not yet understood.\n          // Fix the return value once #1901 is understood and landed.\n          return true; // false\n        };\n\n        invariant(isValidPreviousCreator(this.createdObjects.get(createdObject)));\n\n        // Update the created objects mapping to the most specific generator\n        this.createdObjects.set(createdObject, generator);\n      }\n\n    for (let dependency of generator.getDependencies()) this._add(generator, dependency);\n  }\n}\n"]}