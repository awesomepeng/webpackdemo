{"version":3,"sources":["../../src/serializer/ResidualHeapValueIdentifiers.js"],"names":["t","ResidualHeapValueIdentifiers","constructor","values","preludeGenerator","collectValToRefCountOnly","_valueNameGenerator","createNameGenerator","_populateIdentifierMap","initPass1","valToRefCount","Map","initPass2","refs","val","_setIdentifier","_createNewIdentifier","name","generate","__originalName","identifier","id","has","set","hasIdentifier","getIdentifier","get","undefined","deleteIdentifier","delete","getIdentifierAndIncrementReferenceCount","incrementReferenceCount","refCount","needsIdentifier"],"mappings":";;;;;;;AAWA;;AAEA;;;;AAEA;;IAAYA,C;;;;;;AAEZ;AACA;AACA;AACA;AACA;AACO,MAAMC,4BAAN,CAAmC;AACxCC,cAAYC,MAAZ,EAAqCC,gBAArC,EAAyE;AACvE,SAAKC,wBAAL,GAAgC,KAAhC;AACA,SAAKC,mBAAL,GAA2BF,iBAAiBG,mBAAjB,CAAqC,GAArC,CAA3B;AACA,SAAKC,sBAAL,CAA4BL,MAA5B;AACD;;AAEDM,cAAkB;AAChB,SAAKJ,wBAAL,GAAgC,IAAhC;AACA,SAAKK,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACD;;AAEDC,cAAkB;AAChB,SAAKP,wBAAL,GAAgC,KAAhC;AACD;;AAODG,yBAAuBL,MAAvB,EAAsD;AACpD,SAAKU,IAAL,GAAY,IAAIF,GAAJ,EAAZ;AACA,SAAK,MAAMG,GAAX,IAAkBX,MAAlB,EAA0B;AACxB,WAAKY,cAAL,CAAoBD,GAApB,EAAyB,KAAKE,oBAAL,CAA0BF,GAA1B,CAAzB;AACD;AACF;;AAEDE,uBAAqBF,GAArB,EAAsD;AACpD,UAAMG,OAAO,KAAKX,mBAAL,CAAyBY,QAAzB,CAAkCJ,IAAIK,cAAJ,IAAsB,EAAxD,CAAb;AACA,WAAOnB,EAAEoB,UAAF,CAAaH,IAAb,CAAP;AACD;;AAEDF,iBAAeD,GAAf,EAA2BO,EAA3B,EAAoD;AAClD,6BAAU,CAAC,KAAKR,IAAL,CAAUS,GAAV,CAAcR,GAAd,CAAX;AACA,SAAKD,IAAL,CAAUU,GAAV,CAAcT,GAAd,EAAmBO,EAAnB;AACD;;AAEDG,gBAAcV,GAAd,EAAmC;AACjC,WAAO,KAAKD,IAAL,CAAUS,GAAV,CAAcR,GAAd,CAAP;AACD;;AAEDW,gBAAcX,GAAd,EAA+C;AAC7C,QAAIO,KAAK,KAAKR,IAAL,CAAUa,GAAV,CAAcZ,GAAd,CAAT;AACA,6BAAUO,OAAOM,SAAjB;AACA,WAAON,EAAP;AACD;;AAEDO,mBAAiBd,GAAjB,EAAmC;AACjC,6BAAU,KAAKD,IAAL,CAAUS,GAAV,CAAcR,GAAd,CAAV;AACA,SAAKD,IAAL,CAAUgB,MAAV,CAAiBf,GAAjB;AACD;;AAEDgB,0CAAwChB,GAAxC,EAAyE;AACvE,SAAKiB,uBAAL,CAA6BjB,GAA7B;AACA,QAAIO,KAAK,KAAKR,IAAL,CAAUa,GAAV,CAAcZ,GAAd,CAAT;AACA,6BAAUO,OAAOM,SAAjB,EAA4B,sCAA5B;AACA,WAAON,EAAP;AACD;;AAEDU,0BAAwBjB,GAAxB,EAA0C;AACxC,QAAI,KAAKT,wBAAT,EAAmC;AACjC,UAAIK,gBAAgB,KAAKA,aAAzB;AACA,+BAAUA,kBAAkBiB,SAA5B;AACA,UAAIK,WAAWtB,cAAcgB,GAAd,CAAkBZ,GAAlB,CAAf;AACA,UAAIkB,QAAJ,EAAc;AACZA;AACD,OAFD,MAEO;AACLA,mBAAW,CAAX;AACD;AACDtB,oBAAca,GAAd,CAAkBT,GAAlB,EAAuBkB,QAAvB;AACD;AACF;;AAEDC,kBAAgBnB,GAAhB,EAAqC;AACnC,QAAI,KAAKT,wBAAL,IAAiC,KAAKK,aAAL,KAAuBiB,SAA5D,EAAuE,OAAO,IAAP;AACvE,QAAIK,WAAW,KAAKtB,aAAL,CAAmBgB,GAAnB,CAAuBZ,GAAvB,CAAf;AACA,6BAAUkB,aAAaL,SAAb,IAA0BK,WAAW,CAA/C;AACA,WAAOA,aAAa,CAApB;AACD;AA/EuC;QAA7B/B,4B,GAAAA,4B,EAtBb;;;;;;;;;AASA","file":"ResidualHeapValueIdentifiers.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport { Value } from \"../values/index.js\";\nimport type { BabelNodeIdentifier } from \"babel-types\";\nimport invariant from \"../invariant.js\";\nimport type { NameGenerator, PreludeGenerator } from \"../utils/generator\";\nimport * as t from \"babel-types\";\n\n// This class maintains a map of values to babel identifiers.\n// This class can optionally track how often such value identifiers are referenced\n// when pass 1 is activated, which is usually followed by pass 2 in which\n// unneeded identifiers (those which were only ever referenced once) are\n// eliminated as the defining expression can be inlined.\nexport class ResidualHeapValueIdentifiers {\n  constructor(values: Iterator<Value>, preludeGenerator: PreludeGenerator) {\n    this.collectValToRefCountOnly = false;\n    this._valueNameGenerator = preludeGenerator.createNameGenerator(\"_\");\n    this._populateIdentifierMap(values);\n  }\n\n  initPass1(): void {\n    this.collectValToRefCountOnly = true;\n    this.valToRefCount = new Map();\n  }\n\n  initPass2(): void {\n    this.collectValToRefCountOnly = false;\n  }\n\n  collectValToRefCountOnly: boolean;\n  valToRefCount: void | Map<Value, number>;\n  refs: Map<Value, BabelNodeIdentifier>;\n  _valueNameGenerator: NameGenerator;\n\n  _populateIdentifierMap(values: Iterator<Value>): void {\n    this.refs = new Map();\n    for (const val of values) {\n      this._setIdentifier(val, this._createNewIdentifier(val));\n    }\n  }\n\n  _createNewIdentifier(val: Value): BabelNodeIdentifier {\n    const name = this._valueNameGenerator.generate(val.__originalName || \"\");\n    return t.identifier(name);\n  }\n\n  _setIdentifier(val: Value, id: BabelNodeIdentifier) {\n    invariant(!this.refs.has(val));\n    this.refs.set(val, id);\n  }\n\n  hasIdentifier(val: Value): boolean {\n    return this.refs.has(val);\n  }\n\n  getIdentifier(val: Value): BabelNodeIdentifier {\n    let id = this.refs.get(val);\n    invariant(id !== undefined);\n    return id;\n  }\n\n  deleteIdentifier(val: Value): void {\n    invariant(this.refs.has(val));\n    this.refs.delete(val);\n  }\n\n  getIdentifierAndIncrementReferenceCount(val: Value): BabelNodeIdentifier {\n    this.incrementReferenceCount(val);\n    let id = this.refs.get(val);\n    invariant(id !== undefined, \"Value Id cannot be null or undefined\");\n    return id;\n  }\n\n  incrementReferenceCount(val: Value): void {\n    if (this.collectValToRefCountOnly) {\n      let valToRefCount = this.valToRefCount;\n      invariant(valToRefCount !== undefined);\n      let refCount = valToRefCount.get(val);\n      if (refCount) {\n        refCount++;\n      } else {\n        refCount = 1;\n      }\n      valToRefCount.set(val, refCount);\n    }\n  }\n\n  needsIdentifier(val: Value): boolean {\n    if (this.collectValToRefCountOnly || this.valToRefCount === undefined) return true;\n    let refCount = this.valToRefCount.get(val);\n    invariant(refCount !== undefined && refCount > 0);\n    return refCount !== 1;\n  }\n}\n"]}