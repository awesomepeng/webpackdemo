{"version":3,"sources":["../../../src/intrinsics/node/fs.js"],"names":["realm","intrinsicName","nativeFS","process","binding","obj","intrinsics","ObjectPrototype","defineNativeMethod","context","args","undefined","fileName","ToString","internalModuleStat","path","buffer","float64buffer","Float64Array","lstat","fd","ToNumber","fstat","flags","mode","open","close","offset","length","position","bytesRead","read","result","internalModuleReadFile","FSReqWrapTemplateSrc","FSReqWrapTemplate","val","createFromTemplate","values","Set","DefinePropertyOrThrow","value","writable","configurable","enumerable"],"mappings":"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","file":"fs.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../../invariant.js\";\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NumberValue, ObjectValue, StringValue } from \"../../values/index.js\";\nimport { ValuesDomain } from \"../../domains/index.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\nimport { getNodeBufferFromTypedArray } from \"./utils.js\";\nimport { Properties, To } from \"../../singletons.js\";\n\ndeclare var process: any;\n\nexport default function(realm: Realm): ObjectValue {\n  let intrinsicName = 'process.binding(\"fs\")';\n  let nativeFS = process.binding(\"fs\");\n\n  // fs\n  let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, intrinsicName);\n  obj.defineNativeMethod(\"FSInitialize\", 0, (context, args) => {\n    // TODO: Implement the native implementation.\n    return realm.intrinsics.undefined;\n  });\n  obj.defineNativeMethod(\"internalModuleStat\", 0, (context, args) => {\n    const fileName = To.ToString(realm, args[0]);\n    return new NumberValue(realm, nativeFS.internalModuleStat(fileName));\n  });\n  obj.defineNativeMethod(\"lstat\", 0, (context, args) => {\n    const path = To.ToString(realm, args[0]);\n    invariant(args[1] instanceof ObjectValue);\n    const buffer = getNodeBufferFromTypedArray(realm, args[1]);\n    const float64buffer = new Float64Array(buffer.buffer);\n    nativeFS.lstat(path, float64buffer);\n    return args[1];\n  });\n  obj.defineNativeMethod(\"fstat\", 0, (context, args) => {\n    const fd = To.ToNumber(realm, args[0]);\n    invariant(args[1] instanceof ObjectValue);\n    const buffer = getNodeBufferFromTypedArray(realm, args[1]);\n    const float64buffer = new Float64Array(buffer.buffer);\n    nativeFS.fstat(fd, float64buffer);\n    return args[1];\n  });\n  obj.defineNativeMethod(\"open\", 0, (context, args) => {\n    const path = To.ToString(realm, args[0]);\n    const flags = To.ToNumber(realm, args[1]);\n    const mode = To.ToNumber(realm, args[2]);\n    const fd = nativeFS.open(path, flags, mode);\n    return new NumberValue(realm, fd);\n  });\n  obj.defineNativeMethod(\"close\", 0, (context, args) => {\n    const fd = To.ToNumber(realm, args[0]);\n    nativeFS.close(fd);\n    return realm.intrinsics.undefined;\n  });\n  obj.defineNativeMethod(\"read\", 0, (context, args) => {\n    const fd = To.ToNumber(realm, args[0]);\n    invariant(args[1] instanceof ObjectValue);\n    const buffer = getNodeBufferFromTypedArray(realm, args[1]);\n    const offset = To.ToNumber(realm, args[2]);\n    const length = To.ToNumber(realm, args[3]);\n    const position = args[4] === realm.intrinsics.undefined ? undefined : To.ToNumber(realm, args[4]);\n    const bytesRead = nativeFS.read(fd, buffer, offset, length, position);\n    return new NumberValue(realm, bytesRead);\n  });\n  obj.defineNativeMethod(\"internalModuleReadFile\", 0, (context, args) => {\n    const path = To.ToString(realm, args[0]);\n    const result = nativeFS.internalModuleReadFile(path);\n    if (result === undefined) {\n      return realm.intrinsics.undefined;\n    }\n    return new StringValue(realm, result);\n  });\n\n  let FSReqWrapTemplateSrc = `${intrinsicName}.FSReqWrap`;\n  let FSReqWrapTemplate = buildExpressionTemplate(FSReqWrapTemplateSrc);\n  let val = AbstractValue.createFromTemplate(realm, FSReqWrapTemplate, ObjectValue, [], FSReqWrapTemplateSrc);\n  val.values = new ValuesDomain(new Set([new ObjectValue(realm)]));\n  val.intrinsicName = FSReqWrapTemplateSrc;\n  Properties.DefinePropertyOrThrow(realm, obj, \"FSReqWrap\", {\n    value: val,\n    writable: true,\n    configurable: true,\n    enumerable: true,\n  });\n\n  // TODO: Implement more of the native methods here. Ideally all of them should\n  // just be automatically proxied.\n\n  return obj;\n}\n"]}