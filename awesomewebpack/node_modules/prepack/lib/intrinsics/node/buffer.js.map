{"version":3,"sources":["../../../src/intrinsics/node/buffer.js"],"names":["realm","nativeBuffer","process","binding","nativeBufferPrototype","require","Buffer","prototype","intrinsicName","obj","intrinsics","ObjectPrototype","setupBufferJS","setupContext","setupArgs","length","proto","simpleWrapperNames","name","wrapper","context","args","Set","utf8Slice","self","decodedArgs","map","arg","i","ToInteger","utf8String","apply","copy","bytesCopied","undefined","createFromString","kMaxLength","kStringMaxLength"],"mappings":"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","file":"buffer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../../invariant.js\";\nimport { FatalError } from \"../../errors.js\";\nimport { Realm } from \"../../realm.js\";\nimport { NumberValue, NativeFunctionValue, ObjectValue, StringValue } from \"../../values/index.js\";\nimport { getNodeBufferFromTypedArray } from \"./utils.js\";\nimport { Properties, To } from \"../../singletons.js\";\n\ndeclare var process: any;\n\nexport default function(realm: Realm): ObjectValue {\n  let nativeBuffer = process.binding(\"buffer\");\n  let nativeBufferPrototype = (require(\"buffer\"): any).Buffer.prototype;\n\n  let intrinsicName = 'process.binding(\"buffer\")';\n  let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, intrinsicName);\n\n  // Buffer\n\n  let setupBufferJS = new NativeFunctionValue(\n    realm,\n    intrinsicName + \".setupBufferJS\",\n    \"setupBufferJS\",\n    0,\n    (setupContext, setupArgs) => {\n      invariant(setupArgs.length === 2);\n      invariant(setupArgs[0] instanceof ObjectValue);\n      invariant(setupArgs[1] instanceof ObjectValue);\n      // TODO: Mutate the second argument by setting one of the properties to\n      // Buffer prototype just like the native implementation does.\n      let [proto] = setupArgs;\n\n      let simpleWrapperNames = [\n        \"asciiSlice\",\n        \"base64Slice\",\n        \"latin1Slice\",\n        \"hexSlice\",\n        \"ucs2Slice\",\n        \"asciiWrite\",\n        \"base64Write\",\n        \"latin1Write\",\n        \"hexWrite\",\n        \"ucs2Write\",\n        \"utf8Write\",\n      ];\n\n      for (let name of simpleWrapperNames) {\n        let wrapper = new NativeFunctionValue(realm, \"Buffer.prototype.\" + name, name, 0, (context, args) => {\n          throw new FatalError(\"TODO: \" + name);\n        });\n        Properties.Set(realm, proto, name, wrapper, true);\n      }\n\n      // utf8Slice is used to read source code.\n      let utf8Slice = new NativeFunctionValue(realm, \"Buffer.prototype.utf8Slice\", \"utf8Slice\", 0, (context, args) => {\n        invariant(context instanceof ObjectValue);\n        let self = getNodeBufferFromTypedArray(realm, context);\n        let decodedArgs = args.map((arg, i) => To.ToInteger(realm, arg));\n        let utf8String = nativeBufferPrototype.utf8Slice.apply(self, decodedArgs);\n        return new StringValue(realm, utf8String);\n      });\n      Properties.Set(realm, proto, \"utf8Slice\", utf8Slice, true);\n\n      // copy has recently moved from the prototype to the instance upstream.\n      let copy = new NativeFunctionValue(realm, \"Buffer.prototype.copy\", \"copy\", 0, (context, args) => {\n        invariant(context instanceof ObjectValue);\n        let self = getNodeBufferFromTypedArray(realm, context);\n        let decodedArgs = args.map((arg, i) => {\n          if (i === 0) {\n            invariant(arg instanceof ObjectValue);\n            return getNodeBufferFromTypedArray(realm, arg);\n          } else {\n            return To.ToInteger(realm, arg);\n          }\n        });\n        let bytesCopied = nativeBufferPrototype.copy.apply(self, decodedArgs);\n        return new NumberValue(realm, bytesCopied);\n      });\n      Properties.Set(realm, proto, \"copy\", copy, true);\n\n      // TODO: Set up more methods on the prototype and bindingObject\n      return realm.intrinsics.undefined;\n    }\n  );\n  Properties.Set(realm, obj, \"setupBufferJS\", setupBufferJS, true);\n\n  let createFromString = new NativeFunctionValue(\n    realm,\n    intrinsicName + \".createFromString\",\n    \"createFromString\",\n    0,\n    (context, args) => {\n      throw new FatalError(\"TODO\");\n    }\n  );\n  Properties.Set(realm, obj, \"createFromString\", createFromString, true);\n\n  let simpleWrapperNames = [\n    \"byteLengthUtf8\",\n    \"copy\",\n    \"compare\",\n    \"compareOffset\",\n    \"fill\",\n    \"indexOfBuffer\",\n    \"indexOfNumber\",\n    \"indexOfString\",\n\n    \"readDoubleBE\",\n    \"readDoubleLE\",\n    \"readFloatBE\",\n    \"readFloatLE\",\n\n    \"writeDoubleBE\",\n    \"writeDoubleLE\",\n    \"writeFloatBE\",\n    \"writeFloatLE\",\n\n    \"swap16\",\n    \"swap32\",\n    \"swap64\",\n  ];\n\n  for (let name of simpleWrapperNames) {\n    let wrapper = new NativeFunctionValue(realm, intrinsicName + \".\" + name, name, 0, (context, args) => {\n      throw new FatalError(\"TODO\");\n    });\n    Properties.Set(realm, obj, name, wrapper, true);\n  }\n\n  Properties.Set(realm, obj, \"kMaxLength\", new NumberValue(realm, nativeBuffer.kMaxLength), true);\n  Properties.Set(realm, obj, \"kStringMaxLength\", new NumberValue(realm, nativeBuffer.kStringMaxLength), true);\n\n  return obj;\n}\n"]}