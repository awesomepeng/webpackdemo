{"version":3,"sources":["../../../src/intrinsics/fb-www/react-dom-mocks.js"],"names":["createMockReactDOM","createMockReactDOMServer","t","realm","reactDomRequireName","reactDomValue","intrinsics","ObjectPrototype","refuseSerialization","genericTemporalFunc","funcVal","args","reactDomMethod","createTemporalFromBuildFunction","renderNode","_args","callExpression","skipInvariant","isPure","createPortalFunc","reactPortalValue","domNodeValue","react","abstractHints","set","undefined","makeFinal","requireName","reactDomServerValue","input"],"mappings":"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","file":"react-dom-mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, AbstractObjectValue, AbstractValue, FunctionValue } from \"../../values/index.js\";\nimport { createReactHintObject, isReactElement } from \"../../react/utils.js\";\nimport * as t from \"babel-types\";\nimport invariant from \"../../invariant\";\nimport { updateIntrinsicNames, addMockFunctionToObject } from \"./utils.js\";\nimport { renderToString } from \"../../react/experimental-server-rendering/rendering.js\";\n\nexport function createMockReactDOM(realm: Realm, reactDomRequireName: string): ObjectValue {\n  let reactDomValue = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  reactDomValue.refuseSerialization = true;\n\n  updateIntrinsicNames(realm, reactDomValue, reactDomRequireName);\n\n  const genericTemporalFunc = (funcVal, args) => {\n    let reactDomMethod = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal, ...args],\n      ([renderNode, ..._args]) => {\n        return t.callExpression(renderNode, ((_args: any): Array<any>));\n      },\n      { skipInvariant: true, isPure: true }\n    );\n    invariant(reactDomMethod instanceof AbstractObjectValue);\n    return reactDomMethod;\n  };\n\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"render\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"hydrate\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"findDOMNode\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"unmountComponentAtNode\", genericTemporalFunc);\n\n  const createPortalFunc = (funcVal, [reactPortalValue, domNodeValue]) => {\n    let reactDomMethod = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      ObjectValue,\n      [funcVal, reactPortalValue, domNodeValue],\n      ([renderNode, ..._args]) => {\n        return t.callExpression(renderNode, ((_args: any): Array<any>));\n      },\n      { skipInvariant: true, isPure: true }\n    );\n    invariant(reactDomMethod instanceof AbstractObjectValue);\n    realm.react.abstractHints.set(\n      reactDomMethod,\n      createReactHintObject(reactDomValue, \"createPortal\", [reactPortalValue, domNodeValue], realm.intrinsics.undefined)\n    );\n    return reactDomMethod;\n  };\n\n  addMockFunctionToObject(realm, reactDomValue, reactDomRequireName, \"createPortal\", createPortalFunc);\n\n  reactDomValue.refuseSerialization = false;\n  reactDomValue.makeFinal();\n  return reactDomValue;\n}\n\nexport function createMockReactDOMServer(realm: Realm, requireName: string): ObjectValue {\n  let reactDomServerValue = new ObjectValue(realm, realm.intrinsics.ObjectPrototype);\n  reactDomServerValue.refuseSerialization = true;\n\n  updateIntrinsicNames(realm, reactDomServerValue, requireName);\n\n  const genericTemporalFunc = (funcVal, args) => {\n    let reactDomMethod = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [funcVal, ...args],\n      ([renderNode, ..._args]) => {\n        return t.callExpression(renderNode, ((_args: any): Array<any>));\n      },\n      { skipInvariant: true, isPure: true }\n    );\n    invariant(reactDomMethod instanceof AbstractObjectValue);\n    return reactDomMethod;\n  };\n\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToString\", (funcVal, [input]) => {\n    if (input instanceof ObjectValue && isReactElement(input)) {\n      return renderToString(realm, input, false);\n    }\n    return genericTemporalFunc(funcVal, [input]);\n  });\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToStaticMarkup\", (funcVal, [input]) => {\n    if (input instanceof ObjectValue && isReactElement(input)) {\n      return renderToString(realm, input, true);\n    }\n    return genericTemporalFunc(funcVal, [input]);\n  });\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToNodeStream\", genericTemporalFunc);\n  addMockFunctionToObject(realm, reactDomServerValue, requireName, \"renderToStaticNodeStream\", genericTemporalFunc);\n\n  reactDomServerValue.refuseSerialization = false;\n  reactDomServerValue.makeFinal();\n  return reactDomServerValue;\n}\n"]}