{"version":3,"sources":["../../../src/intrinsics/fb-www/relay-mocks.js"],"names":["createMockReactRelay","t","reactRelayCode","reactRelayAst","plugins","createReactRelayContainer","realm","reactRelay","containerName","reactRelayFirstRenderValue","relayRequireName","funcValue","args","value","createTemporalFromBuildFunction","_args","reactRelayIdent","otherArgs","callExpression","memberExpression","identifier","skipInvariant","isPure","firstRenderContainerValue","firstRenderValue","intrinsics","undefined","firstRenderContainerValueCall","$Call","react","abstractHints","set","reactRelayFirstRenderFactory","GetValue","$GlobalEnv","evaluate","factory","fbLibraries","ObjectPrototype","queryRendererComponent","CreateDataPropertyOrThrow","graphql","reactRelayContainers","reactRelayContainer","commitLocalUpdate","commitMutation","fetchQuery","requestSubscription","refuseSerialization","makeFinal"],"mappings":"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","file":"relay-mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, FunctionValue, AbstractValue, ECMAScriptSourceFunctionValue } from \"../../values/index.js\";\nimport { Create, Environment } from \"../../singletons.js\";\nimport { createAbstract } from \"../prepack/utils.js\";\nimport { Get } from \"../../methods/index.js\";\nimport * as t from \"babel-types\";\nimport invariant from \"../../invariant\";\nimport { createReactHintObject } from \"../../react/utils.js\";\nimport { parseExpression } from \"babylon\";\nimport { addMockFunctionToObject } from \"./utils.js\";\n\nlet reactRelayCode = `\n  function createReactRelay(React) {\n\n   function mapObject(obj, func) {\n     var newObj = {};\n\n      Object.keys(obj).forEach(function(key) {\n        newObj[key] = func(obj[key]);\n      });\n\n      return newObj;\n   }\n\n    function isReactComponent(component) {\n      return !!(\n        component &&\n        typeof component.prototype === 'object' &&\n        component.prototype &&\n        component.prototype.isReactComponent\n      );\n    }\n\n    function getReactComponent(Component) {\n      if (isReactComponent(Component)) {\n        return Component;\n      } else {\n        return null;\n      }\n    }\n\n    function getComponentName(Component) {\n      let name;\n      const ComponentClass = getReactComponent(Component);\n      if (ComponentClass) {\n        name = ComponentClass.displayName || ComponentClass.name;\n      } else if (typeof Component === 'function') {\n        name = Component.displayName || Component.name || 'StatelessComponent';\n      } else {\n        name = 'ReactElement';\n      }\n      return String(name);\n    }\n\n    function createFragmentContainer(Component, fragmentSpec) {\n      var componentName = getComponentName(Component);\n      var containerName = \\`Relay(\\${componentName})\\`;\n\n      return function(props, context) {\n        var relay = context.relay;\n        var {\n          createFragmentSpecResolver,\n          getFragment: getFragmentFromTag,\n        } = relay.environment.unstable_internal;\n        var fragments = mapObject(fragmentSpec, getFragmentFromTag);\n        var resolver = createFragmentSpecResolver(\n          relay,\n          containerName,\n          fragments,\n          props,\n        );\n        var relayProp = {\n          isLoading: resolver.isLoading(),\n          environment: relay.environment,\n        };\n        var newProps = Object.assign({}, props, resolver.resolve(), {\n          relay: relayProp,\n        });\n        return React.createElement(Component, newProps);\n      };\n    }\n\n    return {\n      createFragmentContainer,\n    };\n  }\n`;\nlet reactRelayAst = parseExpression(reactRelayCode, { plugins: [\"flow\"] });\n\nfunction createReactRelayContainer(\n  realm: Realm,\n  reactRelay: ObjectValue,\n  containerName: string,\n  reactRelayFirstRenderValue: ObjectValue,\n  relayRequireName: string\n) {\n  // we create a ReactRelay container function that returns an abstract object\n  // allowing us to reconstruct this ReactReact.createSomeContainer(...) again\n  // we also pass a reactHint so the reconciler can properly deal with this\n  addMockFunctionToObject(realm, reactRelay, relayRequireName, containerName, (funcValue, args) => {\n    let value = AbstractValue.createTemporalFromBuildFunction(\n      realm,\n      FunctionValue,\n      [reactRelay, ...args],\n      _args => {\n        let [reactRelayIdent, ...otherArgs] = _args;\n\n        return t.callExpression(\n          t.memberExpression(reactRelayIdent, t.identifier(containerName)),\n          ((otherArgs: any): Array<any>)\n        );\n      },\n      { skipInvariant: true, isPure: true }\n    );\n    invariant(value instanceof AbstractValue);\n    let firstRenderContainerValue = Get(realm, reactRelayFirstRenderValue, containerName);\n    let firstRenderValue = realm.intrinsics.undefined;\n\n    if (firstRenderContainerValue instanceof ECMAScriptSourceFunctionValue) {\n      let firstRenderContainerValueCall = firstRenderContainerValue.$Call;\n      invariant(firstRenderContainerValueCall !== undefined);\n      firstRenderValue = firstRenderContainerValueCall(realm.intrinsics.undefined, args);\n      invariant(firstRenderValue instanceof ECMAScriptSourceFunctionValue);\n    }\n\n    realm.react.abstractHints.set(value, createReactHintObject(reactRelay, containerName, args, firstRenderValue));\n    return value;\n  });\n}\n\nexport function createMockReactRelay(realm: Realm, relayRequireName: string): ObjectValue {\n  let reactRelayFirstRenderFactory = Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactRelayAst, false));\n  invariant(reactRelayFirstRenderFactory instanceof ECMAScriptSourceFunctionValue);\n  let factory = reactRelayFirstRenderFactory.$Call;\n  invariant(factory !== undefined);\n  invariant(realm.fbLibraries.react instanceof ObjectValue, \"mock ReactRelay cannot be required before mock React\");\n  let reactRelayFirstRenderValue = factory(realm.intrinsics.undefined, [realm.fbLibraries.react]);\n  invariant(reactRelayFirstRenderValue instanceof ObjectValue);\n\n  // we set refuseSerialization to true so we don't serialize the below properties straight away\n  let reactRelay = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, `require(\"${relayRequireName}\")`, true);\n  // for QueryRenderer, we want to leave the component alone but process it's \"render\" prop\n  let queryRendererComponent = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").QueryRenderer`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"QueryRenderer\", queryRendererComponent);\n\n  let graphql = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").graphql`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"graphql\", graphql);\n\n  let reactRelayContainers = [\"createFragmentContainer\", \"createPaginationContainer\", \"createRefetchContainer\"];\n  for (let reactRelayContainer of reactRelayContainers) {\n    createReactRelayContainer(realm, reactRelay, reactRelayContainer, reactRelayFirstRenderValue, relayRequireName);\n  }\n\n  let commitLocalUpdate = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").commitLocalUpdate`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"commitLocalUpdate\", commitLocalUpdate);\n\n  let commitMutation = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").commitMutation`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"commitMutation\", commitMutation);\n\n  let fetchQuery = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").fetchQuery`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"fetchQuery\", fetchQuery);\n\n  let requestSubscription = createAbstract(realm, \"function\", `require(\"${relayRequireName}\").requestSubscription`);\n  Create.CreateDataPropertyOrThrow(realm, reactRelay, \"requestSubscription\", requestSubscription);\n\n  // we set refuseSerialization back to false\n  reactRelay.refuseSerialization = false;\n  reactRelay.makeFinal();\n  return reactRelay;\n}\n"]}