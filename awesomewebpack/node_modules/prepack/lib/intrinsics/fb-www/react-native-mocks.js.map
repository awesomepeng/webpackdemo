{"version":3,"sources":["../../../src/intrinsics/fb-www/react-native-mocks.js"],"names":["createMockReactNative","t","reactNativeCode","reactNativeAst","plugins","realm","reactNativeRequireName","reactNativeFactory","GetValue","$GlobalEnv","evaluate","factory","$Call","undefined","RCTViewDerivedReference","createTemporalFromBuildFunction","stringLiteral","skipInvariant","isPure","react","reactElementStringTypeReferences","set","RCTTextDerivedReference","reactLibrary","fbLibraries","reactNativeValue","intrinsics","refuseSerialization","intrinsicName"],"mappings":";;;;;QAonDgBA,qB,GAAAA,qB;;AAxmDhB;;AACA;;AACA;;;;AACA;;IAAYC,C;;AACZ;;;;;;AAhBA;;;;;;;;;AAkBA,IAAIC,kBAAmvB;;AAgmDA,IAAIC,iBAAiB,8BAAgBD,eAAhB,EAAiC,EAAEE,SAAS,CAAC,MAAD,CAAX,EAAjC,CAArB;;AAEO,SAASJ,qBAAT,CAA+BK,KAA/B,EAA6CC,sBAA7C,EAA0F;AAC/F,MAAIC,qBAAqB,wBAAYC,QAAZ,CAAqBH,KAArB,EAA4BA,MAAMI,UAAN,CAAiBC,QAAjB,CAA0BP,cAA1B,EAA0C,KAA1C,CAA5B,CAAzB;AACA,2BAAUI,kEAAV;AACA,MAAII,UAAUJ,mBAAmBK,KAAjC;AACA,2BAAUD,YAAYE,SAAtB;;AAEA,MAAIC,0BAA0B,qBAAcC,+BAAd,CAC5BV,KAD4B,sBAG5B,EAH4B,EAI5B,MAAMJ,EAAEe,aAAF,CAAgB,SAAhB,CAJsB,EAK5B,EAAEC,eAAe,IAAjB,EAAuBC,QAAQ,IAA/B,EAL4B,CAA9B;AAOA,2BAAUJ,uDAAV;AACAT,QAAMc,KAAN,CAAYC,gCAAZ,CAA6CC,GAA7C,CAAiD,SAAjD,EAA4DP,uBAA5D;;AAEA,MAAIQ,0BAA0B,qBAAcP,+BAAd,CAC5BV,KAD4B,sBAG5B,EAH4B,EAI5B,MAAMJ,EAAEe,aAAF,CAAgB,SAAhB,CAJsB,EAK5B,EAAEC,eAAe,IAAjB,EAAuBC,QAAQ,IAA/B,EAL4B,CAA9B;AAOA,2BAAUI,uDAAV;AACAjB,QAAMc,KAAN,CAAYC,gCAAZ,CAA6CC,GAA7C,CAAiD,SAAjD,EAA4DC,uBAA5D;;AAEA,MAAIC,eAAelB,MAAMmB,WAAN,CAAkBL,KAArC;AACA,2BACEI,iBAAiBV,SADnB,EAEE,kFAFF;AAIA,MAAIY,mBAAmBd,QAAQN,MAAMqB,UAAN,CAAiBb,SAAzB,EAAoC,CACzDU,YADyD,EAEzD,uBAAgBlB,KAAhB,EAAuBC,sBAAvB,CAFyD,CAApC,CAAvB;AAIA,2BAAUmB,8CAAV;AACAA,mBAAiBE,mBAAjB,GAAuC,IAAvC;;AAEAF,mBAAiBG,aAAjB,GAAkC,YAAWtB,sBAAuB,IAApE;;AAEAmB,mBAAiBE,mBAAjB,GAAuC,KAAvC;AACA,SAAOF,gBAAP;AACD","file":"react-native-mocks.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ECMAScriptSourceFunctionValue, ObjectValue, StringValue } from \"../../values/index.js\";\nimport { Environment } from \"../../singletons.js\";\nimport invariant from \"../../invariant\";\nimport * as t from \"babel-types\";\nimport { parseExpression } from \"babylon\";\n\nlet reactNativeCode = `\n  function createReactNative(React, reactNameRequireName) {\n    var Platform = __abstract(\"object\", 'require(\"' + reactNameRequireName + '\").Platform');\n    \n    var NativeModules = __abstract({\n      nativePerformanceNow: __abstract(\"function\"),\n      nativeTraceBeginAsyncSection: __abstract(\"function\"),\n      nativeTraceEndAsyncSection: __abstract(\"function\"),\n      UIManager: __abstract({\n        customBubblingEventTypes: __abstract(),\n        customDirectEventTypes: __abstract(),\n        ViewManagerNames: __abstract(),\n        __takeSnapshot: undefined,\n        takeSnapshot: undefined,\n        RCTVirtualText: null,\n      }),\n      DeviceInfo: __abstract({\n        Dimensions: __abstract({\n          window: undefined,\n          screen: undefined,\n          windowPhysicalPixels: __abstract({\n            width: __abstract(\"number\"),\n            height: __abstract(\"number\"),\n            scale: __abstract(\"number\"),\n            fontScale: __abstract(\"number\"),\n          }),\n          screenPhysicalPixels: __abstract({\n            width: __abstract(\"number\"),\n            height: __abstract(\"number\"),\n            scale: __abstract(\"number\"),\n            fontScale: __abstract(\"number\"),\n          }),\n        }),\n      }),\n      I18n: __abstract({\n        localeCountryCode: __abstract(),\n        localeIdentifier: __abstract(),\n        fbLocaleIdentifier: __abstract(),\n        AdsCountriesConfig: __abstract({}),\n        exports: __abstract({}),\n      }),\n      I18nManager: __abstract({\n        isRTL: __abstract(\"boolean\"),\n        isRTLForced: __abstract(\"boolean\"),\n        doLeftAndRightSwapInRTL: __abstract(\"boolean\"),\n        allowRTL: function(allowRTL) {\n          return __residual(\"void\", function(allowRTL, global) {\n            global.nativeModuleProxy.I18nManager.allowRTL(allowRTL);\n          }, allowRTL, global);\n        },\n        forceRTL: function(forceRTL) {\n          return __residual(\"void\", function(forceRTL, global) {\n            global.nativeModuleProxy.I18nManager.forceRTL(forceRTL);\n          }, forceRTL, global);\n        },\n        swapLeftAndRightInRTL: function(flipStyles) {\n          return __residual(\"void\", function(flipStyles, global) {\n            global.nativeModuleProxy.I18nManager.swapLeftAndRightInRTL(flipStyles);\n          }, flipStyles, global);\n        },\n        exports: __abstract({}),\n      }),\n      DeviceEventManager: __abstract({}),\n      Timing: __abstract({\n        createTimer: function(id, duration, time, recurring) {\n          return __residual(\"object\", function(id, duration, time, recurring, global, Object) {\n            global.nativeModuleProxy.Timing.createTimer(id, duration, time, recurring);\n            return Object.create(null);\n          }, id, duration, time, recurring, global, Object);\n        }\n      }),\n      ExceptionsManager: __abstract({\n        reportFatalException: function(message, stack, id) {\n          console.log(\"nativeModuleProxy.ExceptionsManager.reportFatalException\");\n          console.log(message);\n          for (var i = 0; i < stack.length; i++) {\n            var s = stack[i];\n            console.log(\"  at \" + s.methodName + \" (\" + s.file + \":\" + s.lineNumber + \":\" + s.column + \")\");\n          }\n        }\n      }),\n      PlatformConstants: __abstract({\n        isTesting: false,\n        reactNativeVersion: __abstract({\n          major: 0,\n          minor: 0,\n          patch: 0,\n          prerelease: null,\n        }),\n        Version: __abstract(\"number\"),\n        forceTouchAvailable: undefined,\n        uiMode: __abstract(),\n      }),\n      RelayAPIConfig: __abstract({\n        graphBatchURI: __abstract(),\n      }),\n      SourceCode: __abstract({\n        scriptURL: __abstract(\"string\"),\n      }),\n    }, 'require(\"' + reactNameRequireName + '\").NativeModules');\n\n    const {UIManager} = NativeModules;\n\n    const ReactNativeViewAttributes = {};\n    const viewConfigCallbacks = new Map();\n\n    const TextAncestor = React.createContext(false);\n\n    const ReactNativeStyleAttributes = {};\n\n    const dummySize = {width: undefined, height: undefined};\n\n    const sizesDiffer = function(one, two) {\n      one = one || dummySize;\n      two = two || dummySize;\n      return one !== two && (one.width !== two.width || one.height !== two.height);\n    };\n\n    ReactNativeStyleAttributes.transform = {process: processTransform};\n    ReactNativeStyleAttributes.shadowOffset = {diff: sizesDiffer};\n\n    const colorAttributes = {process: processColor};\n    ReactNativeStyleAttributes.backgroundColor = colorAttributes;\n    ReactNativeStyleAttributes.borderBottomColor = colorAttributes;\n    ReactNativeStyleAttributes.borderColor = colorAttributes;\n    ReactNativeStyleAttributes.borderLeftColor = colorAttributes;\n    ReactNativeStyleAttributes.borderRightColor = colorAttributes;\n    ReactNativeStyleAttributes.borderTopColor = colorAttributes;\n    ReactNativeStyleAttributes.borderStartColor = colorAttributes;\n    ReactNativeStyleAttributes.borderEndColor = colorAttributes;\n    ReactNativeStyleAttributes.color = colorAttributes;\n    ReactNativeStyleAttributes.shadowColor = colorAttributes;\n    ReactNativeStyleAttributes.textDecorationColor = colorAttributes;\n    ReactNativeStyleAttributes.tintColor = colorAttributes;\n    ReactNativeStyleAttributes.textShadowColor = colorAttributes;\n    ReactNativeStyleAttributes.overlayColor = colorAttributes;\n\n    ReactNativeViewAttributes.UIView = {\n      pointerEvents: true,\n      accessible: true,\n      accessibilityActions: true,\n      accessibilityLabel: true,\n      accessibilityComponentType: true,\n      accessibilityLiveRegion: true,\n      accessibilityTraits: true,\n      importantForAccessibility: true,\n      nativeID: true,\n      testID: true,\n      renderToHardwareTextureAndroid: true,\n      shouldRasterizeIOS: true,\n      onLayout: true,\n      onAccessibilityAction: true,\n      onAccessibilityTap: true,\n      onMagicTap: true,\n      collapsable: true,\n      needsOffscreenAlphaCompositing: true,\n      style: ReactNativeStyleAttributes,\n    };\n\n    ReactNativeViewAttributes.RCTView = Object.assign({},\n      ReactNativeViewAttributes.UIView,\n      { removeClippedSubviews: true }\n    );\n\n    var viewConfig = {\n      validAttributes: Object.assign({}, ReactNativeViewAttributes.UIView, {\n        isHighlighted: true,\n        numberOfLines: true,\n        ellipsizeMode: true,\n        allowFontScaling: true,\n        disabled: true,\n        selectable: true,\n        selectionColor: true,\n        adjustsFontSizeToFit: true,\n        minimumFontScale: true,\n        textBreakStrategy: true\n      }),\n      uiViewClassName: 'RCTText'\n    };\n\n    var MatrixMath = {\n      createIdentityMatrix: function() {\n        return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n      },\n    \n      createCopy: function(m) {\n        return [\n          m[0],\n          m[1],\n          m[2],\n          m[3],\n          m[4],\n          m[5],\n          m[6],\n          m[7],\n          m[8],\n          m[9],\n          m[10],\n          m[11],\n          m[12],\n          m[13],\n          m[14],\n          m[15],\n        ];\n      },\n    \n      createOrthographic: function(left, right, bottom, top, near, far) {\n        const a = 2 / (right - left);\n        const b = 2 / (top - bottom);\n        const c = -2 / (far - near);\n    \n        const tx = -(right + left) / (right - left);\n        const ty = -(top + bottom) / (top - bottom);\n        const tz = -(far + near) / (far - near);\n    \n        return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];\n      },\n    \n      createFrustum: function(left, right, bottom, top, near, far) {\n        const r_width = 1 / (right - left);\n        const r_height = 1 / (top - bottom);\n        const r_depth = 1 / (near - far);\n        const x = 2 * (near * r_width);\n        const y = 2 * (near * r_height);\n        const A = (right + left) * r_width;\n        const B = (top + bottom) * r_height;\n        const C = (far + near) * r_depth;\n        const D = 2 * (far * near * r_depth);\n        return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];\n      },\n    \n      /**\n       * This create a perspective projection towards negative z\n       * Clipping the z range of [-near, -far]\n       *\n       * @param fovInRadians - field of view in randians\n       */\n      createPerspective: function(fovInRadians, aspect, near, far) {\n        const h = 1 / Math.tan(fovInRadians / 2);\n        const r_depth = 1 / (near - far);\n        const C = (far + near) * r_depth;\n        const D = 2 * (far * near * r_depth);\n        return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];\n      },\n    \n      createTranslate2d: function(x, y) {\n        const mat = MatrixMath.createIdentityMatrix();\n        MatrixMath.reuseTranslate2dCommand(mat, x, y);\n        return mat;\n      },\n    \n      reuseTranslate2dCommand: function(matrixCommand, x, y) {\n        matrixCommand[12] = x;\n        matrixCommand[13] = y;\n      },\n    \n      reuseTranslate3dCommand: function(matrixCommand, x, y, z) {\n        matrixCommand[12] = x;\n        matrixCommand[13] = y;\n        matrixCommand[14] = z;\n      },\n    \n      createScale: function(factor) {\n        const mat = MatrixMath.createIdentityMatrix();\n        MatrixMath.reuseScaleCommand(mat, factor);\n        return mat;\n      },\n    \n      reuseScaleCommand: function(matrixCommand, factor) {\n        matrixCommand[0] = factor;\n        matrixCommand[5] = factor;\n      },\n    \n      reuseScale3dCommand: function(matrixCommand, x, y, z) {\n        matrixCommand[0] = x;\n        matrixCommand[5] = y;\n        matrixCommand[10] = z;\n      },\n    \n      reusePerspectiveCommand: function(matrixCommand, p) {\n        matrixCommand[11] = -1 / p;\n      },\n    \n      reuseScaleXCommand(matrixCommand, factor) {\n        matrixCommand[0] = factor;\n      },\n    \n      reuseScaleYCommand(matrixCommand, factor) {\n        matrixCommand[5] = factor;\n      },\n    \n      reuseScaleZCommand(matrixCommand, factor) {\n        matrixCommand[10] = factor;\n      },\n    \n      reuseRotateXCommand: function(matrixCommand, radians) {\n        matrixCommand[5] = Math.cos(radians);\n        matrixCommand[6] = Math.sin(radians);\n        matrixCommand[9] = -Math.sin(radians);\n        matrixCommand[10] = Math.cos(radians);\n      },\n    \n      reuseRotateYCommand: function(matrixCommand, amount) {\n        matrixCommand[0] = Math.cos(amount);\n        matrixCommand[2] = -Math.sin(amount);\n        matrixCommand[8] = Math.sin(amount);\n        matrixCommand[10] = Math.cos(amount);\n      },\n    \n      // http://www.w3.org/TR/css3-transforms/#recomposing-to-a-2d-matrix\n      reuseRotateZCommand: function(matrixCommand, radians) {\n        matrixCommand[0] = Math.cos(radians);\n        matrixCommand[1] = Math.sin(radians);\n        matrixCommand[4] = -Math.sin(radians);\n        matrixCommand[5] = Math.cos(radians);\n      },\n    \n      createRotateZ: function(radians) {\n        const mat = MatrixMath.createIdentityMatrix();\n        MatrixMath.reuseRotateZCommand(mat, radians);\n        return mat;\n      },\n    \n      reuseSkewXCommand: function(matrixCommand, radians) {\n        matrixCommand[4] = Math.tan(radians);\n      },\n    \n      reuseSkewYCommand: function(matrixCommand, radians) {\n        matrixCommand[1] = Math.tan(radians);\n      },\n    \n      multiplyInto: function(out, a, b) {\n        const a00 = a[0],\n          a01 = a[1],\n          a02 = a[2],\n          a03 = a[3],\n          a10 = a[4],\n          a11 = a[5],\n          a12 = a[6],\n          a13 = a[7],\n          a20 = a[8],\n          a21 = a[9],\n          a22 = a[10],\n          a23 = a[11],\n          a30 = a[12],\n          a31 = a[13],\n          a32 = a[14],\n          a33 = a[15];\n    \n        let b0 = b[0],\n          b1 = b[1],\n          b2 = b[2],\n          b3 = b[3];\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    \n        b0 = b[4];\n        b1 = b[5];\n        b2 = b[6];\n        b3 = b[7];\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    \n        b0 = b[8];\n        b1 = b[9];\n        b2 = b[10];\n        b3 = b[11];\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    \n        b0 = b[12];\n        b1 = b[13];\n        b2 = b[14];\n        b3 = b[15];\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n      },\n    \n      determinant(matrix) {\n        const [\n          m00,\n          m01,\n          m02,\n          m03,\n          m10,\n          m11,\n          m12,\n          m13,\n          m20,\n          m21,\n          m22,\n          m23,\n          m30,\n          m31,\n          m32,\n          m33,\n        ] = matrix;\n        return (\n          m03 * m12 * m21 * m30 -\n          m02 * m13 * m21 * m30 -\n          m03 * m11 * m22 * m30 +\n          m01 * m13 * m22 * m30 +\n          m02 * m11 * m23 * m30 -\n          m01 * m12 * m23 * m30 -\n          m03 * m12 * m20 * m31 +\n          m02 * m13 * m20 * m31 +\n          m03 * m10 * m22 * m31 -\n          m00 * m13 * m22 * m31 -\n          m02 * m10 * m23 * m31 +\n          m00 * m12 * m23 * m31 +\n          m03 * m11 * m20 * m32 -\n          m01 * m13 * m20 * m32 -\n          m03 * m10 * m21 * m32 +\n          m00 * m13 * m21 * m32 +\n          m01 * m10 * m23 * m32 -\n          m00 * m11 * m23 * m32 -\n          m02 * m11 * m20 * m33 +\n          m01 * m12 * m20 * m33 +\n          m02 * m10 * m21 * m33 -\n          m00 * m12 * m21 * m33 -\n          m01 * m10 * m22 * m33 +\n          m00 * m11 * m22 * m33\n        );\n      },\n    \n      /**\n       * Inverse of a matrix. Multiplying by the inverse is used in matrix math\n       * instead of division.\n       *\n       * Formula from:\n       * http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n       */\n      inverse(matrix: Array<number>): Array<number> {\n        const det = MatrixMath.determinant(matrix);\n        if (!det) {\n          return matrix;\n        }\n        const [\n          m00,\n          m01,\n          m02,\n          m03,\n          m10,\n          m11,\n          m12,\n          m13,\n          m20,\n          m21,\n          m22,\n          m23,\n          m30,\n          m31,\n          m32,\n          m33,\n        ] = matrix;\n        return [\n          (m12 * m23 * m31 -\n            m13 * m22 * m31 +\n            m13 * m21 * m32 -\n            m11 * m23 * m32 -\n            m12 * m21 * m33 +\n            m11 * m22 * m33) /\n            det,\n          (m03 * m22 * m31 -\n            m02 * m23 * m31 -\n            m03 * m21 * m32 +\n            m01 * m23 * m32 +\n            m02 * m21 * m33 -\n            m01 * m22 * m33) /\n            det,\n          (m02 * m13 * m31 -\n            m03 * m12 * m31 +\n            m03 * m11 * m32 -\n            m01 * m13 * m32 -\n            m02 * m11 * m33 +\n            m01 * m12 * m33) /\n            det,\n          (m03 * m12 * m21 -\n            m02 * m13 * m21 -\n            m03 * m11 * m22 +\n            m01 * m13 * m22 +\n            m02 * m11 * m23 -\n            m01 * m12 * m23) /\n            det,\n          (m13 * m22 * m30 -\n            m12 * m23 * m30 -\n            m13 * m20 * m32 +\n            m10 * m23 * m32 +\n            m12 * m20 * m33 -\n            m10 * m22 * m33) /\n            det,\n          (m02 * m23 * m30 -\n            m03 * m22 * m30 +\n            m03 * m20 * m32 -\n            m00 * m23 * m32 -\n            m02 * m20 * m33 +\n            m00 * m22 * m33) /\n            det,\n          (m03 * m12 * m30 -\n            m02 * m13 * m30 -\n            m03 * m10 * m32 +\n            m00 * m13 * m32 +\n            m02 * m10 * m33 -\n            m00 * m12 * m33) /\n            det,\n          (m02 * m13 * m20 -\n            m03 * m12 * m20 +\n            m03 * m10 * m22 -\n            m00 * m13 * m22 -\n            m02 * m10 * m23 +\n            m00 * m12 * m23) /\n            det,\n          (m11 * m23 * m30 -\n            m13 * m21 * m30 +\n            m13 * m20 * m31 -\n            m10 * m23 * m31 -\n            m11 * m20 * m33 +\n            m10 * m21 * m33) /\n            det,\n          (m03 * m21 * m30 -\n            m01 * m23 * m30 -\n            m03 * m20 * m31 +\n            m00 * m23 * m31 +\n            m01 * m20 * m33 -\n            m00 * m21 * m33) /\n            det,\n          (m01 * m13 * m30 -\n            m03 * m11 * m30 +\n            m03 * m10 * m31 -\n            m00 * m13 * m31 -\n            m01 * m10 * m33 +\n            m00 * m11 * m33) /\n            det,\n          (m03 * m11 * m20 -\n            m01 * m13 * m20 -\n            m03 * m10 * m21 +\n            m00 * m13 * m21 +\n            m01 * m10 * m23 -\n            m00 * m11 * m23) /\n            det,\n          (m12 * m21 * m30 -\n            m11 * m22 * m30 -\n            m12 * m20 * m31 +\n            m10 * m22 * m31 +\n            m11 * m20 * m32 -\n            m10 * m21 * m32) /\n            det,\n          (m01 * m22 * m30 -\n            m02 * m21 * m30 +\n            m02 * m20 * m31 -\n            m00 * m22 * m31 -\n            m01 * m20 * m32 +\n            m00 * m21 * m32) /\n            det,\n          (m02 * m11 * m30 -\n            m01 * m12 * m30 -\n            m02 * m10 * m31 +\n            m00 * m12 * m31 +\n            m01 * m10 * m32 -\n            m00 * m11 * m32) /\n            det,\n          (m01 * m12 * m20 -\n            m02 * m11 * m20 +\n            m02 * m10 * m21 -\n            m00 * m12 * m21 -\n            m01 * m10 * m22 +\n            m00 * m11 * m22) /\n            det,\n        ];\n      },\n    \n      /**\n       * Turns columns into rows and rows into columns.\n       */\n      transpose(m: Array<number>): Array<number> {\n        return [\n          m[0],\n          m[4],\n          m[8],\n          m[12],\n          m[1],\n          m[5],\n          m[9],\n          m[13],\n          m[2],\n          m[6],\n          m[10],\n          m[14],\n          m[3],\n          m[7],\n          m[11],\n          m[15],\n        ];\n      },\n    \n      /**\n       * Based on: http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c\n       */\n      multiplyVectorByMatrix(v: Array<number>, m: Array<number>): Array<number> {\n        const [vx, vy, vz, vw] = v;\n        return [\n          vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12],\n          vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13],\n          vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14],\n          vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15],\n        ];\n      },\n    \n      /**\n       * From: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n       */\n      v3Length(a: Array<number>): number {\n        return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);\n      },\n    \n      /**\n       * Based on: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n       */\n      v3Normalize(vector: Array<number>, v3Length: number): Array<number> {\n        const im = 1 / (v3Length || MatrixMath.v3Length(vector));\n        return [vector[0] * im, vector[1] * im, vector[2] * im];\n      },\n    \n      /**\n       * The dot product of a and b, two 3-element vectors.\n       * From: https://code.google.com/p/webgl-mjs/source/browse/mjs.js\n       */\n      v3Dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n      },\n    \n      /**\n       * From:\n       * http://www.opensource.apple.com/source/WebCore/WebCore-514/platform/graphics/transforms/TransformationMatrix.cpp\n       */\n      v3Combine(\n        a: Array<number>,\n        b: Array<number>,\n        aScale: number,\n        bScale: number,\n      ): Array<number> {\n        return [\n          aScale * a[0] + bScale * b[0],\n          aScale * a[1] + bScale * b[1],\n          aScale * a[2] + bScale * b[2],\n        ];\n      },\n    \n      /**\n       * From:\n       * http://www.opensource.apple.com/source/WebCore/WebCore-514/platform/graphics/transforms/TransformationMatrix.cpp\n       */\n      v3Cross(a: Array<number>, b: Array<number>): Array<number> {\n        return [\n          a[1] * b[2] - a[2] * b[1],\n          a[2] * b[0] - a[0] * b[2],\n          a[0] * b[1] - a[1] * b[0],\n        ];\n      },\n    \n      /**\n       * Based on:\n       * http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/\n       * and:\n       * http://quat.zachbennett.com/\n       *\n       * Note that this rounds degrees to the thousandth of a degree, due to\n       * floating point errors in the creation of the quaternion.\n       *\n       * Also note that this expects the qw value to be last, not first.\n       *\n       * Also, when researching this, remember that:\n       * yaw   === heading            === z-axis\n       * pitch === elevation/attitude === y-axis\n       * roll  === bank               === x-axis\n       */\n      quaternionToDegreesXYZ(q: Array<number>, matrix, row): Array<number> {\n        const [qx, qy, qz, qw] = q;\n        const qw2 = qw * qw;\n        const qx2 = qx * qx;\n        const qy2 = qy * qy;\n        const qz2 = qz * qz;\n        const test = qx * qy + qz * qw;\n        const unit = qw2 + qx2 + qy2 + qz2;\n        const conv = 180 / Math.PI;\n    \n        if (test > 0.49999 * unit) {\n          return [0, 2 * Math.atan2(qx, qw) * conv, 90];\n        }\n        if (test < -0.49999 * unit) {\n          return [0, -2 * Math.atan2(qx, qw) * conv, -90];\n        }\n    \n        return [\n          MatrixMath.roundTo3Places(\n            Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv,\n          ),\n          MatrixMath.roundTo3Places(\n            Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv,\n          ),\n          MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv),\n        ];\n      },\n    \n      /**\n       * Based on:\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n       */\n      roundTo3Places(n: number): number {\n        const arr = n.toString().split('e');\n        return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;\n      },\n    \n      /**\n       * Decompose a matrix into separate transform values, for use on platforms\n       * where applying a precomposed matrix is not possible, and transforms are\n       * applied in an inflexible ordering (e.g. Android).\n       *\n       * Implementation based on\n       * http://www.w3.org/TR/css3-transforms/#decomposing-a-2d-matrix\n       * http://www.w3.org/TR/css3-transforms/#decomposing-a-3d-matrix\n       * which was based on\n       * http://tog.acm.org/resources/GraphicsGems/gemsii/unmatrix.c\n       */\n      decomposeMatrix(transformMatrix: Array<number>): ?Object {\n    \n        // output values\n        var perspective = [];\n        const quaternion = [];\n        const scale = [];\n        const skew = [];\n        const translation = [];\n    \n        // create normalized, 2d array matrix\n        // and normalized 1d array perspectiveMatrix with redefined 4th column\n        if (!transformMatrix[15]) {\n          return;\n        }\n        const matrix = [];\n        const perspectiveMatrix = [];\n        for (var i = 0; i < 4; i++) {\n          matrix.push([]);\n          for (let j = 0; j < 4; j++) {\n            const value = transformMatrix[i * 4 + j] / transformMatrix[15];\n            matrix[i].push(value);\n            perspectiveMatrix.push(j === 3 ? 0 : value);\n          }\n        }\n        perspectiveMatrix[15] = 1;\n    \n        // test for singularity of upper 3x3 part of the perspective matrix\n        if (!MatrixMath.determinant(perspectiveMatrix)) {\n          return;\n        }\n    \n        // isolate perspective\n        if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {\n          // rightHandSide is the right hand side of the equation.\n          // rightHandSide is a vector, or point in 3d space relative to the origin.\n          const rightHandSide = [\n            matrix[0][3],\n            matrix[1][3],\n            matrix[2][3],\n            matrix[3][3],\n          ];\n    \n          // Solve the equation by inverting perspectiveMatrix and multiplying\n          // rightHandSide by the inverse.\n          const inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);\n          const transposedInversePerspectiveMatrix = MatrixMath.transpose(\n            inversePerspectiveMatrix,\n          );\n          var perspective = MatrixMath.multiplyVectorByMatrix(\n            rightHandSide,\n            transposedInversePerspectiveMatrix,\n          );\n        } else {\n          // no perspective\n          perspective[0] = perspective[1] = perspective[2] = 0;\n          perspective[3] = 1;\n        }\n    \n        // translation is simple\n        for (var i = 0; i < 3; i++) {\n          translation[i] = matrix[3][i];\n        }\n    \n        // Now get scale and shear.\n        // 'row' is a 3 element array of 3 component vectors\n        const row = [];\n        for (i = 0; i < 3; i++) {\n          row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];\n        }\n    \n        // Compute X scale factor and normalize first row.\n        scale[0] = MatrixMath.v3Length(row[0]);\n        row[0] = MatrixMath.v3Normalize(row[0], scale[0]);\n    \n        // Compute XY shear factor and make 2nd row orthogonal to 1st.\n        skew[0] = MatrixMath.v3Dot(row[0], row[1]);\n        row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);\n    \n        // Compute XY shear factor and make 2nd row orthogonal to 1st.\n        skew[0] = MatrixMath.v3Dot(row[0], row[1]);\n        row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);\n    \n        // Now, compute Y scale and normalize 2nd row.\n        scale[1] = MatrixMath.v3Length(row[1]);\n        row[1] = MatrixMath.v3Normalize(row[1], scale[1]);\n        skew[0] /= scale[1];\n    \n        // Compute XZ and YZ shears, orthogonalize 3rd row\n        skew[1] = MatrixMath.v3Dot(row[0], row[2]);\n        row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);\n        skew[2] = MatrixMath.v3Dot(row[1], row[2]);\n        row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);\n    \n        // Next, get Z scale and normalize 3rd row.\n        scale[2] = MatrixMath.v3Length(row[2]);\n        row[2] = MatrixMath.v3Normalize(row[2], scale[2]);\n        skew[1] /= scale[2];\n        skew[2] /= scale[2];\n    \n        // At this point, the matrix (in rows) is orthonormal.\n        // Check for a coordinate system flip.  If the determinant\n        // is -1, then negate the matrix and the scaling factors.\n        const pdum3 = MatrixMath.v3Cross(row[1], row[2]);\n        if (MatrixMath.v3Dot(row[0], pdum3) < 0) {\n          for (i = 0; i < 3; i++) {\n            scale[i] *= -1;\n            row[i][0] *= -1;\n            row[i][1] *= -1;\n            row[i][2] *= -1;\n          }\n        }\n    \n        // Now, get the rotations out\n        quaternion[0] =\n          0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));\n        quaternion[1] =\n          0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));\n        quaternion[2] =\n          0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));\n        quaternion[3] =\n          0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));\n    \n        if (row[2][1] > row[1][2]) {\n          quaternion[0] = -quaternion[0];\n        }\n        if (row[0][2] > row[2][0]) {\n          quaternion[1] = -quaternion[1];\n        }\n        if (row[1][0] > row[0][1]) {\n          quaternion[2] = -quaternion[2];\n        }\n    \n        // correct for occasional, weird Euler synonyms for 2d rotation\n        let rotationDegrees;\n        if (\n          quaternion[0] < 0.001 &&\n          quaternion[0] >= 0 &&\n          quaternion[1] < 0.001 &&\n          quaternion[1] >= 0\n        ) {\n          // this is a 2d rotation on the z-axis\n          rotationDegrees = [\n            0,\n            0,\n            MatrixMath.roundTo3Places(\n              Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI,\n            ),\n          ];\n        } else {\n          rotationDegrees = MatrixMath.quaternionToDegreesXYZ(\n            quaternion,\n            matrix,\n            row,\n          );\n        }\n    \n        // expose both base data and convenience names\n        return {\n          rotationDegrees,\n          perspective,\n          quaternion,\n          scale,\n          skew,\n          translation,\n    \n          rotate: rotationDegrees[2],\n          rotateX: rotationDegrees[0],\n          rotateY: rotationDegrees[1],\n          scaleX: scale[0],\n          scaleY: scale[1],\n          translateX: translation[0],\n          translateY: translation[1],\n        };\n      },\n    };\n\n    function _multiplyTransform(result, matrixMathFunction, args): void {\n      const matrixToApply = MatrixMath.createIdentityMatrix();\n      const argsWithIdentity = [matrixToApply].concat(args);\n      matrixMathFunction.apply(this, argsWithIdentity);\n      MatrixMath.multiplyInto(result, result, matrixToApply);\n    }\n\n    function _convertToRadians(value: string): number {\n      const floatValue = parseFloat(value);\n      return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;\n    }\n\n    function processTransform(transform) {    \n      // Android & iOS implementations of transform property accept the list of\n      // transform properties as opposed to a transform Matrix. This is necessary\n      // to control transform property updates completely on the native thread.\n      if (Platform.OS === 'android' || Platform.OS === 'ios') {\n        return transform;\n      }\n    \n      const result = MatrixMath.createIdentityMatrix();\n    \n      transform.forEach(transformation => {\n        const key = Object.keys(transformation)[0];\n        const value = transformation[key];\n    \n        switch (key) {\n          case 'matrix':\n            MatrixMath.multiplyInto(result, result, value);\n            break;\n          case 'perspective':\n            _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);\n            break;\n          case 'rotateX':\n            _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [\n              _convertToRadians(value),\n            ]);\n            break;\n          case 'rotateY':\n            _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [\n              _convertToRadians(value),\n            ]);\n            break;\n          case 'rotate':\n          case 'rotateZ':\n            _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [\n              _convertToRadians(value),\n            ]);\n            break;\n          case 'scale':\n            _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);\n            break;\n          case 'scaleX':\n            _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);\n            break;\n          case 'scaleY':\n            _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);\n            break;\n          case 'translate':\n            _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [\n              value[0],\n              value[1],\n              value[2] || 0,\n            ]);\n            break;\n          case 'translateX':\n            _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [\n              value,\n              0,\n            ]);\n            break;\n          case 'translateY':\n            _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [\n              0,\n              value,\n            ]);\n            break;\n          case 'skewX':\n            _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [\n              _convertToRadians(value),\n            ]);\n            break;\n          case 'skewY':\n            _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [\n              _convertToRadians(value),\n            ]);\n            break;\n          default:\n            throw new Error('Invalid transform name: ' + key);\n        }\n      });\n    \n      return result;\n    }\n\n    function register(name, callback) {\n      viewConfigCallbacks.set(name, callback);\n      return name;\n    };\n\n    const createReactNativeComponentClass = function(name, callback) {\n      return register(name, callback);\n    };\n\n    const RCTText = createReactNativeComponentClass(\n      viewConfig.uiViewClassName,\n      function () { return viewConfig }\n    );\n\n    const RCTVirtualText = UIManager.RCTVirtualText == null\n      ? RCTText\n      : createReactNativeComponentClass('RCTVirtualText', () => ({\n            validAttributes: Object.assign({},\n              ReactNativeViewAttributes.UIView,\n              { isHighlighted: true }\n            ),\n            uiViewClassName: 'RCTVirtualText',\n          }));\n\n    function normalizeColor(color) {\n      const matchers = getMatchers();\n      let match;\n    \n      if (typeof color === 'number') {\n        if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n          return color;\n        }\n        return null;\n      }\n    \n      // Ordered based on occurrences on Facebook codebase\n      if ((match = matchers.hex6.exec(color))) {\n        return parseInt(match[1] + 'ff', 16) >>> 0;\n      }\n    \n      if (names.hasOwnProperty(color)) {\n        return names[color];\n      }\n    \n      if ((match = matchers.rgb.exec(color))) {\n        return (\n          // b\n          ((parse255(match[1]) << 24) | // r\n          (parse255(match[2]) << 16) | // g\n            (parse255(match[3]) << 8) |\n            0x000000ff) >>> // a\n          0\n        );\n      }\n    \n      if ((match = matchers.rgba.exec(color))) {\n        return (\n          // b\n          ((parse255(match[1]) << 24) | // r\n          (parse255(match[2]) << 16) | // g\n            (parse255(match[3]) << 8) |\n            parse1(match[4])) >>> // a\n          0\n        );\n      }\n    \n      if ((match = matchers.hex3.exec(color))) {\n        return (\n          parseInt(\n            match[1] +\n            match[1] + // r\n            match[2] +\n            match[2] + // g\n            match[3] +\n            match[3] + // b\n              'ff', // a\n            16,\n          ) >>> 0\n        );\n      }\n    \n      // https://drafts.csswg.org/css-color-4/#hex-notation\n      if ((match = matchers.hex8.exec(color))) {\n        return parseInt(match[1], 16) >>> 0;\n      }\n    \n      if ((match = matchers.hex4.exec(color))) {\n        return (\n          parseInt(\n            match[1] +\n            match[1] + // r\n            match[2] +\n            match[2] + // g\n            match[3] +\n            match[3] + // b\n              match[4] +\n              match[4], // a\n            16,\n          ) >>> 0\n        );\n      }\n    \n      if ((match = matchers.hsl.exec(color))) {\n        return (\n          (hslToRgb(\n            parse360(match[1]), // h\n            parsePercentage(match[2]), // s\n            parsePercentage(match[3]), // l\n          ) |\n            0x000000ff) >>> // a\n          0\n        );\n      }\n    \n      if ((match = matchers.hsla.exec(color))) {\n        return (\n          (hslToRgb(\n            parse360(match[1]), // h\n            parsePercentage(match[2]), // s\n            parsePercentage(match[3]), // l\n          ) |\n            parse1(match[4])) >>> // a\n          0\n        );\n      }\n    \n      return null;\n    }\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) {\n        t += 1;\n      }\n      if (t > 1) {\n        t -= 1;\n      }\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n      if (t < 1 / 2) {\n        return q;\n      }\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n      return p;\n    }\n    \n    function hslToRgb(h, s, l) {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      const r = hue2rgb(p, q, h + 1 / 3);\n      const g = hue2rgb(p, q, h);\n      const b = hue2rgb(p, q, h - 1 / 3);\n    \n      return (\n        (Math.round(r * 255) << 24) |\n        (Math.round(g * 255) << 16) |\n        (Math.round(b * 255) << 8)\n      );\n    }\n    \n    // var INTEGER = '[-+]?\\\\d+';\n    const NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\n    const PERCENTAGE = NUMBER + '%';\n    \n    function call(...args) {\n      return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n    }\n\n    function getMatchers() {\n      var cachedMatchers = {\n          rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),\n          rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),\n          hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),\n          hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),\n          hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n          hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n          hex6: /^#([0-9a-fA-F]{6})$/,\n          hex8: /^#([0-9a-fA-F]{8})$/,\n        };\n      return cachedMatchers;\n    }\n\n    function parse255(str) {\n      const int = parseInt(str, 10);\n      if (int < 0) {\n        return 0;\n      }\n      if (int > 255) {\n        return 255;\n      }\n      return int;\n    }\n\n    function parse360(str) {\n      const int = parseFloat(str);\n      return (((int % 360) + 360) % 360) / 360;\n    }\n\n    function parse1(str) {\n      const num = parseFloat(str);\n      if (num < 0) {\n        return 0;\n      }\n      if (num > 1) {\n        return 255;\n      }\n      return Math.round(num * 255);\n    }\n\n    function parsePercentage(str) {\n      // parseFloat conveniently ignores the final %\n      const int = parseFloat(str);\n      if (int < 0) {\n        return 0;\n      }\n      if (int > 100) {\n        return 1;\n      }\n      return int / 100;\n    }\n\n    const names = {\n      transparent: 0x00000000,\n\n      // http://www.w3.org/TR/css3-color/#svg-color\n      aliceblue: 0xf0f8ffff,\n      antiquewhite: 0xfaebd7ff,\n      aqua: 0x00ffffff,\n      aquamarine: 0x7fffd4ff,\n      azure: 0xf0ffffff,\n      beige: 0xf5f5dcff,\n      bisque: 0xffe4c4ff,\n      black: 0x000000ff,\n      blanchedalmond: 0xffebcdff,\n      blue: 0x0000ffff,\n      blueviolet: 0x8a2be2ff,\n      brown: 0xa52a2aff,\n      burlywood: 0xdeb887ff,\n      burntsienna: 0xea7e5dff,\n      cadetblue: 0x5f9ea0ff,\n      chartreuse: 0x7fff00ff,\n      chocolate: 0xd2691eff,\n      coral: 0xff7f50ff,\n      cornflowerblue: 0x6495edff,\n      cornsilk: 0xfff8dcff,\n      crimson: 0xdc143cff,\n      cyan: 0x00ffffff,\n      darkblue: 0x00008bff,\n      darkcyan: 0x008b8bff,\n      darkgoldenrod: 0xb8860bff,\n      darkgray: 0xa9a9a9ff,\n      darkgreen: 0x006400ff,\n      darkgrey: 0xa9a9a9ff,\n      darkkhaki: 0xbdb76bff,\n      darkmagenta: 0x8b008bff,\n      darkolivegreen: 0x556b2fff,\n      darkorange: 0xff8c00ff,\n      darkorchid: 0x9932ccff,\n      darkred: 0x8b0000ff,\n      darksalmon: 0xe9967aff,\n      darkseagreen: 0x8fbc8fff,\n      darkslateblue: 0x483d8bff,\n      darkslategray: 0x2f4f4fff,\n      darkslategrey: 0x2f4f4fff,\n      darkturquoise: 0x00ced1ff,\n      darkviolet: 0x9400d3ff,\n      deeppink: 0xff1493ff,\n      deepskyblue: 0x00bfffff,\n      dimgray: 0x696969ff,\n      dimgrey: 0x696969ff,\n      dodgerblue: 0x1e90ffff,\n      firebrick: 0xb22222ff,\n      floralwhite: 0xfffaf0ff,\n      forestgreen: 0x228b22ff,\n      fuchsia: 0xff00ffff,\n      gainsboro: 0xdcdcdcff,\n      ghostwhite: 0xf8f8ffff,\n      gold: 0xffd700ff,\n      goldenrod: 0xdaa520ff,\n      gray: 0x808080ff,\n      green: 0x008000ff,\n      greenyellow: 0xadff2fff,\n      grey: 0x808080ff,\n      honeydew: 0xf0fff0ff,\n      hotpink: 0xff69b4ff,\n      indianred: 0xcd5c5cff,\n      indigo: 0x4b0082ff,\n      ivory: 0xfffff0ff,\n      khaki: 0xf0e68cff,\n      lavender: 0xe6e6faff,\n      lavenderblush: 0xfff0f5ff,\n      lawngreen: 0x7cfc00ff,\n      lemonchiffon: 0xfffacdff,\n      lightblue: 0xadd8e6ff,\n      lightcoral: 0xf08080ff,\n      lightcyan: 0xe0ffffff,\n      lightgoldenrodyellow: 0xfafad2ff,\n      lightgray: 0xd3d3d3ff,\n      lightgreen: 0x90ee90ff,\n      lightgrey: 0xd3d3d3ff,\n      lightpink: 0xffb6c1ff,\n      lightsalmon: 0xffa07aff,\n      lightseagreen: 0x20b2aaff,\n      lightskyblue: 0x87cefaff,\n      lightslategray: 0x778899ff,\n      lightslategrey: 0x778899ff,\n      lightsteelblue: 0xb0c4deff,\n      lightyellow: 0xffffe0ff,\n      lime: 0x00ff00ff,\n      limegreen: 0x32cd32ff,\n      linen: 0xfaf0e6ff,\n      magenta: 0xff00ffff,\n      maroon: 0x800000ff,\n      mediumaquamarine: 0x66cdaaff,\n      mediumblue: 0x0000cdff,\n      mediumorchid: 0xba55d3ff,\n      mediumpurple: 0x9370dbff,\n      mediumseagreen: 0x3cb371ff,\n      mediumslateblue: 0x7b68eeff,\n      mediumspringgreen: 0x00fa9aff,\n      mediumturquoise: 0x48d1ccff,\n      mediumvioletred: 0xc71585ff,\n      midnightblue: 0x191970ff,\n      mintcream: 0xf5fffaff,\n      mistyrose: 0xffe4e1ff,\n      moccasin: 0xffe4b5ff,\n      navajowhite: 0xffdeadff,\n      navy: 0x000080ff,\n      oldlace: 0xfdf5e6ff,\n      olive: 0x808000ff,\n      olivedrab: 0x6b8e23ff,\n      orange: 0xffa500ff,\n      orangered: 0xff4500ff,\n      orchid: 0xda70d6ff,\n      palegoldenrod: 0xeee8aaff,\n      palegreen: 0x98fb98ff,\n      paleturquoise: 0xafeeeeff,\n      palevioletred: 0xdb7093ff,\n      papayawhip: 0xffefd5ff,\n      peachpuff: 0xffdab9ff,\n      peru: 0xcd853fff,\n      pink: 0xffc0cbff,\n      plum: 0xdda0ddff,\n      powderblue: 0xb0e0e6ff,\n      purple: 0x800080ff,\n      rebeccapurple: 0x663399ff,\n      red: 0xff0000ff,\n      rosybrown: 0xbc8f8fff,\n      royalblue: 0x4169e1ff,\n      saddlebrown: 0x8b4513ff,\n      salmon: 0xfa8072ff,\n      sandybrown: 0xf4a460ff,\n      seagreen: 0x2e8b57ff,\n      seashell: 0xfff5eeff,\n      sienna: 0xa0522dff,\n      silver: 0xc0c0c0ff,\n      skyblue: 0x87ceebff,\n      slateblue: 0x6a5acdff,\n      slategray: 0x708090ff,\n      slategrey: 0x708090ff,\n      snow: 0xfffafaff,\n      springgreen: 0x00ff7fff,\n      steelblue: 0x4682b4ff,\n      tan: 0xd2b48cff,\n      teal: 0x008080ff,\n      thistle: 0xd8bfd8ff,\n      tomato: 0xff6347ff,\n      turquoise: 0x40e0d0ff,\n      violet: 0xee82eeff,\n      wheat: 0xf5deb3ff,\n      white: 0xffffffff,\n      whitesmoke: 0xf5f5f5ff,\n      yellow: 0xffff00ff,\n      yellowgreen: 0x9acd32ff,\n    };\n\n    function processColor(color) {\n      if (color === undefined || color === null) {\n        return color;\n      }\n    \n      var int32Color = normalizeColor(color);\n      if (int32Color === null || int32Color === undefined) {\n        return undefined;\n      }\n    \n      // Converts 0xrrggbbaa into 0xaarrggbb\n      int32Color = ((int32Color << 24) | (int32Color >>> 8)) >>> 0;\n    \n      if (Platform.OS === 'android') {\n        // Android use 32 bit *signed* integer to represent the color\n        // We utilize the fact that bitwise operations in JS also operates on\n        // signed 32 bit integers, so that we can use those to convert from\n        // *unsigned* to *signed* 32bit int that way.\n        int32Color = int32Color | 0x0;\n      }\n      return int32Color;\n    }\n\n    const isTouchable = props =>\n      props.onPress != null ||\n      props.onLongPress != null ||\n      props.onStartShouldSetResponder != null;\n\n    // this is not a full implementation, but just for a hack\n    function TouchableText(props) {\n      var newProps = props;\n      if (isTouchable(newProps)) {\n        throw new Error(\"TODO: mocked TouchableText does not handle touch events\");\n      }\n      if (props.selectionColor != null) {\n        newProps = Object.assign({}, props, {\n          selectionColor: processColor(props.selectionColor)\n        });\n      }\n      return (\n        React.createElement(\n          TextAncestor.Consumer,\n          null,\n          function (hasTextAncestor) {\n            return (\n              hasTextAncestor ? (\n                React.createElement(\n                  RCTVirtualText,\n                  Object.assign(\n                    {},\n                    newProps,\n                    { ref: newProps.forwardedRef }\n                  )\n                )\n              ) : (\n                React.createElement(\n                  TextAncestor.Provider,\n                  { value: true },\n                  React.createElement(\n                    RCTText,\n                    Object.assign(\n                      {},\n                      newProps,\n                      { ref: newProps.forwardedRef }\n                    )\n                  )\n                )\n              )\n            );\n          }\n        )\n      );\n    }\n\n    TouchableText.defaultProps = {\n      accessible: true,\n      allowFontScaling: true,\n      ellipsizeMode: 'tail',\n    };\n\n    function getDifferForType(typeName: string) {\n      switch (typeName) {\n        // iOS Types\n        case 'CATransform3D':\n          return matricesDiffer;\n        case 'CGPoint':\n          return pointsDiffer;\n        case 'CGSize':\n          return sizesDiffer;\n        case 'UIEdgeInsets':\n          return insetsDiffer;\n        // Android Types\n        // (not yet implemented)\n      }\n      return null;\n    }\n\n    function getProcessorForType(typeName) {\n      switch (typeName) {\n        // iOS Types\n        case 'CGColor':\n        case 'UIColor':\n          return processColor;\n        case 'CGColorArray':\n        case 'UIColorArray':\n          return processColorArray;\n        case 'CGImage':\n        case 'UIImage':\n        case 'RCTImageSource':\n          return resolveAssetSource;\n        // Android Types\n        case 'Color':\n          return processColor;\n        case 'ColorArray':\n          return processColorArray;\n      }\n      return null;\n    }\n\n    function merge(destination, source) {\n      if (!source) {\n        return destination;\n      }\n      if (!destination) {\n        return source;\n      }\n    \n      for (const key in source) {\n        if (!source.hasOwnProperty(key)) {\n          continue;\n        }\n    \n        let sourceValue = source[key];\n        if (destination.hasOwnProperty(key)) {\n          const destinationValue = destination[key];\n          if (\n            typeof sourceValue === 'object' &&\n            typeof destinationValue === 'object'\n          ) {\n            sourceValue = merge(destinationValue, sourceValue);\n          }\n        }\n        destination[key] = sourceValue;\n      }\n      return destination;\n    }\n\n    function requireNativeComponent(uiViewClassName) {\n      return createReactNativeComponentClass(uiViewClassName, function() {\n        const viewConfig = UIManager[viewName];\n\n        let {baseModuleName, bubblingEventTypes, directEventTypes} = viewConfig;\n        let nativeProps = viewConfig.NativeProps;\n\n        while (baseModuleName) {\n          const baseModule = UIManager[baseModuleName];\n          if (!baseModule) {\n            baseModuleName = null;\n          } else {\n            bubblingEventTypes = Object.assign({}, baseModule.bubblingEventTypes, bubblingEventTypes);\n            directEventTypes = Object.assign({}, baseModule.directEventTypes, directEventTypes);\n            nativeProps = Object.assign({}, baseModule.NativeProps, nativeProps);\n            baseModuleName = baseModule.baseModuleName;\n          }\n        }\n\n        const viewAttributes = {};\n\n        for (const key in nativeProps) {\n          const typeName = nativeProps[key];\n          const diff = getDifferForType(typeName);\n          const process = getProcessorForType(typeName);\n    \n          viewAttributes[key] =\n            diff == null && process == null ? true : {diff, process};\n        }\n        viewAttributes.style = ReactNativeStyleAttributes;\n\n        Object.assign(viewConfig, {\n          uiViewClassName: viewName,\n          validAttributes: viewAttributes,\n          bubblingEventTypes,\n          directEventTypes,\n        });\n    \n        if (!hasAttachedDefaultEventTypes) {\n          attachDefaultEventTypes(viewConfig);\n          hasAttachedDefaultEventTypes = true;\n        }\n    \n        return viewConfig;\n      });\n    }\n\n    var hasAttachedDefaultEventTypes = false;\n\n    function attachDefaultEventTypes(viewConfig) {\n      // This is supported on UIManager platforms (ex: Android),\n      // as lazy view managers are not implemented for all platforms.\n      // See [UIManager] for details on constants and implementations.\n      if (UIManager.ViewManagerNames) {\n        // Lazy view managers enabled.\n        viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());\n      } else {\n        viewConfig.bubblingEventTypes = merge(\n          viewConfig.bubblingEventTypes,\n          UIManager.genericBubblingEventTypes,\n        );\n        viewConfig.directEventTypes = merge(\n          viewConfig.directEventTypes,\n          UIManager.genericDirectEventTypes,\n        );\n      }\n    }\n\n    const Text = React.forwardRef(function(props, ref) {\n      return React.createElement(\n        TouchableText,\n        Object.assign(\n          {},\n          props\n          // { forwardedRef: ref }\n        )\n      );\n    });\n\n    const StyleSheet = {\n      create(obj){\n        return obj;\n      },\n    };\n\n    const RCTView = requireNativeComponent(\n      'RCTView',\n      {},\n      {\n        nativeOnly: {\n          nativeBackgroundAndroid: true,\n          nativeForegroundAndroid: true,\n        },\n      },\n    );\n\n    return {\n      StyleSheet,\n      Text,\n      View: RCTView,\n    };\n  }\n`;\n\nlet reactNativeAst = parseExpression(reactNativeCode, { plugins: [\"flow\"] });\n\nexport function createMockReactNative(realm: Realm, reactNativeRequireName: string): ObjectValue {\n  let reactNativeFactory = Environment.GetValue(realm, realm.$GlobalEnv.evaluate(reactNativeAst, false));\n  invariant(reactNativeFactory instanceof ECMAScriptSourceFunctionValue);\n  let factory = reactNativeFactory.$Call;\n  invariant(factory !== undefined);\n\n  let RCTViewDerivedReference = AbstractValue.createTemporalFromBuildFunction(\n    realm,\n    StringValue,\n    [],\n    () => t.stringLiteral(\"RCTView\"),\n    { skipInvariant: true, isPure: true }\n  );\n  invariant(RCTViewDerivedReference instanceof AbstractValue);\n  realm.react.reactElementStringTypeReferences.set(\"RCTView\", RCTViewDerivedReference);\n\n  let RCTTextDerivedReference = AbstractValue.createTemporalFromBuildFunction(\n    realm,\n    StringValue,\n    [],\n    () => t.stringLiteral(\"RCTText\"),\n    { skipInvariant: true, isPure: true }\n  );\n  invariant(RCTTextDerivedReference instanceof AbstractValue);\n  realm.react.reactElementStringTypeReferences.set(\"RCTText\", RCTTextDerivedReference);\n\n  let reactLibrary = realm.fbLibraries.react;\n  invariant(\n    reactLibrary !== undefined,\n    \"Could not find React library in sourcecode. Ensure React is bundled or required.\"\n  );\n  let reactNativeValue = factory(realm.intrinsics.undefined, [\n    reactLibrary,\n    new StringValue(realm, reactNativeRequireName),\n  ]);\n  invariant(reactNativeValue instanceof ObjectValue);\n  reactNativeValue.refuseSerialization = true;\n\n  reactNativeValue.intrinsicName = `require(\"${reactNativeRequireName}\")`;\n\n  reactNativeValue.refuseSerialization = false;\n  return reactNativeValue;\n}\n"]}