{"version":3,"sources":["../../../src/intrinsics/fb-www/utils.js"],"names":["updateIntrinsicNames","addMockFunctionToObject","realm","obj","requireName","properties","intrinsicName","property","val","name","updatePrototype","proto","funcName","func","funcValue","undefined","context","args","$DefineOwnProperty","value","writable","enumerable","configurable"],"mappings":";;;;;QAgBgBA,oB,GAAAA,oB;QA6BAC,uB,GAAAA,uB;;AAjChB;;AACA;;AACA;;;;;;AAdA;;;;;;;;;AAgBO,SAASD,oBAAT,CACLE,KADK,EAELC,GAFK,EAGLC,WAHK,EAILC,UAJK,EAKC;AACNF,MAAIG,aAAJ,GAAqB,YAAWF,WAAY,IAA5C;AACA,MAAIC,UAAJ,EAAgB;AACd,SAAK,IAAIE,QAAT,IAAqBF,UAArB,EAAiC;AAC/B,UAAI,OAAOE,QAAP,KAAoB,QAAxB,EAAkC;AAChC,YAAIC,MAAM,iBAAIN,KAAJ,EAAWC,GAAX,EAAgBI,QAAhB,CAAV;AACA,iCAAUC,2BAAV;AACAA,YAAIF,aAAJ,GAAqB,YAAWF,WAAY,MAAKG,QAAS,EAA1D;AACD,OAJD,MAIO,IAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,aAAa,IAAjD,EAAuD;AAC5D,YAAI,EAAEE,IAAF,EAAQC,eAAR,KAA4BH,QAAhC;;AAEA,YAAIC,MAAM,iBAAIN,KAAJ,EAAWC,GAAX,EAAgBM,IAAhB,CAAV;AACA,iCAAUD,2BAAV;AACAA,YAAIF,aAAJ,GAAqB,YAAWF,WAAY,MAAKK,IAAK,EAAtD;AACA,YAAIC,eAAJ,EAAqB;AACnB,mCAAUF,iCAAV;AACA,cAAIG,QAAQ,iBAAIT,KAAJ,EAAWM,GAAX,EAAgB,WAAhB,CAAZ;AACAG,gBAAML,aAAN,GAAuB,YAAWF,WAAY,MAAKK,IAAK,YAAxD;AACD;AACF;AACF;AACF;AACF;;AAEM,SAASR,uBAAT,CACLC,KADK,EAELC,GAFK,EAGLC,WAHK,EAILQ,QAJK,EAKLC,IALK,EAMC;AACN,MAAIC,YAAY,+BAAwBZ,KAAxB,EAA+Ba,SAA/B,EAA0CH,QAA1C,EAAoD,CAApD,EAAuD,CAACI,OAAD,EAAUC,IAAV,KAAmBJ,KAAKC,SAAL,EAAgBG,IAAhB,CAA1E,CAAhB;;AAEAd,MAAIe,kBAAJ,CAAuBN,QAAvB,EAAiC;AAC/BO,WAAOL,SADwB;AAE/BM,cAAU,KAFqB;AAG/BC,gBAAY,KAHmB;AAI/BC,kBAAc;AAJiB,GAAjC;AAMAR,YAAUR,aAAV,GAA2B,YAAWF,WAAY,MAAKQ,QAAS,EAAhE;AACD","file":"utils.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, NativeFunctionValue, Value } from \"../../values/index.js\";\nimport { Get } from \"../../methods/index.js\";\nimport invariant from \"../../invariant.js\";\n\nexport function updateIntrinsicNames(\n  realm: Realm,\n  obj: ObjectValue,\n  requireName: string,\n  properties?: Array<string | { name: string, updatePrototype: boolean }>\n): void {\n  obj.intrinsicName = `require(\"${requireName}\")`;\n  if (properties) {\n    for (let property of properties) {\n      if (typeof property === \"string\") {\n        let val = Get(realm, obj, property);\n        invariant(val instanceof Value);\n        val.intrinsicName = `require(\"${requireName}\").${property}`;\n      } else if (typeof property === \"object\" && property !== null) {\n        let { name, updatePrototype } = property;\n\n        let val = Get(realm, obj, name);\n        invariant(val instanceof Value);\n        val.intrinsicName = `require(\"${requireName}\").${name}`;\n        if (updatePrototype) {\n          invariant(val instanceof ObjectValue);\n          let proto = Get(realm, val, \"prototype\");\n          proto.intrinsicName = `require(\"${requireName}\").${name}.prototype`;\n        }\n      }\n    }\n  }\n}\n\nexport function addMockFunctionToObject(\n  realm: Realm,\n  obj: ObjectValue,\n  requireName: string,\n  funcName: string,\n  func: (funcValue: NativeFunctionValue, args: Array<Value>) => Value\n): void {\n  let funcValue = new NativeFunctionValue(realm, undefined, funcName, 0, (context, args) => func(funcValue, args));\n\n  obj.$DefineOwnProperty(funcName, {\n    value: funcValue,\n    writable: false,\n    enumerable: false,\n    configurable: true,\n  });\n  funcValue.intrinsicName = `require(\"${requireName}\").${funcName}`;\n}\n"]}