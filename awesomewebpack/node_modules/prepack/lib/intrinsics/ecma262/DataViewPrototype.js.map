{"version":3,"sources":["../../../src/intrinsics/ecma262/DataViewPrototype.js"],"names":["realm","obj","defineNativeGetter","context","O","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$ViewedArrayBuffer","buffer","size","$ByteLength","offset","$ByteOffset","defineNativeMethod","byteOffset","_littleEndian","littleEndian","v","false","true","value","defineNativeProperty","SymbolToStringTag","writable"],"mappings":"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","file":"DataViewPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, NumberValue } from \"../../values/index.js\";\nimport { IsDetachedBuffer } from \"../../methods/is.js\";\nimport { GetViewValue, SetViewValue } from \"../../methods/arraybuffer.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 24.2.4.1\n  obj.defineNativeGetter(\"buffer\", context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have a [[DataView]] internal slot, throw a TypeError exception.\n    if (!(\"$DataView\" in O)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have a [[DataView]] internal slot\"\n      );\n    }\n\n    // 4. Assert: O has a [[ViewedArrayBuffer]] internal slot.\n    invariant(O.$ViewedArrayBuffer);\n\n    // 5. Let buffer be O.[[ViewedArrayBuffer]].\n    let buffer = O.$ViewedArrayBuffer;\n\n    // 6. Return buffer.\n    return buffer;\n  });\n\n  // ECMA262 24.2.4.2\n  obj.defineNativeGetter(\"byteLength\", context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have a [[DataView]] internal slot, throw a TypeError exception.\n    if (!(\"$DataView\" in O)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have a [[DataView]] internal slot\"\n      );\n    }\n\n    // 4. Assert: O has a [[ViewedArrayBuffer]] internal slot.\n    invariant(O.$ViewedArrayBuffer);\n\n    // 5. Let buffer be O.[[ViewedArrayBuffer]].\n    let buffer = O.$ViewedArrayBuffer;\n\n    // 6. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, buffer) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n    }\n\n    // 7. Let size be O.[[ByteLength]].\n    let size = O.$ByteLength;\n    invariant(typeof size === \"number\");\n\n    // 8. Return size.\n    return new NumberValue(realm, size);\n  });\n\n  // ECMA262 24.2.4.3\n  obj.defineNativeGetter(\"byteOffset\", context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(O) is not Object\");\n    }\n\n    // 3. If O does not have a [[DataView]] internal slot, throw a TypeError exception.\n    if (!(\"$DataView\" in O)) {\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        \"O does not have a [[DataView]] internal slot\"\n      );\n    }\n\n    // 4. Assert: O has a [[ViewedArrayBuffer]] internal slot.\n    invariant(O.$ViewedArrayBuffer);\n\n    // 5. Let buffer be O.[[ViewedArrayBuffer]].\n    let buffer = O.$ViewedArrayBuffer;\n\n    // 6. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n    if (IsDetachedBuffer(realm, buffer) === true) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"IsDetachedBuffer(buffer) is true\");\n    }\n\n    // 7. Let offset be O.[[ByteOffset]].\n    let offset = O.$ByteOffset;\n    invariant(typeof offset === \"number\");\n\n    // 8. Return offset.\n    return new NumberValue(realm, offset);\n  });\n\n  // ECMA262 24.2.4.5\n  obj.defineNativeMethod(\"getFloat32\", 1, (context, [byteOffset, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float32\").\n    return GetViewValue(realm, v, byteOffset, littleEndian, \"Float32\");\n  });\n\n  // ECMA262 24.2.4.6\n  obj.defineNativeMethod(\"getFloat64\", 1, (context, [byteOffset, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Float64\").\n    return GetViewValue(realm, v, byteOffset, littleEndian, \"Float64\");\n  });\n\n  // ECMA262 24.2.4.7\n  obj.defineNativeMethod(\"getInt8\", 1, (context, [byteOffset]) => {\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. Return ? GetViewValue(v, byteOffset, true, \"Int8\").\n    return GetViewValue(realm, v, byteOffset, realm.intrinsics.true, \"Int8\");\n  });\n\n  // ECMA262 24.2.4.8\n  obj.defineNativeMethod(\"getInt16\", 1, (context, [byteOffset, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int16\").\n    return GetViewValue(realm, v, byteOffset, littleEndian, \"Int16\");\n  });\n\n  // ECMA262 24.2.4.9\n  obj.defineNativeMethod(\"getInt32\", 1, (context, [byteOffset, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Int32\").\n    return GetViewValue(realm, v, byteOffset, littleEndian, \"Int32\");\n  });\n\n  // ECMA262 24.2.4.10\n  obj.defineNativeMethod(\"getUint8\", 1, (context, [byteOffset]) => {\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. Return ? GetViewValue(v, byteOffset, true, \"Uint8\").\n    return GetViewValue(realm, v, byteOffset, realm.intrinsics.true, \"Uint8\");\n  });\n\n  // ECMA262 24.2.4.11\n  obj.defineNativeMethod(\"getUint16\", 1, (context, [byteOffset, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint16\").\n    return GetViewValue(realm, v, byteOffset, littleEndian, \"Uint16\");\n  });\n\n  // ECMA262 24.2.4.12\n  obj.defineNativeMethod(\"getUint32\", 1, (context, [byteOffset, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? GetViewValue(v, byteOffset, littleEndian, \"Uint32\").\n    return GetViewValue(realm, v, byteOffset, littleEndian, \"Uint32\");\n  });\n\n  // ECMA262 24.2.4.13\n  obj.defineNativeMethod(\"setFloat32\", 2, (context, [byteOffset, value, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float32\", value).\n    return SetViewValue(realm, v, byteOffset, littleEndian, \"Float32\", value);\n  });\n\n  // ECMA262 24.2.4.14\n  obj.defineNativeMethod(\"setFloat64\", 2, (context, [byteOffset, value, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Float64\", value).\n    return SetViewValue(realm, v, byteOffset, littleEndian, \"Float64\", value);\n  });\n\n  // ECMA262 24.2.4.15\n  obj.defineNativeMethod(\"setInt8\", 2, (context, [byteOffset, value]) => {\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. Return ? SetViewValue(v, byteOffset, true, \"Int8\", value).\n    return SetViewValue(realm, v, byteOffset, realm.intrinsics.true, \"Int8\", value);\n  });\n\n  // ECMA262 24.2.4.16\n  obj.defineNativeMethod(\"setInt16\", 2, (context, [byteOffset, value, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int16\", value).\n    return SetViewValue(realm, v, byteOffset, littleEndian, \"Int16\", value);\n  });\n\n  // ECMA262 24.2.4.17\n  obj.defineNativeMethod(\"setInt32\", 2, (context, [byteOffset, value, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Int32\", value).\n    return SetViewValue(realm, v, byteOffset, littleEndian, \"Int32\", value);\n  });\n\n  // ECMA262 24.2.4.18\n  obj.defineNativeMethod(\"setUint8\", 2, (context, [byteOffset, value]) => {\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. Return ? SetViewValue(v, byteOffset, true, \"Uint8\", value).\n    return SetViewValue(realm, v, byteOffset, realm.intrinsics.true, \"Uint8\", value);\n  });\n\n  // ECMA262 24.2.4.19\n  obj.defineNativeMethod(\"setUint16\", 2, (context, [byteOffset, value, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint16\", value).\n    return SetViewValue(realm, v, byteOffset, littleEndian, \"Uint16\", value);\n  });\n\n  // ECMA262 24.2.4.20\n  obj.defineNativeMethod(\"setUint32\", 2, (context, [byteOffset, value, _littleEndian]) => {\n    let littleEndian = _littleEndian;\n    // 1. Let v be the this value.\n    let v = context;\n\n    // 2. If littleEndian is not present, let littleEndian be false.\n    if (!littleEndian) littleEndian = realm.intrinsics.false;\n\n    // 3. Return ? SetViewValue(v, byteOffset, littleEndian, \"Uint32\", value).\n    return SetViewValue(realm, v, byteOffset, littleEndian, \"Uint32\", value);\n  });\n\n  // ECMA26224.2.4.21\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"DataView\"), { writable: false });\n}\n"]}