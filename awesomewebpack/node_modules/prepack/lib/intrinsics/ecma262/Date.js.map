{"version":3,"sources":["../../../src/intrinsics/ecma262/Date.js"],"names":["realm","lastNow","offsetGenerator","getCurrentTime","useAbstractInterpretation","createTemporalFromTemplate","buildDateNow","isPure","skipInvariant","newNow","Date","now","strictlyMonotonicDateNow","Math","floor","func","context","args","argCount","NewTarget","year","month","date","hours","minutes","seconds","ms","numberOfArgs","y","ToNumber","m","dt","h","min","s","milli","yr","isNaN","ToInteger","finalDate","O","OrdinaryCreateFromConstructor","$DateValue","undefined","throwIfNotConcreteNumber","value","value_","throwIfNotConcrete","tv","v","ToPrimitive","getTime","defineNativeMethod","string","reportIntrospectionError","parsedDate","parse","buildDateNowSrc"],"mappings":"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","file":"Date.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, NumberValue, StringValue, ObjectValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { MakeTime, MakeDate, MakeDay, TimeClip, UTC, ToDateString, thisTimeValue } from \"../../methods/date.js\";\nimport { FatalError } from \"../../errors.js\";\nimport invariant from \"../../invariant.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\nimport seedrandom from \"seedrandom\";\n\nconst buildDateNowSrc = \"global.Date.now()\";\nconst buildDateNow = buildExpressionTemplate(buildDateNowSrc);\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let lastNow;\n  let offsetGenerator;\n  function getCurrentTime(): AbstractValue | NumberValue {\n    if (realm.useAbstractInterpretation) {\n      return AbstractValue.createTemporalFromTemplate(realm, buildDateNow, NumberValue, [], {\n        isPure: true,\n        skipInvariant: true,\n      });\n    } else {\n      let newNow = Date.now();\n      if (realm.strictlyMonotonicDateNow && lastNow >= newNow) {\n        if (!offsetGenerator) offsetGenerator = seedrandom(0);\n        // certain behaviors in the test262 test suite can only be (reliably) triggered if Date.now() is strictly monotonically increasing\n        // TODO #1004: Set the strictlyMonotonicDateNow option on the realm in the test262 test runner, fix the issues that will come up in the tests, and remove this comment.\n        newNow = lastNow + 1 + Math.floor(offsetGenerator() * 500);\n      }\n      lastNow = newNow;\n      return new NumberValue(realm, newNow);\n    }\n  }\n\n  // ECMA262 20.3.2\n  let func = new NativeFunctionValue(realm, \"Date\", \"Date\", 7, (context, args, argCount, NewTarget) => {\n    if (argCount >= 2) {\n      // ECMA262 20.3.2.1\n      let [year, month, date, hours, minutes, seconds, ms] = args;\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs ≥ 2.\n      invariant(numberOfArgs >= 2, \"expected two or more arguments\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        // a. Let y be ? ToNumber(year).\n        let y = To.ToNumber(realm, year);\n\n        // b. Let m be ? ToNumber(month).\n        let m = To.ToNumber(realm, month);\n\n        // c. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n        let dt = argCount >= 3 ? To.ToNumber(realm, date) : 1;\n\n        // d. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n        let h = argCount >= 4 ? To.ToNumber(realm, hours) : 0;\n\n        // e. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n        let min = argCount >= 5 ? To.ToNumber(realm, minutes) : 0;\n\n        // f. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n        let s = argCount >= 6 ? To.ToNumber(realm, seconds) : 0;\n\n        // g. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n        let milli = argCount >= 7 ? To.ToNumber(realm, ms) : 0;\n\n        // h. If y is not NaN and 0 ≤ ToInteger(y) ≤ 99, let yr be 1900+ToInteger(y); otherwise, let yr be y.\n        let yr;\n        if (!isNaN(y) && To.ToInteger(realm, y) >= 0 && To.ToInteger(realm, y) <= 99) {\n          yr = 1900 + To.ToInteger(realm, new NumberValue(realm, y));\n        } else {\n          yr = y;\n        }\n\n        // i. Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).\n        let finalDate = MakeDate(realm, MakeDay(realm, yr, m, dt), MakeTime(realm, h, min, s, milli));\n\n        // j. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", « [[DateValue]] »).\n        let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // k. Set the [[DateValue]] internal slot of O to TimeClip(UTC(finalDate)).\n        O.$DateValue = TimeClip(realm, UTC(realm, finalDate));\n\n        // l. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    } else if (argCount === 1) {\n      // ECMA262 20.3.2.2\n      let [value_] = args;\n      let value = value_.throwIfNotConcrete();\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 1.\n      invariant(numberOfArgs === 1, \"expected number of arguments to equal 1\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        let tv;\n\n        // a. If Type(value) is Object and value has a [[DateValue]] internal slot, then\n        if (value instanceof ObjectValue && value.$DateValue !== undefined) {\n          // i. Let tv be thisTimeValue(value).\n          tv = thisTimeValue(realm, value);\n        } else {\n          // b. Else,\n          // i. Let v be ? ToPrimitive(value)\n          let v = To.ToPrimitive(realm, value);\n\n          // ii. If Type(v) is String, then\n          if (v instanceof StringValue) {\n            // 1. Let tv be the result of parsing v as a date, in exactly the same manner as for the parse\n            //    method (20.3.3.2). If the parse resulted in an abrupt completion, tv is the Completion Record.\n            tv = new NumberValue(realm, new Date(v.value).getTime());\n\n            // 2. ReturnIfAbrupt(tv).\n          } else {\n            // iii. Else,\n            // 1. Let tv be ? ToNumber(v).\n            tv = new NumberValue(realm, To.ToNumber(realm, v));\n          }\n        }\n\n        // c. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", « [[DateValue]] »).\n        let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // d. Set the [[DateValue]] internal slot of O to TimeClip(tv).\n        O.$DateValue = TimeClip(realm, tv);\n\n        // e. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    } else {\n      // ECMA262 20.3.2.3\n\n      // 1. Let numberOfArgs be the number of arguments passed to this function call.\n      let numberOfArgs = argCount;\n\n      // 2. Assert: numberOfArgs = 0.\n      invariant(numberOfArgs === 0, \"expected zero arguments\");\n\n      // 3. If NewTarget is not undefined, then\n      if (NewTarget) {\n        // a. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DatePrototype%\", « [[DateValue]] »).\n        let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DatePrototype\", { $DateValue: undefined });\n\n        // b. Set the [[DateValue]] internal slot of O to the time value (UTC) identifying the current time.\n        O.$DateValue = getCurrentTime();\n\n        // c. Return O.\n        return O;\n      } else {\n        // 4. Else,\n        // a. Let now be the Number that is the time value (UTC) identifying the current time.\n        let now = getCurrentTime().throwIfNotConcreteNumber().value;\n\n        // b. Return ToDateString(now).\n        return new StringValue(realm, ToDateString(realm, now));\n      }\n    }\n  });\n\n  // ECMA262 20.3.3.1\n  func.defineNativeMethod(\"now\", 0, context => {\n    return getCurrentTime();\n  });\n\n  // ECMA262 20.3.3.2\n  func.defineNativeMethod(\"parse\", 1, (context, [string]) => {\n    if (realm.useAbstractInterpretation) {\n      AbstractValue.reportIntrospectionError(string);\n      throw new FatalError();\n    } else {\n      const parsedDate = Date.parse(string.value);\n      return new NumberValue(realm, parsedDate);\n    }\n  });\n\n  // ECMA262 20.3.3.4\n  func.defineNativeMethod(\"UTC\", 7, (context, [year, month, date, hours, minutes, seconds, ms], argCount) => {\n    // 1. Let y be ? ToNumber(year).\n    let y = To.ToNumber(realm, year);\n\n    // 2. Let m be ? ToNumber(month).\n    let m = argCount >= 2 ? To.ToNumber(realm, month) : 0;\n\n    // 3. If date is supplied, let dt be ? ToNumber(date); else let dt be 1.\n    let dt = argCount >= 3 ? To.ToNumber(realm, date) : 1;\n\n    // 4. If hours is supplied, let h be ? ToNumber(hours); else let h be 0.\n    let h = argCount >= 4 ? To.ToNumber(realm, hours) : 0;\n\n    // 5. If minutes is supplied, let min be ? ToNumber(minutes); else let min be 0.\n    let min = argCount >= 5 ? To.ToNumber(realm, minutes) : 0;\n\n    // 6. If seconds is supplied, let s be ? ToNumber(seconds); else let s be 0.\n    let s = argCount >= 6 ? To.ToNumber(realm, seconds) : 0;\n\n    // 7. If ms is supplied, let milli be ? ToNumber(ms); else let milli be 0.\n    let milli = argCount >= 7 ? To.ToNumber(realm, ms) : 0;\n\n    // 8. If y is not NaN and 0 ≤ ToInteger(y) ≤ 99, let yr be 1900+ToInteger(y); otherwise, let yr be y.\n    let yr =\n      !isNaN(y) && To.ToInteger(realm, y) >= 0 && To.ToInteger(realm, y) <= 99 ? 1900 + To.ToInteger(realm, y) : y;\n\n    // 9. Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).\n    return TimeClip(realm, MakeDate(realm, MakeDay(realm, yr, m, dt), MakeTime(realm, h, min, s, milli)));\n  });\n\n  return func;\n}\n"]}