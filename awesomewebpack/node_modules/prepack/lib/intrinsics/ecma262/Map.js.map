{"version":3,"sources":["../../../src/intrinsics/ecma262/Map.js"],"names":["realm","func","context","_iterable","argCount","NewTarget","iterable","createErrorThrowCompletion","intrinsics","TypeError","map","OrdinaryCreateFromConstructor","$MapData","undefined","isCompatibleWith","MOBILE_JSC_VERSION","iter","adder","next","nextItem","mightNotBeObject","mightBeObject","throwIfNotConcrete","error","k","kCompletion","v","vCompletion","status","statusCompletion","defineNativeGetter","SymbolSpecies"],"mappings":"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","file":"Map.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport {\n  AbstractObjectValue,\n  ObjectValue,\n  NativeFunctionValue,\n  NullValue,\n  UndefinedValue,\n} from \"../../values/index.js\";\nimport { AbruptCompletion } from \"../../completions.js\";\nimport {\n  Get,\n  IsCallable,\n  IteratorStep,\n  IteratorClose,\n  IteratorValue,\n  GetIterator,\n  Call,\n  HasSomeCompatibleType,\n} from \"../../methods/index.js\";\nimport { Create } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  let func = new NativeFunctionValue(realm, \"Map\", \"Map\", 0, (context, [_iterable], argCount, NewTarget) => {\n    let iterable = _iterable;\n    // 1. If NewTarget is undefined, throw a TypeError exception.\n    if (!NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let map be ? OrdinaryCreateFromConstructor(NewTarget, \"%MapPrototype%\", « [[MapData]] »).\n    let map = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"MapPrototype\", {\n      $MapData: undefined,\n    });\n\n    // 3. Set map's [[MapData]] internal slot to a new empty List.\n    map.$MapData = [];\n\n    // 4. If iterable is not present, let iterable be undefined.\n    if (iterable && realm.isCompatibleWith(realm.MOBILE_JSC_VERSION)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"the map constructor doesn't take arguments\");\n    }\n    if (!iterable) iterable = realm.intrinsics.undefined;\n\n    // 5. If iterable is either undefined or null, let iter be undefined.\n    let iter, adder;\n    if (HasSomeCompatibleType(iterable, NullValue, UndefinedValue)) {\n      adder = realm.intrinsics.undefined;\n      iter = realm.intrinsics.undefined;\n    } else {\n      // 6. Else,\n      // a. Let adder be ? Get(map, \"set\").\n      adder = Get(realm, map, \"set\");\n\n      // b. If IsCallable(adder) is false, throw a TypeError exception.\n      if (!IsCallable(realm, adder)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // c. Let iter be ? GetIterator(iterable).\n      iter = GetIterator(realm, iterable);\n    }\n\n    // 7. If iter is undefined, return map.\n    if (iter instanceof UndefinedValue) return map;\n\n    // 8. Repeat\n    while (true) {\n      // a. Let next be ? IteratorStep(iter).\n      let next = IteratorStep(realm, iter);\n\n      // b. If next is false, return map.\n      if (!next) return map;\n\n      // c. Let nextItem be ? IteratorValue(next).\n      let nextItem = IteratorValue(realm, next);\n\n      // d. If Type(nextItem) is not Object, then\n      if (nextItem.mightNotBeObject()) {\n        if (nextItem.mightBeObject()) nextItem.throwIfNotConcrete();\n        // i. Let error be Completion{[[Type]]: throw, [[Value]]: a newly created TypeError object, [[Target]]: empty}.\n        let error = realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n\n        // ii. Return ? IteratorClose(iter, error).\n        throw IteratorClose(realm, iter, error);\n      }\n      invariant(nextItem instanceof ObjectValue || nextItem instanceof AbstractObjectValue);\n\n      // e. Let k be Get(nextItem, \"0\").\n      let k;\n      try {\n        k = Get(realm, nextItem, \"0\");\n      } catch (kCompletion) {\n        if (kCompletion instanceof AbruptCompletion) {\n          // f. If k is an abrupt completion, return ? IteratorClose(iter, k).\n          throw IteratorClose(realm, iter, kCompletion);\n        } else throw kCompletion;\n      }\n\n      // g. Let v be Get(nextItem, \"1\").\n      let v;\n      try {\n        v = Get(realm, nextItem, \"1\");\n      } catch (vCompletion) {\n        if (vCompletion instanceof AbruptCompletion) {\n          // h. If v is an abrupt completion, return ? IteratorClose(iter, v).\n          throw IteratorClose(realm, iter, vCompletion);\n        } else throw vCompletion;\n      }\n\n      // i. Let status be Call(adder, map, « k.[[Value]], v.[[Value]] »).\n      let status;\n      try {\n        status = Call(realm, adder, map, [k, v]);\n      } catch (statusCompletion) {\n        if (statusCompletion instanceof AbruptCompletion) {\n          // j. If status is an abrupt completion, return ? IteratorClose(iter, status).\n          throw IteratorClose(realm, iter, statusCompletion);\n        } else throw statusCompletion;\n      }\n      status;\n    }\n\n    invariant(false);\n  });\n\n  // ECMA262 23.1.2.2\n  func.defineNativeGetter(realm.intrinsics.SymbolSpecies, context => {\n    // 1. Return the this value\n    return context;\n  });\n\n  return func;\n}\n"]}