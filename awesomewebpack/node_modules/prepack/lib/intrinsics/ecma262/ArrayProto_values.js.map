{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayProto_values.js"],"names":["realm","context","O","ToObject","isIntrinsicAndHasWidenedNumericProperty","isInPureScope","$GetOwnProperty","undefined","createTemporalFromBuildFunction","objNode","t","callExpression","memberExpression","identifier","CreateArrayIterator","throwIfNotConcreteObject"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BAAwBA,KAAxB,EAA+B,wBAA/B,EAAyD,QAAzD,EAAmE,CAAnE,EAAsEC,WAAW;AACtF;AACA,QAAIC,IAAI,eAAGC,QAAH,CAAYH,KAAZ,EAAmBC,OAAnB,CAAR;;AAEA;AACA;AACA;AACA,QACE,kBAAWG,uCAAX,CAAmDF,CAAnD,KACAF,MAAMK,aAAN,EADA,IAEAH,EAAEI,eAAF,CAAkB,QAAlB,MAAgCC,SAHlC,EAIE;AACA,aAAO,qBAAcC,+BAAd,CAA8CR,KAA9C,gBAA4D,CAACE,CAAD,CAA5D,EAAiE,CAAC,CAACO,OAAD,CAAD,KACtEC,EAAEC,cAAF,CAAiBD,EAAEE,gBAAF,CAAmBH,OAAnB,EAA4BC,EAAEG,UAAF,CAAa,QAAb,CAA5B,CAAjB,EAAsE,EAAtE,CADK,CAAP;AAGD;;AAED;AACA,WAAO,mBAAOC,mBAAP,CAA2Bd,KAA3B,EAAkCE,EAAEa,wBAAF,EAAlC,EAAgE,OAAhE,CAAP;AACD,GAnBM,CAAP;AAoBD,C;;AA1BD;;AACA;;AACA;;IAAYL,C","file":"ArrayProto_values.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ArrayValue, NativeFunctionValue, Value } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport * as t from \"babel-types\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(realm, \"Array.prototype.values\", \"values\", 0, context => {\n    // 1. Let O be ? ToObject(this value).\n    let O = To.ToObject(realm, context);\n\n    // If we have an object that is an unknown array with numeric properties, then\n    // we can return a temporal here as we know nothing of the array's properties.\n    // This should be safe to do, as we never expose the internals of the array.\n    if (\n      ArrayValue.isIntrinsicAndHasWidenedNumericProperty(O) &&\n      realm.isInPureScope() &&\n      O.$GetOwnProperty(\"values\") === undefined\n    ) {\n      return AbstractValue.createTemporalFromBuildFunction(realm, Value, [O], ([objNode]) =>\n        t.callExpression(t.memberExpression(objNode, t.identifier(\"values\")), [])\n      );\n    }\n\n    // 2. Return CreateArrayIterator(O, \"value\").\n    return Create.CreateArrayIterator(realm, O.throwIfNotConcreteObject(), \"value\");\n  });\n}\n"]}