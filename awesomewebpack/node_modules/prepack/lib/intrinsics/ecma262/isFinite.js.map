{"version":3,"sources":["../../../src/intrinsics/ecma262/isFinite.js"],"names":["realm","context","number","num","ToNumber","isNaN","Infinity","intrinsics","false","true"],"mappings":";;;;;;kBAee,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BACLA,KADK,EAEL,UAFK,EAGL,UAHK,EAIL,CAJK,EAKL,CAACC,OAAD,EAAU,CAACC,MAAD,CAAV,KAAuB;AACrB;AACA,QAAIC,MAAM,eAAGC,QAAH,CAAYJ,KAAZ,EAAmBE,MAAnB,CAAV;;AAEA;AACA,QAAIG,MAAMF,GAAN,KAAcA,QAAQ,CAACG,QAAvB,IAAmCH,QAAQ,CAACG,QAAhD,EAA0D,OAAON,MAAMO,UAAN,CAAiBC,KAAxB;;AAE1D;AACA,WAAOR,MAAMO,UAAN,CAAiBE,IAAxB;AACD,GAdI,EAeL,KAfK,CAAP;AAiBD,C;;AAtBD;;AACA","file":"isFinite.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 18.2.2\n  return new NativeFunctionValue(\n    realm,\n    \"isFinite\",\n    \"isFinite\",\n    1,\n    (context, [number]) => {\n      // 1. Let num be ? ToNumber(number).\n      let num = To.ToNumber(realm, number);\n\n      // 2. If num is NaN, +∞, or -∞, return false.\n      if (isNaN(num) || num === +Infinity || num === -Infinity) return realm.intrinsics.false;\n\n      // 3. Otherwise, return true.\n      return realm.intrinsics.true;\n    },\n    false\n  );\n}\n"]}