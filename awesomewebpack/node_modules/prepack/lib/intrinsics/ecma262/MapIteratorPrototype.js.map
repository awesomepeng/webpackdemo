{"version":3,"sources":["../../../src/intrinsics/ecma262/MapIteratorPrototype.js"],"names":["realm","obj","defineNativeMethod","context","O","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","$Map","undefined","$MapNextIndex","$MapIterationKind","m","index","value","itemKind","CreateIterResultObject","$MapData","entries","length","e","$Key","$Value","result","CreateArrayFromList","defineNativeProperty","SymbolToStringTag","writable"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,MAAIC,kBAAJ,CAAuB,MAAvB,EAA+B,CAA/B,EAAkCC,WAAW;AAC3C;AACA,QAAIC,IAAID,QAAQE,kBAAR,EAAR;;AAEA;AACA,QAAI,EAAED,+BAAF,CAAJ,EAAiC;AAC/B,YAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,eAA7D,CAAN;AACD;;AAED;AACA,QAAIJ,EAAEK,IAAF,KAAWC,SAAX,IAAwBN,EAAEO,aAAF,KAAoBD,SAA5C,IAAyDN,EAAEQ,iBAAF,KAAwBF,SAArF,EAAgG;AAC9F,YAAMV,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,yCAA7D,CAAN;AACD;;AAED;AACA,QAAIK,IAAIT,EAAEK,IAAV;;AAEA;AACA,QAAIK,QAAQV,EAAEO,aAAF,CAAgBI,KAA5B;;AAEA;AACA,QAAIC,WAAWZ,EAAEQ,iBAAjB;;AAEA;AACA,QAAI,CAACC,CAAD,IAAMA,kCAAV,EACE,OAAO,mBAAOI,sBAAP,CAA8BjB,KAA9B,EAAqCA,MAAMO,UAAN,CAAiBG,SAAtD,EAAiE,IAAjE,CAAP;AACF,6BAAUG,+BAAV;;AAEA;AACA,6BAAUA,EAAEK,QAAZ,EAAsB,mCAAtB;;AAEA;AACA,QAAIC,UAAUN,EAAEK,QAAhB;AACA,6BAAUC,OAAV;;AAEA;AACA,WAAOL,QAAQK,QAAQC,MAAvB,EAA+B;AAC7B;AACA,UAAIC,IAAIF,QAAQL,KAAR,CAAR;;AAEA;AACAA,cAAQA,QAAQ,CAAhB;;AAEA;AACAV,QAAEO,aAAF,GAAkB,uBAAgBX,KAAhB,EAAuBc,KAAvB,CAAlB;;AAEA;AACA,UAAIO,EAAEC,IAAF,KAAWZ,SAAf,EAA0B;AACxB,iCAAUW,EAAEE,MAAF,KAAab,SAAvB;;AAEA,YAAIc,MAAJ;AACA;AACA,YAAIR,aAAa,KAAjB,EAAwBQ,SAASH,EAAEC,IAAX,CAAxB,KACK,IAAIN,aAAa,OAAjB;AACH;AACAQ,mBAASH,EAAEE,MAAX,CAFG,KAGA;AACH;AACA;AACA,mCAAUP,aAAa,WAAvB;;AAEA;AACAQ,mBAAS,mBAAOC,mBAAP,CAA2BzB,KAA3B,EAAkC,CAACqB,EAAEC,IAAH,EAASD,EAAEE,MAAX,CAAlC,CAAT;AACD;;AAED;AACA,eAAO,mBAAON,sBAAP,CAA8BjB,KAA9B,EAAqCwB,MAArC,EAA6C,KAA7C,CAAP;AACD;AACF;;AAED;AACApB,MAAEK,IAAF,GAAST,MAAMO,UAAN,CAAiBG,SAA1B;;AAEA;AACA,WAAO,mBAAOO,sBAAP,CAA8BjB,KAA9B,EAAqCA,MAAMO,UAAN,CAAiBG,SAAtD,EAAiE,IAAjE,CAAP;AACD,GA3ED;;AA6EA;AACAT,MAAIyB,oBAAJ,CAAyB1B,MAAMO,UAAN,CAAiBoB,iBAA1C,EAA6D,uBAAgB3B,KAAhB,EAAuB,cAAvB,CAA7D,EAAqG;AACnG4B,cAAU;AADyF,GAArG;AAGD,C;;AAvFD;;AACA;;AACA","file":"MapIteratorPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, NumberValue, ObjectValue, UndefinedValue } from \"../../values/index.js\";\nimport { Create } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.1.5.2.1\n  obj.defineNativeMethod(\"next\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an object\");\n    }\n\n    // 3. If O does not have all of the internal slots of a Set Iterator Instance (23.2.5.3), throw a TypeError exception.\n    if (O.$Map === undefined || O.$MapNextIndex === undefined || O.$MapIterationKind === undefined) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"MapIteratorPrototype.next isn't generic\");\n    }\n\n    // 4. Let m be O.[[Map]].\n    let m = O.$Map;\n\n    // 5. Let index be O.[[MapNextIndex]].\n    let index = O.$MapNextIndex.value;\n\n    // 6. Let itemKind be O.[[MapIterationKind]].\n    let itemKind = O.$MapIterationKind;\n\n    // 7. If m is undefined, return CreateIterResultObject(undefined, true).\n    if (!m || m instanceof UndefinedValue)\n      return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    invariant(m instanceof ObjectValue);\n\n    // 8. Assert: m has a [[MapData]] internal slot.\n    invariant(m.$MapData, \"m has a [[MapData]] internal slot\");\n\n    // 9. Let entries be the List that is m.[[MapData]].\n    let entries = m.$MapData;\n    invariant(entries);\n\n    // 10. Repeat while index is less than the total number of elements of entries. The number of elements must be redetermined each time this method is evaluated.\n    while (index < entries.length) {\n      // a. Let e be the Record {[[Key]], [[Value]]} that is the value of entries[index].\n      let e = entries[index];\n\n      // b. Set index to index+1.\n      index = index + 1;\n\n      // c. Set O.[[MapNextIndex]] to index.\n      O.$MapNextIndex = new NumberValue(realm, index);\n\n      // d. If e.[[Key]] is not empty, then\n      if (e.$Key !== undefined) {\n        invariant(e.$Value !== undefined);\n\n        let result;\n        // i. If itemKind is \"key\", let result be e.[[Key]].\n        if (itemKind === \"key\") result = e.$Key;\n        else if (itemKind === \"value\")\n          // ii. Else if itemKind is \"value\", let result be e.[[Value]].\n          result = e.$Value;\n        else {\n          // iii. Else,\n          // 1. Assert: itemKind is \"key+value\".\n          invariant(itemKind === \"key+value\");\n\n          // 2. Let result be CreateArrayFromList(« e.[[Key]], e.[[Value]] »).\n          result = Create.CreateArrayFromList(realm, [e.$Key, e.$Value]);\n        }\n\n        // iv. Return CreateIterResultObject(result, false).\n        return Create.CreateIterResultObject(realm, result, false);\n      }\n    }\n\n    // 11. Set O.[[Map]] to undefined.\n    O.$Map = realm.intrinsics.undefined;\n\n    // 12. Return CreateIterResultObject(undefined, true).\n    return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n  });\n\n  // ECMA262 23.1.5.2.2\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Map Iterator\"), {\n    writable: false,\n  });\n}\n"]}