{"version":3,"sources":["../../../src/intrinsics/ecma262/DataView.js"],"names":["realm","func","context","_buffer","byteOffset","byteLength","argCount","NewTarget","buffer","createErrorThrowCompletion","intrinsics","TypeError","throwIfNotConcrete","offset","ToIndexPartial","bufferByteLength","$ArrayBufferByteLength","RangeError","viewByteLength","O","OrdinaryCreateFromConstructor","$DataView","undefined","$ViewedArrayBuffer","$ByteLength","$ByteOffset"],"mappings":";;;;;;kBAiBe,UAASA,KAAT,EAA4C;AACzD;AACA,MAAIC,OAAO,gCACTD,KADS,EAET,UAFS,EAGT,UAHS,EAIT,CAJS,EAKT,CAACE,OAAD,EAAU,CAACC,OAAD,EAAUC,UAAV,EAAsBC,UAAtB,CAAV,EAA6CC,QAA7C,EAAuDC,SAAvD,KAAqE;AACnE,QAAIC,SAASL,OAAb;AACA;AACA,QAAI,CAACI,SAAL,EAAgB;AACd,YAAMP,MAAMS,0BAAN,CAAiCT,MAAMU,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAEDH,aAASA,OAAOI,kBAAP,EAAT;AACA;AACA,QAAI,EAAEJ,qCAAF,CAAJ,EAAsC;AACpC,YAAMR,MAAMS,0BAAN,CAAiCT,MAAMU,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,EAAE,sBAAsBH,MAAxB,CAAJ,EAAqC;AACnC,YAAMR,MAAMS,0BAAN,CAAiCT,MAAMU,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAIE,SAAS,eAAGC,cAAH,CAAkBd,KAAlB,EAAyBI,UAAzB,CAAb;;AAEA;AACA,QAAI,6BAAiBJ,KAAjB,EAAwBQ,MAAxB,CAAJ,EAAqC;AACnC,YAAMR,MAAMS,0BAAN,CAAiCT,MAAMU,UAAN,CAAiBC,SAAlD,CAAN;AACD;;AAED;AACA,QAAII,mBAAmBP,OAAOQ,sBAA9B;AACA,6BAAU,OAAOD,gBAAP,KAA4B,QAAtC;;AAEA;AACA,QAAIF,SAASE,gBAAb,EAA+B;AAC7B,YAAMf,MAAMS,0BAAN,CAAiCT,MAAMU,UAAN,CAAiBO,UAAlD,CAAN;AACD;;AAED;AACA,QAAIC,cAAJ;AACA,QAAI,CAACb,UAAD,IAAeA,4CAAnB,EAAyD;AACvD;AACAa,uBAAiBH,mBAAmBF,MAApC;AACD,KAHD,MAGO;AACL;AACA;AACAK,uBAAiB,eAAGJ,cAAH,CAAkBd,KAAlB,EAAyBK,UAAzB,CAAjB;;AAEA;AACA,UAAIQ,SAASK,cAAT,GAA0BH,gBAA9B,EAAgD;AAC9C,cAAMf,MAAMS,0BAAN,CAAiCT,MAAMU,UAAN,CAAiBO,UAAlD,CAAN;AACD;AACF;;AAED;AACA,QAAIE,IAAI,mBAAOC,6BAAP,CAAqCpB,KAArC,EAA4CO,SAA5C,EAAuD,mBAAvD,EAA4E;AAClFc,iBAAWC,SADuE;AAElFC,0BAAoBD,SAF8D;AAGlFE,mBAAaF,SAHqE;AAIlFG,mBAAaH;AAJqE,KAA5E,CAAR;;AAOA;AACAH,MAAEE,SAAF,GAAc,IAAd;;AAEA;AACAF,MAAEI,kBAAF,GAAuBf,MAAvB;;AAEA;AACAW,MAAEK,WAAF,GAAgBN,cAAhB;;AAEA;AACAC,MAAEM,WAAF,GAAgBZ,MAAhB;;AAEA;AACA,WAAOM,CAAP;AACD,GA9EQ,CAAX;;AAiFA,SAAOlB,IAAP;AACD,C;;AAzFD;;AACA;;AACA;;AACA","file":"DataView.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { IsDetachedBuffer } from \"../../methods/index.js\";\nimport { NativeFunctionValue, ObjectValue, UndefinedValue } from \"../../values/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 24.2.2.1\n  let func = new NativeFunctionValue(\n    realm,\n    \"DataView\",\n    \"DataView\",\n    3,\n    (context, [_buffer, byteOffset, byteLength], argCount, NewTarget) => {\n      let buffer = _buffer;\n      // 1. If NewTarget is undefined, throw a TypeError exception.\n      if (!NewTarget) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      buffer = buffer.throwIfNotConcrete();\n      // 2. If Type(buffer) is not Object, throw a TypeError exception.\n      if (!(buffer instanceof ObjectValue)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 3. If buffer does not have an [[ArrayBufferData]] internal slot, throw a TypeError exception.\n      if (!(\"$ArrayBufferData\" in buffer)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 4. Let offset be ? ToIndex(byteOffset).\n      let offset = To.ToIndexPartial(realm, byteOffset);\n\n      // 5. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n      if (IsDetachedBuffer(realm, buffer)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n      }\n\n      // 6. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]] internal slot.\n      let bufferByteLength = buffer.$ArrayBufferByteLength;\n      invariant(typeof bufferByteLength === \"number\");\n\n      // 7. If offset > bufferByteLength, throw a RangeError exception.\n      if (offset > bufferByteLength) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n      }\n\n      // 8. If byteLength is undefined, then\n      let viewByteLength;\n      if (!byteLength || byteLength instanceof UndefinedValue) {\n        // a. Let viewByteLength be bufferByteLength - offset.\n        viewByteLength = bufferByteLength - offset;\n      } else {\n        // 9. Else,\n        // a. Let viewByteLength be ? ToIndex(byteLength).\n        viewByteLength = To.ToIndexPartial(realm, byteLength);\n\n        // b. If offset+viewByteLength > bufferByteLength, throw a RangeError exception.\n        if (offset + viewByteLength > bufferByteLength) {\n          throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n        }\n      }\n\n      // 10. Let O be ? OrdinaryCreateFromConstructor(NewTarget, \"%DataViewPrototype%\", « [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]] »).\n      let O = Create.OrdinaryCreateFromConstructor(realm, NewTarget, \"DataViewPrototype\", {\n        $DataView: undefined,\n        $ViewedArrayBuffer: undefined,\n        $ByteLength: undefined,\n        $ByteOffset: undefined,\n      });\n\n      // 11. Set O's [[DataView]] internal slot to true.\n      O.$DataView = true;\n\n      // 12. Set O's [[ViewedArrayBuffer]] internal slot to buffer.\n      O.$ViewedArrayBuffer = buffer;\n\n      // 13. Set O's [[ByteLength]] internal slot to viewByteLength.\n      O.$ByteLength = viewByteLength;\n\n      // 14. Set O's [[ByteOffset]] internal slot to offset.\n      O.$ByteOffset = offset;\n\n      // 15. Return O.\n      return O;\n    }\n  );\n\n  return func;\n}\n"]}