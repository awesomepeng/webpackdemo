{"version":3,"sources":["../../../src/intrinsics/ecma262/ObjectProto_toString.js"],"names":["realm","context","O","ToObject","builtinTag","isArray","$StringData","undefined","$ParameterMap","$Call","$ErrorData","$BooleanData","$NumberData","$DateValue","$RegExpMatcher","tag","intrinsics","SymbolToStringTag","value"],"mappings":";;;;;;kBAiBe,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BACLA,KADK,EAEL,2BAFK,EAGL,UAHK,EAIL,CAJK,EAKLC,WAAW;AACT;AACA,QAAIA,wCAAJ,EAAuC,OAAO,uBAAgBD,KAAhB,EAAuB,oBAAvB,CAAP;;AAEvC;AACA,QAAIC,mCAAJ,EAAkC,OAAO,uBAAgBD,KAAhB,EAAuB,eAAvB,CAAP;;AAElC;AACA,QAAIE,IAAI,eAAGC,QAAH,CAAYH,KAAZ,EAAmBC,OAAnB,CAAR;;AAEA,QAAIG,UAAJ;;AAEA;AACA,QAAIC,UAAU,iBAAQL,KAAR,EAAeE,CAAf,CAAd;;AAEA;AACA,QAAIG,OAAJ,EAAaD,aAAa,OAAb,CAAb,KACK,IAAIF,EAAEI,WAAF,KAAkBC,SAAtB;AACH;AACAH,mBAAa,QAAb,CAFG,KAGA,IAAIF,EAAEM,aAAF,KAAoBD,SAAxB;AACH;AACAH,mBAAa,WAAb,CAFG,KAGA,IAAIF,EAAEO,KAAF,KAAYF,SAAhB;AACH;AACAH,mBAAa,UAAb,CAFG,KAGA,IAAIF,EAAEQ,UAAF,KAAiBH,SAArB;AACH;AACAH,mBAAa,OAAb,CAFG,KAGA,IAAIF,EAAES,YAAF,KAAmBJ,SAAvB;AACH;AACAH,mBAAa,SAAb,CAFG,KAGA,IAAIF,EAAEU,WAAF,KAAkBL,SAAtB;AACH;AACAH,mBAAa,QAAb,CAFG,KAGA,IAAIF,EAAEW,UAAF,KAAiBN,SAArB;AACH;AACAH,mBAAa,MAAb,CAFG,KAGA,IAAIF,EAAEY,cAAF,KAAqBP,SAAzB;AACH;AACAH,mBAAa,QAAb,CAFG,KAGA;AACH;AACAA,mBAAa,QAAb;AACD;AACD;AACA,QAAIW,MAAM,cAAIf,KAAJ,EAAWE,CAAX,EAAcF,MAAMgB,UAAN,CAAiBC,iBAA/B,CAAV;;AAEA;AACAF,UAAMA,oCAA6BA,IAAIG,KAAjC,GAAyCd,UAA/C;;AAEA;AACA,WAAO,uBAAgBJ,KAAhB,EAAwB,WAAUe,GAAI,GAAtC,CAAP;AACD,GA1DI,EA2DL,KA3DK,CAAP;AA6DD,C;;AApED;;AACA;;AACA;;AACA","file":"ObjectProto_toString.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, UndefinedValue, StringValue, NullValue } from \"../../values/index.js\";\nimport { IsArray } from \"../../methods/is.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(\n    realm,\n    \"Object.prototype.toString\",\n    \"toString\",\n    0,\n    context => {\n      // 1. If the this value is undefined, return \"[object Undefined]\".\n      if (context instanceof UndefinedValue) return new StringValue(realm, \"[object Undefined]\");\n\n      // 2. If the this value is null, return \"[object Null]\".\n      if (context instanceof NullValue) return new StringValue(realm, \"[object Null]\");\n\n      // 3. Let O be ToObject(this value).\n      let O = To.ToObject(realm, context);\n\n      let builtinTag;\n\n      // 4. Let isArray be ? IsArray(O).\n      let isArray = IsArray(realm, O);\n\n      // 5. If isArray is true, let builtinTag be \"Array\".\n      if (isArray) builtinTag = \"Array\";\n      else if (O.$StringData !== undefined)\n        // 6. Else, if O is an exotic String object, let builtinTag be \"String\".\n        builtinTag = \"String\";\n      else if (O.$ParameterMap !== undefined)\n        // 7. Else, if O has an [[ParameterMap]] internal slot, let builtinTag be \"Arguments\".\n        builtinTag = \"Arguments\";\n      else if (O.$Call !== undefined)\n        // 8. Else, if O has a [[Call]] internal method, let builtinTag be \"Function\".\n        builtinTag = \"Function\";\n      else if (O.$ErrorData !== undefined)\n        // 9. Else, if O has an [[ErrorData]] internal slot, let builtinTag be \"Error\".\n        builtinTag = \"Error\";\n      else if (O.$BooleanData !== undefined)\n        // 10. Else, if O has a [[BooleanData]] internal slot, let builtinTag be \"Boolean\".\n        builtinTag = \"Boolean\";\n      else if (O.$NumberData !== undefined)\n        // 11. Else, if O has a [[NumberData]] internal slot, let builtinTag be \"Number\".\n        builtinTag = \"Number\";\n      else if (O.$DateValue !== undefined)\n        // 12. Else, if O has a [[DateValue]] internal slot, let builtinTag be \"Date\".\n        builtinTag = \"Date\";\n      else if (O.$RegExpMatcher !== undefined)\n        // 13. Else, if O has a [[RegExpMatcher]] internal slot, let builtinTag be \"RegExp\".\n        builtinTag = \"RegExp\";\n      else {\n        // 14. Else, let builtinTag be \"Object\".\n        builtinTag = \"Object\";\n      }\n      // 15. Let tag be ? Get(O, @@toStringTag).\n      let tag = Get(realm, O, realm.intrinsics.SymbolToStringTag);\n\n      // 16. If Type(tag) is not String, let tag be builtinTag.\n      tag = tag instanceof StringValue ? tag.value : builtinTag;\n\n      // 17. Return the String that is the result of concatenating \"[object \", tag, and \"]\".\n      return new StringValue(realm, `[object ${tag}]`);\n    },\n    false\n  );\n}\n"]}