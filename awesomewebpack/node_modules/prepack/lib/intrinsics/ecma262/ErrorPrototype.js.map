{"version":3,"sources":["../../../src/intrinsics/ecma262/ErrorPrototype.js"],"names":["realm","obj","build","name","defineNativeProperty","intrinsics","emptyString","defineNativeMethod","context","O","throwIfNotConcrete","createErrorThrowCompletion","TypeError","nameValue","nameString","ToStringPartial","msg"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D,SAAOC,MAAM,OAAN,EAAeF,KAAf,EAAsBC,GAAtB,CAAP;AACD,C;;QAEeC,K,GAAAA,K;;AARhB;;AACA;;AACA;;AAMO,SAASA,KAAT,CAAeC,IAAf,EAA6BH,KAA7B,EAA2CC,GAA3C,EAAmE;AACxE;AACAA,MAAIG,oBAAJ,CAAyB,SAAzB,EAAoCJ,MAAMK,UAAN,CAAiBC,WAArD;;AAEA;AACAL,MAAIG,oBAAJ,CAAyB,MAAzB,EAAiC,uBAAgBJ,KAAhB,EAAuBG,IAAvB,CAAjC;;AAEA;AACAF,MAAIM,kBAAJ,CAAuB,UAAvB,EAAmC,CAAnC,EAAsCC,WAAW;AAC/C;AACA,QAAIC,IAAID,QAAQE,kBAAR,EAAR;;AAEA;AACA,QAAI,EAAED,+BAAF,CAAJ,EAAiC;AAC/B,YAAMT,MAAMW,0BAAN,CAAiCX,MAAMK,UAAN,CAAiBO,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,YAAY,iBAAIb,KAAJ,EAAWS,CAAX,EAAc,MAAd,CAAhB;;AAEA;AACA,QAAIK,aAAaD,6CAAsC,OAAtC,GAAgD,eAAGE,eAAH,CAAmBf,KAAnB,EAA0Ba,SAA1B,CAAjE;;AAEA;AACA,QAAIG,MAAM,iBAAIhB,KAAJ,EAAWS,CAAX,EAAc,SAAd,CAAV;;AAEA;AACAO,UAAMA,uCAAgC,EAAhC,GAAqC,eAAGD,eAAH,CAAmBf,KAAnB,EAA0BgB,GAA1B,CAA3C;;AAEA;AACA;AACA;AACA,QAAIF,eAAe,EAAnB,EAAuB,OAAO,uBAAgBd,KAAhB,EAAuBgB,GAAvB,CAAP;;AAEvB;AACA,QAAIA,QAAQ,EAAZ,EAAgB,OAAO,uBAAgBhB,KAAhB,EAAuBc,UAAvB,CAAP;;AAEhB;AACA,WAAO,uBAAgBd,KAAhB,EAAwB,GAAEc,UAAW,KAAIE,GAAI,EAA7C,CAAP;AACD,GA/BD;AAgCD,C,CA5DD;;;;;;;;;AASA","file":"ErrorPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { ObjectValue, StringValue, UndefinedValue } from \"../../values/index.js\";\nimport { Get } from \"../../methods/index.js\";\nimport { To } from \"../../singletons.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  return build(\"Error\", realm, obj);\n}\n\nexport function build(name: string, realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.5.3.2\n  obj.defineNativeProperty(\"message\", realm.intrinsics.emptyString);\n\n  // ECMA262 19.5.3.3\n  obj.defineNativeProperty(\"name\", new StringValue(realm, name));\n\n  // ECMA262 19.5.3.4\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Let name be ? Get(O, \"name\").\n    let nameValue = Get(realm, O, \"name\");\n\n    // 4. If name is undefined, let name be \"Error\"; otherwise let name be ? ToString(name).\n    let nameString = nameValue instanceof UndefinedValue ? \"Error\" : To.ToStringPartial(realm, nameValue);\n\n    // 5. Let msg be ? Get(O, \"message\").\n    let msg = Get(realm, O, \"message\");\n\n    // 6. If msg is undefined, let msg be the empty String; otherwise let msg be ? ToString(msg).\n    msg = msg instanceof UndefinedValue ? \"\" : To.ToStringPartial(realm, msg);\n\n    // Note that in ES5, both name and msg are checked for emptiness in step 7,\n    // which however is later dropped in ES6.\n    // 7. If name is the empty String, return msg.\n    if (nameString === \"\") return new StringValue(realm, msg);\n\n    // 8. If msg is the empty String, return name.\n    if (msg === \"\") return new StringValue(realm, nameString);\n\n    // 9. Return the result of concatenating name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.\n    return new StringValue(realm, `${nameString}: ${msg}`);\n  });\n}\n"]}