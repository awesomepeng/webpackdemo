{"version":3,"sources":["../../../src/intrinsics/ecma262/Symbol.js"],"names":["realm","func","context","description","argCount","NewTarget","createErrorThrowCompletion","intrinsics","TypeError","descString","undefined","ToStringPartial","defineNativeMethod","key","stringKey","e","globalSymbolRegistry","$Key","value","$Symbol","newSymbol","push","sym","defineNativeConstant","SymbolIsConcatSpreadable","SymbolSpecies","SymbolReplace","SymbolIterator","SymbolHasInstance","SymbolToPrimitive","SymbolToStringTag","SymbolUnscopables","SymbolMatch","SymbolSplit","SymbolSearch"],"mappings":"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","file":"Symbol.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, NativeFunctionValue, StringValue, SymbolValue, UndefinedValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { SameValue } from \"../../methods/abstract.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 19.4.1.1\n  let func = new NativeFunctionValue(realm, \"Symbol\", \"Symbol\", 0, (context, [description], argCount, NewTarget) => {\n    // 1. If NewTarget is not undefined, throw a TypeError exception.\n    if (NewTarget) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If description is undefined, let descString be undefined.\n    let descString;\n    if (!description || description instanceof UndefinedValue) {\n      descString = undefined;\n    } else if (description instanceof AbstractValue) {\n      descString = description;\n    } else {\n      // 3. Else, let descString be ? ToString(description).\n      descString = To.ToStringPartial(realm, description);\n      descString = new StringValue(realm, descString);\n    }\n    // 4. Return a new unique Symbol value whose [[Description]] value is descString.\n    return new SymbolValue(realm, descString);\n  });\n\n  // ECMA262 19.4.2.1\n  func.defineNativeMethod(\"for\", 1, (context, [key]) => {\n    // 1. Let stringKey be ? ToString(key).\n    let stringKey = To.ToStringPartial(realm, key);\n    stringKey = new StringValue(realm, stringKey);\n\n    // 2. For each element e of the GlobalSymbolRegistry List,\n    for (let e of realm.globalSymbolRegistry) {\n      // a. If SameValue(e.[[Key]], stringKey) is true, return e.[[Symbol]].\n      if (e.$Key === stringKey.value) {\n        return e.$Symbol;\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey.\n\n    // 4. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey.\n    let newSymbol = new SymbolValue(realm, stringKey);\n\n    // 5. Append the Record { [[Key]]: stringKey, [[Symbol]]: newSymbol } to the GlobalSymbolRegistry List.\n    realm.globalSymbolRegistry.push({ $Key: stringKey.value, $Symbol: newSymbol });\n\n    // 6. Return newSymbol.\n    return newSymbol;\n  });\n\n  // ECMA262 19.4.2.2\n  func.defineNativeMethod(\"keyFor\", 1, (context, [sym]) => {\n    // 1. If Type(sym) is not Symbol, throw a TypeError exception.\n    if (!(sym instanceof SymbolValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"Type(sym) is not Symbol\");\n    }\n\n    // 2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1),\n    for (let e of realm.globalSymbolRegistry) {\n      // a. If SameValue(e.[[Symbol]], sym) is true, return e.[[Key]].\n      if (SameValue(realm, e.$Symbol, sym) === true) {\n        return new StringValue(realm, e.$Key);\n      }\n    }\n\n    // 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym.\n\n    // 4. Return undefined.\n    return realm.intrinsics.undefined;\n  });\n\n  // ECMA262 19.4.2.3\n  func.defineNativeConstant(\"isConcatSpreadable\", realm.intrinsics.SymbolIsConcatSpreadable);\n\n  // ECMA262 19.4.2.10\n  func.defineNativeConstant(\"species\", realm.intrinsics.SymbolSpecies);\n\n  // ECMA262 19.4.2.8\n  func.defineNativeConstant(\"replace\", realm.intrinsics.SymbolReplace);\n\n  // ECMA262 19.4.2.4\n  func.defineNativeConstant(\"iterator\", realm.intrinsics.SymbolIterator);\n\n  // ECMA262 19.4.2.2\n  func.defineNativeConstant(\"hasInstance\", realm.intrinsics.SymbolHasInstance);\n\n  // ECMA262 19.4.2.12\n  func.defineNativeConstant(\"toPrimitive\", realm.intrinsics.SymbolToPrimitive);\n\n  // ECMA262 19.4.2.13\n  func.defineNativeConstant(\"toStringTag\", realm.intrinsics.SymbolToStringTag);\n\n  // ECMA262 19.4.2.14\n  func.defineNativeConstant(\"unscopables\", realm.intrinsics.SymbolUnscopables);\n\n  // ECMA262 19.4.2.6\n  func.defineNativeConstant(\"match\", realm.intrinsics.SymbolMatch);\n\n  // ECMA262 19.4.2.11\n  func.defineNativeConstant(\"split\", realm.intrinsics.SymbolSplit);\n\n  // ECMA262 19.4.2.9\n  func.defineNativeConstant(\"search\", realm.intrinsics.SymbolSearch);\n\n  return func;\n}\n"]}