{"version":3,"sources":["../../../src/intrinsics/ecma262/SetIteratorPrototype.js"],"names":["realm","obj","defineNativeMethod","context","O","throwIfNotConcrete","createErrorThrowCompletion","intrinsics","TypeError","s","$IteratedSet","index","$SetNextIndex","itemKind","$SetIterationKind","CreateIterResultObject","undefined","$SetData","entries","length","e","CreateArrayFromList","defineNativeProperty","SymbolToStringTag","writable"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAuBC,GAAvB,EAA+C;AAC5D;AACAA,MAAIC,kBAAJ,CAAuB,MAAvB,EAA+B,CAA/B,EAAkCC,WAAW;AAC3C;AACA,QAAIC,IAAID,QAAQE,kBAAR,EAAR;;AAEA;AACA,QAAI,EAAED,+BAAF,CAAJ,EAAiC;AAC/B,YAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,eAA7D,CAAN;AACD;;AAED;AACA,QAAI,EAAE,kBAAkBJ,CAApB,KAA0B,EAAE,mBAAmBA,CAArB,CAA1B,IAAqD,EAAE,uBAAuBA,CAAzB,CAAzD,EAAsF;AACpF,YAAMJ,MAAMM,0BAAN,CAAiCN,MAAMO,UAAN,CAAiBC,SAAlD,EAA6D,yCAA7D,CAAN;AACD;;AAED;AACA,QAAIC,IAAIL,EAAEM,YAAV;;AAEA;AACA,QAAIC,QAAQP,EAAEQ,aAAd;AACA,6BAAU,OAAOD,KAAP,KAAiB,QAA3B;;AAEA;AACA,QAAIE,WAAWT,EAAEU,iBAAjB;;AAEA;AACA,QAAI,CAACL,CAAD,IAAMA,kCAAV,EACE,OAAO,mBAAOM,sBAAP,CAA8Bf,KAA9B,EAAqCA,MAAMO,UAAN,CAAiBS,SAAtD,EAAiE,IAAjE,CAAP;AACF,6BAAUP,+BAAV;;AAEA;AACA,6BAAUA,EAAEQ,QAAZ,EAAsB,mCAAtB;;AAEA;AACA,QAAIC,UAAUT,EAAEQ,QAAhB;AACA,6BAAUC,OAAV;;AAEA;AACA,WAAOP,QAAQO,QAAQC,MAAvB,EAA+B;AAC7B;AACA,UAAIC,IAAIF,QAAQP,KAAR,CAAR;;AAEA;AACAA,cAAQA,QAAQ,CAAhB;;AAEA;AACAP,QAAEQ,aAAF,GAAkBD,KAAlB;;AAEA;AACA,UAAIS,CAAJ,EAAO;AACL;AACA,YAAIP,aAAa,WAAjB,EAA8B;AAC5B;AACA,iBAAO,mBAAOE,sBAAP,CAA8Bf,KAA9B,EAAqC,mBAAOqB,mBAAP,CAA2BrB,KAA3B,EAAkC,CAACoB,CAAD,EAAIA,CAAJ,CAAlC,CAArC,EAAgF,KAAhF,CAAP;AACD;AACD;AACA,eAAO,mBAAOL,sBAAP,CAA8Bf,KAA9B,EAAqCoB,CAArC,EAAwC,KAAxC,CAAP;AACD;AACF;;AAED;AACAhB,MAAEM,YAAF,GAAiBV,MAAMO,UAAN,CAAiBS,SAAlC;;AAEA;AACA,WAAO,mBAAOD,sBAAP,CAA8Bf,KAA9B,EAAqCA,MAAMO,UAAN,CAAiBS,SAAtD,EAAiE,IAAjE,CAAP;AACD,GAhED;;AAkEA;AACAf,MAAIqB,oBAAJ,CAAyBtB,MAAMO,UAAN,CAAiBgB,iBAA1C,EAA6D,uBAAgBvB,KAAhB,EAAuB,cAAvB,CAA7D,EAAqG;AACnGwB,cAAU;AADyF,GAArG;AAGD,C;;AA5ED;;AACA;;AACA","file":"SetIteratorPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { StringValue, ObjectValue, UndefinedValue } from \"../../values/index.js\";\nimport { Create } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 23.2.5.2.1\n  obj.defineNativeMethod(\"next\", 0, context => {\n    // 1. Let O be the this value.\n    let O = context.throwIfNotConcrete();\n\n    // 2. If Type(O) is not Object, throw a TypeError exception.\n    if (!(O instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not an object\");\n    }\n\n    // 3. If O does not have all of the internal slots of a Set Iterator Instance (23.2.5.3), throw a TypeError exception.\n    if (!(\"$IteratedSet\" in O) || !(\"$SetNextIndex\" in O) || !(\"$SetIterationKind\" in O)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"SetIteratorPrototype.next isn't generic\");\n    }\n\n    // 4. Let s be O.[[IteratedSet]].\n    let s = O.$IteratedSet;\n\n    // 5. Let index be O.[[SetNextIndex]].\n    let index = O.$SetNextIndex;\n    invariant(typeof index === \"number\");\n\n    // 6. Let itemKind be O.[[SetIterationKind]].\n    let itemKind = O.$SetIterationKind;\n\n    // 7. If s is undefined, return CreateIterResultObject(undefined, true).\n    if (!s || s instanceof UndefinedValue)\n      return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n    invariant(s instanceof ObjectValue);\n\n    // 8. Assert: s has a [[SetData]] internal slot.\n    invariant(s.$SetData, \"s has a [[SetData]] internal slot\");\n\n    // 9. Let entries be the List that is s.[[SetData]].\n    let entries = s.$SetData;\n    invariant(entries);\n\n    // 10. Repeat while index is less than the total number of elements of entries. The number of elements must be redetermined each time this method is evaluated.\n    while (index < entries.length) {\n      // a. Let e be entries[index].\n      let e = entries[index];\n\n      // b. Set index to index+1.\n      index = index + 1;\n\n      // c. Set O.[[SetNextIndex]] to index.\n      O.$SetNextIndex = index;\n\n      // d. If e is not empty, then\n      if (e) {\n        // i. If itemKind is \"key+value\", then\n        if (itemKind === \"key+value\") {\n          // 1. Return CreateIterResultObject(CreateArrayFromList(« e, e »), false).\n          return Create.CreateIterResultObject(realm, Create.CreateArrayFromList(realm, [e, e]), false);\n        }\n        // ii. Return CreateIterResultObject(e, false).\n        return Create.CreateIterResultObject(realm, e, false);\n      }\n    }\n\n    // 11. Set O.[[IteratedSet]] to undefined.\n    O.$IteratedSet = realm.intrinsics.undefined;\n\n    // 12. Return CreateIterResultObject(undefined, true).\n    return Create.CreateIterResultObject(realm, realm.intrinsics.undefined, true);\n  });\n\n  // ECMA262 23.2.5.2.2\n  obj.defineNativeProperty(realm.intrinsics.SymbolToStringTag, new StringValue(realm, \"Set Iterator\"), {\n    writable: false,\n  });\n}\n"]}