{"version":3,"sources":["../../../src/intrinsics/ecma262/StringPrototype.js"],"names":["realm","obj","$StringData","intrinsics","emptyString","defineNativeProperty","zero","defineNativeMethod","context","pos","O","S","ToString","throwIfNotConcrete","position","ToInteger","size","length","charAt","NaN","charCodeAt","isCompatibleWith","MOBILE_JSC_VERSION","undefined","codePointAt","args","argCount","R","next","shift","nextString","ToStringPartial","searchString","endPosition","isRegExp","createErrorThrowCompletion","TypeError","searchStr","len","end","Math","min","max","searchLength","start","false","substr","true","searchLen","k","found","j","indexOf","numPos","ToNumber","isNaN","Infinity","lastIndexOf","that","That","localeCompare","regexp","matcher","SymbolMatch","mightBeUndefined","rx","form","f","RangeError","normalize","maxLength","fillString","intMaxLength","ToLength","stringLength","filler","fillLen","truncatedStringFiller","repeat","ceil","count","n","isFinite","T","searchValue","replaceValue","replStr","replacer","SymbolReplace","string","functionalReplace","replaceValueString","search","matched","replValue","captures","tailPos","newString","searcher","SymbolSearch","getType","createFromTemplate","sliceTemplate","sliceTemplateSrc","intStart","intEnd","from","to","span","separator","limit","splitTemplate","splitTemplateSrc","splitter","SymbolSplit","A","ArrayCreate","lengthA","lim","pow","ToUint32","s","p","CreateDataProperty","z","q","e","substring","finalStart","finalEnd","frm","slice","toCase","type","locales","serialize","useAbstractInterpretation","reportIntrospectionError","target","thisStringValue","trim","SymbolIterator","CreateStringIterator","resultLength","name","CreateHTML","color","url"],"mappings":"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","file":"StringPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm } from \"../../realm.js\";\nimport { FatalError } from \"../../errors.js\";\nimport { AbstractValue, UndefinedValue, NumberValue, ObjectValue, StringValue, NullValue } from \"../../values/index.js\";\nimport { IsCallable, IsRegExp } from \"../../methods/is.js\";\nimport { GetMethod, GetSubstitution } from \"../../methods/get.js\";\nimport { Call, Invoke } from \"../../methods/call.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { RegExpCreate } from \"../../methods/regexp.js\";\nimport { SplitMatch, RequireObjectCoercible } from \"../../methods/abstract.js\";\nimport { HasSomeCompatibleType } from \"../../methods/has.js\";\nimport invariant from \"../../invariant.js\";\nimport buildExpressionTemplate from \"../../utils/builder.js\";\n\nconst sliceTemplateSrc = \"(A).slice(B,C)\";\nconst sliceTemplate = buildExpressionTemplate(sliceTemplateSrc);\nconst splitTemplateSrc = \"(A).split(B,C)\";\nconst splitTemplate = buildExpressionTemplate(splitTemplateSrc);\n\nexport default function(realm: Realm, obj: ObjectValue): ObjectValue {\n  // ECMA262 21.1.3\n  obj.$StringData = realm.intrinsics.emptyString;\n\n  // ECMA262 21.1.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero);\n\n  // ECMA262 21.1.3.1\n  obj.defineNativeMethod(\"charAt\", 1, (context, [pos]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let position be ? ToInteger(pos).\n    let position = To.ToInteger(realm, pos);\n\n    // 4. Let size be the number of elements in S.\n    let size = S.length;\n\n    // 5. If position < 0 or position ≥ size, return the empty String.\n    if (position < 0 || position >= size) return realm.intrinsics.emptyString;\n\n    // 6. Return a String of length 1, containing one code unit from S, namely the code unit at index position.\n    return new StringValue(realm, S.charAt(position));\n  });\n\n  // ECMA262 21.1.3.2\n  obj.defineNativeMethod(\"charCodeAt\", 1, (context, [pos]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let position be ? ToInteger(pos).\n    let position = To.ToInteger(realm, pos);\n\n    // 4. Let size be the number of elements in S.\n    let size = S.length;\n\n    // 5. If position < 0 or position ≥ size, return NaN.\n    if (position < 0 || position >= size) return realm.intrinsics.NaN;\n\n    // 6. Return a value of Number type, whose value is the code unit value of the element at index position\n    //    in the String S.\n    return new NumberValue(realm, S.charCodeAt(position));\n  });\n\n  // ECMA262 21.1.3.3\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"codePointAt\", 1, (context, [pos]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let position be ? ToInteger(pos).\n      let position = To.ToInteger(realm, pos);\n\n      // 4. Let size be the number of elements in S.\n      let size = S.length;\n\n      // 5. If position < 0 or position ≥ size, return undefined.\n      if (position < 0 || position >= size) return realm.intrinsics.undefined;\n\n      // 6. Let first be the code unit value of the element at index position in the String S.\n      // 7. If first < 0xD800 or first > 0xDBFF or position+1 = size, return first.\n      // 8. Let second be the code unit value of the element at index position+1 in the String S.\n      // 9. If second < 0xDC00 or second > 0xDFFF, return first.\n      // 10. Return UTF16Decode(first, second).\n      return new NumberValue(realm, S.codePointAt(position));\n    });\n\n  // ECMA262 21.1.3.4\n  obj.defineNativeMethod(\"concat\", 1, (context, args, argCount) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let args be a List whose elements are the arguments passed to this function.\n    args = argCount === 0 ? [] : args;\n\n    // 4. Let R be S.\n    let R = S;\n\n    // 5. Repeat, while args is not empty\n    while (args.length) {\n      // a. Remove the first element from args and let next be the value of that element.\n      let next = args.shift();\n\n      // b. Let nextString be ? ToString(next).\n      let nextString = To.ToStringPartial(realm, next);\n\n      // c. Let R be the String value consisting of the code units of the previous value of R followed by the code units of nextString.\n      R = R + nextString;\n    }\n\n    // 6. Return R.\n    return new StringValue(realm, R);\n  });\n\n  // ECMA262 21.1.3.6\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"endsWith\", 1, (context, [searchString, endPosition]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let isRegExp be ? IsRegExp(searchString).\n      let isRegExp = IsRegExp(realm, searchString);\n\n      // 4. If isRegExp is true, throw a TypeError exception.\n      if (isRegExp) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"String.prototype\");\n      }\n\n      // 5. Let searchStr be ? ToString(searchString).\n      let searchStr = To.ToStringPartial(realm, searchString);\n\n      // 6. Let len be the number of elements in S.\n      let len = S.length;\n\n      // 7. If endPosition is undefined, let pos be len, else let pos be ? ToInteger(endPosition).)\n      let pos;\n      if (!endPosition || endPosition instanceof UndefinedValue) {\n        pos = len;\n      } else {\n        pos = To.ToInteger(realm, endPosition.throwIfNotConcrete());\n      }\n\n      // 8. Let end be min(max(pos, 0), len).\n      let end = Math.min(Math.max(pos, 0), len);\n\n      // 9. Let searchLength be the number of elements in searchStr.\n      let searchLength = searchStr.length;\n\n      // 10. Let start be end - searchLength.\n      let start = end - searchLength;\n\n      // 11. If start is less than 0, return false.\n      if (start < 0) return realm.intrinsics.false;\n\n      // 12. If the sequence of elements of S starting at start of length searchLength is the same as the full\n      //     element sequence of searchStr, return true.\n      if (S.substr(start, searchLength) === searchStr) return realm.intrinsics.true;\n\n      // 13. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 21.1.3.7\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"includes\", 1, (context, [searchString, position]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let isRegExp be ? IsRegExp(searchString).\n      let isRegExp = IsRegExp(realm, searchString);\n\n      // 4. If isRegExp is true, throw a TypeError exception.\n      if (isRegExp) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"String.prototype\");\n      }\n\n      // 5. Let searchStr be ? ToString(searchString).\n      let searchStr = To.ToStringPartial(realm, searchString);\n\n      // 6. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n      let pos = To.ToInteger(realm, position || realm.intrinsics.undefined);\n\n      // 7. Let len be the number of elements in S.\n      let len = S.length;\n\n      // 8. Let start be min(max(pos, 0), len).\n      let start = Math.min(Math.max(pos, 0), len);\n\n      // 9. Let searchLen be the number of elements in searchStr.\n      let searchLen = searchStr.length;\n\n      // 10. If there exists any integer k not smaller than start such that k + searchLen is not greater than\n      //     len, and for all nonnegative integers j less than searchLen, the code unit at index k+j of S is the\n      //     same as the code unit at index j of searchStr, return true; but if there is no such integer k,\n      //     return false.\n      if (searchLen === 0) {\n        return realm.intrinsics.true;\n      } else {\n        for (let k = start; k + searchLen <= len; ++k) {\n          let found = true;\n          for (let j = 0; j < searchLen; ++j) {\n            if (S.charCodeAt(k + j) !== searchStr.charCodeAt(j)) {\n              found = false;\n            }\n          }\n          if (found) return realm.intrinsics.true;\n        }\n        return realm.intrinsics.false;\n      }\n    });\n\n  // ECMA262 21.1.3.8\n  obj.defineNativeMethod(\"indexOf\", 1, (context, [searchString, position]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let searchStr be ? ToString(searchString).\n    let searchStr = To.ToStringPartial(realm, searchString);\n\n    // 4. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n    let pos = position ? To.ToInteger(realm, position) : 0;\n\n    // 5. Let len be the number of elements in S.\n    // 6. Let start be min(max(pos, 0), len).\n    // 7. Let searchLen be the number of elements in searchStr.\n    // 8. Return the smallest possible integer k not smaller than start such that k+searchLen is not greater\n    //    than len, and for all nonnegative integers j less than searchLen, the code unit at index k+j of S is\n    //    the same as the code unit at index j of searchStr; but if there is no such integer k, return the\n    //    value -1.\n    return new NumberValue(realm, S.indexOf(searchStr, pos));\n  });\n\n  // ECMA262 21.1.3.9\n  obj.defineNativeMethod(\"lastIndexOf\", 1, (context, [searchString, position]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let searchStr be ? ToString(searchString).\n    let searchStr = To.ToStringPartial(realm, searchString);\n\n    // 4. Let numPos be ? ToNumber(position). (If position is undefined, this step produces the value NaN.)\n    let numPos = To.ToNumber(realm, position || realm.intrinsics.undefined);\n\n    // 5. If numPos is NaN, let pos be +∞; otherwise, let pos be ToInteger(numPos).\n    let pos;\n    if (isNaN(numPos)) {\n      pos = Infinity;\n    } else {\n      pos = To.ToInteger(realm, numPos);\n    }\n\n    // 6. Let len be the number of elements in S.\n    // 7. Let start be min(max(pos, 0), len).\n    // 8. Let searchLen be the number of elements in searchStr.\n    // 9. Return the largest possible nonnegative integer k not larger than start such that k+searchLen is not\n    //    greater than len, and for all nonnegative integers j less than searchLen, the code unit at index k+j\n    //    of S is the same as the code unit at index j of searchStr; but if there is no such integer k, return\n    //    the value -1.\n    return new NumberValue(realm, S.lastIndexOf(searchStr, pos));\n  });\n\n  // ECMA262 21.1.3.10\n  obj.defineNativeMethod(\"localeCompare\", 1, (context, [that]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let That be ? ToString(that).\n    let That = To.ToStringPartial(realm, that);\n\n    return new NumberValue(realm, S.localeCompare(That));\n  });\n\n  // ECMA262 21.1.3.11\n  obj.defineNativeMethod(\"match\", 1, (context, [regexp]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If regexp is neither undefined nor null, then\n    if (!HasSomeCompatibleType(regexp, UndefinedValue, NullValue)) {\n      // a. Let matcher be ? GetMethod(regexp, @@match).\n      let matcher = GetMethod(realm, regexp, realm.intrinsics.SymbolMatch);\n\n      // b. If matcher is not undefined, then\n      if (!matcher.mightBeUndefined()) {\n        // i. Return ? Call(matcher, regexp, « O »).\n        return Call(realm, matcher, regexp, [O]);\n      }\n      matcher.throwIfNotConcrete();\n    }\n\n    // 3. Let S be ? ToString(O).\n    let S = new StringValue(realm, To.ToStringPartial(realm, O));\n\n    // 4. Let rx be ? RegExpCreate(regexp, undefined).\n    let rx = RegExpCreate(realm, regexp, undefined);\n\n    // 5. Return ? Invoke(rx, @@match, « S »).\n    return Invoke(realm, rx, realm.intrinsics.SymbolMatch, [S]);\n  });\n\n  // ECMA262 21.1.3.12\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"normalize\", 0, (context, [form]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. If form is not provided or form is undefined, let form be \"NFC\".\n      if (!form || form instanceof UndefinedValue) form = new StringValue(realm, \"NFC\");\n\n      // 4. Let f be ? ToString(form).\n      let f = To.ToStringPartial(realm, form);\n\n      // 5. If f is not one of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", throw a RangeError exception.\n      if (f !== \"NFC\" && f !== \"NFD\" && f !== \"NFKC\" && f !== \"NFKD\") {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n      }\n\n      // 6. Let ns be the String value that is the result of normalizing S into the normalization form named by\n      //    f as specified in http://www.unicode.org/reports/tr15/tr15-29.html.\n      // 7. Return ns.\n      return new StringValue(realm, S.normalize(f));\n    });\n\n  // ECMA262 21.1.3.13\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"padEnd\", 1, (context, [maxLength, fillString]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let intMaxLength be ? ToLength(maxLength).\n      let intMaxLength = To.ToLength(realm, maxLength);\n\n      // 4. Let stringLength be the number of elements in S.\n      let stringLength = S.length;\n\n      // 5. If intMaxLength is not greater than stringLength, return S.\n      if (intMaxLength <= stringLength) return new StringValue(realm, S);\n\n      let filler;\n      // 6. If fillString is undefined, let filler be a String consisting solely of the code unit 0x0020 (SPACE).\n      if (!fillString || fillString instanceof UndefinedValue) filler = \" \";\n      else {\n        // 7. Else, let filler be ? ToString(fillString).\n        filler = To.ToStringPartial(realm, fillString);\n      }\n      // 8. If filler is the empty String, return S.\n      if (filler === \"\") return new StringValue(realm, S);\n\n      // 9. Let fillLen be intMaxLength - stringLength.\n      let fillLen = intMaxLength - stringLength;\n\n      // 10. Let truncatedStringFiller be a new String value consisting of repeated concatenations of filler truncated to length fillLen.\n      let truncatedStringFiller = filler.repeat(Math.ceil(fillLen / filler.length)).substr(0, fillLen);\n\n      // 11. Return a new String value computed by the concatenation of S and truncatedStringFiller.\n      return new StringValue(realm, S + truncatedStringFiller);\n    });\n\n  // ECMA262 21.1.3.14\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"padStart\", 1, (context, [maxLength, fillString]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let intMaxLength be ? ToLength(maxLength).\n      let intMaxLength = To.ToLength(realm, maxLength);\n\n      // 4. Let stringLength be the number of elements in S.\n      let stringLength = S.length;\n\n      // 5. If intMaxLength is not greater than stringLength, return S.\n      if (intMaxLength <= stringLength) return new StringValue(realm, S);\n\n      let filler;\n      // 6. If fillString is undefined, let filler be a String consisting solely of the code unit 0x0020 (SPACE).\n      if (!fillString || fillString instanceof UndefinedValue) filler = \" \";\n      else {\n        // 7. Else, let filler be ? ToString(fillString).\n        filler = To.ToStringPartial(realm, fillString);\n      }\n      // 8. If filler is the empty String, return S.\n      if (filler === \"\") return new StringValue(realm, S);\n\n      // 9. Let fillLen be intMaxLength - stringLength.\n      let fillLen = intMaxLength - stringLength;\n\n      // 10. Let truncatedStringFiller be a new String value consisting of repeated concatenations of filler truncated to length fillLen.\n      let truncatedStringFiller = filler.repeat(Math.ceil(fillLen / filler.length)).substr(0, fillLen);\n\n      // 11. Return a new String value computed by the concatenation of truncatedStringFiller and S.\n      return new StringValue(realm, truncatedStringFiller + S);\n    });\n\n  // ECMA262 21.1.3.13\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"repeat\", 1, (context, [count]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let n be ? ToInteger(count).\n      let n = To.ToInteger(realm, count);\n\n      // 4. If n < 0, throw a RangeError exception.\n      if (n < 0) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n      }\n\n      // 5. If n is +∞, throw a RangeError exception.\n      if (!isFinite(n)) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.RangeError);\n      }\n\n      // 6. Let T be a String value that is made from n copies of S appended together. If n is 0, T is the empty String.\n      let T = \"\";\n      if (S) while (n--) T += S;\n\n      // 7. Return T.\n      return new StringValue(realm, T);\n    });\n\n  // ECMA262 21.1.3.14\n  obj.defineNativeMethod(\"replace\", 2, (context, [searchValue, replaceValue]) => {\n    let replStr;\n\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If searchValue is neither undefined nor null, then\n    if (!HasSomeCompatibleType(searchValue, NullValue, UndefinedValue)) {\n      // a. Let replacer be ? GetMethod(searchValue, @@replace).\n      let replacer = GetMethod(realm, searchValue, realm.intrinsics.SymbolReplace);\n\n      // b. If replacer is not undefined, then\n      if (!(replacer instanceof UndefinedValue)) {\n        // i. Return ? Call(replacer, searchValue, « O, replaceValue »).\n        return Call(realm, replacer, searchValue, [O, replaceValue]);\n      }\n    }\n\n    // 3. Let string be ? ToString(O).\n    let string = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 4. Let searchString be ? ToString(searchValue).\n    let searchString = To.ToStringPartial(realm, searchValue);\n\n    // 5. Let functionalReplace be IsCallable(replaceValue).\n    let functionalReplace = IsCallable(realm, replaceValue);\n\n    let replaceValueString;\n    // 6. If functionalReplace is false, then\n    if (functionalReplace === false) {\n      // a. Let replaceValue be ? ToString(replaceValue).\n      replaceValueString = To.ToStringPartial(realm, replaceValue);\n    }\n\n    // 7. Search string for the first occurrence of searchString and\n    //    let pos be the index within string of the first code unit of the matched substring and\n    let pos = string.search(searchString);\n\n    //    let matched be searchString.\n    let matched = searchString;\n\n    //    If no occurrences of searchString were found, return string.\n    if (pos < 0) return new StringValue(realm, string);\n\n    // 8. If functionalReplace is true, then\n    if (functionalReplace === true) {\n      // a. Let replValue be ? Call(replaceValue, undefined, « matched, pos, string »).\n      let replValue = Call(realm, replaceValue, realm.intrinsics.undefined, [\n        new StringValue(realm, matched),\n        new NumberValue(realm, pos),\n        new StringValue(realm, string),\n      ]);\n\n      // b. Let replStr be ? ToString(replValue).\n      replStr = To.ToStringPartial(realm, replValue);\n    } else {\n      // 9. Else,\n      // a. Let captures be an empty List.\n      let captures = [];\n\n      // b. Let replStr be GetSubstitution(matched, string, pos, captures, replaceValue).\n      invariant(typeof replaceValueString === \"string\");\n      replStr = To.ToString(realm, GetSubstitution(realm, matched, string, pos, captures, replaceValueString));\n    }\n\n    // 10. Let tailPos be pos + the number of code units in matched.\n    let tailPos = pos + matched.length;\n\n    // 11. Let newString be the String formed by concatenating the first pos code units of string,\n    //     replStr, and the trailing substring of string starting at index tailPos. If pos is 0,\n    //     the first element of the concatenation will be the empty String.\n    let newString = string.substr(0, pos) + replStr + string.substr(tailPos);\n\n    // 12. Return newString.\n    return new StringValue(realm, newString);\n  });\n\n  // ECMA262 21.1.3.15\n  obj.defineNativeMethod(\"search\", 1, (context, [regexp]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. If regexp is neither undefined nor null, then\n    if (!HasSomeCompatibleType(regexp, UndefinedValue, NullValue)) {\n      // a. Let searcher be ? GetMethod(regexp, @@search).\n      let searcher = GetMethod(realm, regexp, realm.intrinsics.SymbolSearch);\n\n      // b. If searcher is not undefined, then\n      if (!(searcher instanceof UndefinedValue)) {\n        // i. Return ? Call(searcher, regexp, « O »).\n        return Call(realm, searcher, regexp, [O]);\n      }\n    }\n\n    // 3. Let string be ? ToString(O).\n    let string = To.ToStringPartial(realm, O);\n\n    // 4. Let rx be ? RegExpCreate(regexp, undefined).\n    let rx = RegExpCreate(realm, regexp, undefined);\n\n    // 5. Return ? Invoke(rx, @@search, « string »).\n    return Invoke(realm, rx, realm.intrinsics.SymbolSearch, [new StringValue(realm, string)]);\n  });\n\n  // ECMA262 21.1.3.16\n  obj.defineNativeMethod(\"slice\", 2, (context, [start, end]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    if (O instanceof AbstractValue && O.getType() === StringValue) {\n      return AbstractValue.createFromTemplate(realm, sliceTemplate, StringValue, [O, start, end], sliceTemplateSrc);\n    }\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 4. Let intStart be ? ToInteger(start).\n    let intStart = To.ToInteger(realm, start);\n\n    // 5. If end is undefined, let intEnd be len; else let intEnd be ? ToInteger(end).\n    let intEnd = !end || end instanceof UndefinedValue ? len : To.ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. If intStart < 0, let from be max(len + intStart, 0); otherwise let from be min(intStart, len).\n    let from = intStart < 0 ? Math.max(len + intStart, 0) : Math.min(intStart, len);\n\n    // 7. If intEnd < 0, let to be max(len + intEnd, 0); otherwise let to be min(intEnd, len).\n    let to = intEnd < 0 ? Math.max(len + intEnd, 0) : Math.min(intEnd, len);\n\n    // 8. Let span be max(to - from, 0).\n    let span = Math.max(to - from, 0);\n\n    // 9. Return a String value containing span consecutive elements from S beginning with the element at index from.\n    return new StringValue(realm, S.substr(from, span));\n  });\n\n  // ECMA262 21.1.3.17\n  obj.defineNativeMethod(\"split\", 2, (context, [separator, limit]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    if (O instanceof AbstractValue && O.getType() === StringValue) {\n      return AbstractValue.createFromTemplate(\n        realm,\n        splitTemplate,\n        StringValue,\n        [O, separator, limit],\n        splitTemplateSrc\n      );\n    }\n\n    // 2. If separator is neither undefined nor null, then\n    if (!HasSomeCompatibleType(separator, UndefinedValue, NullValue)) {\n      // a. Let splitter be ? GetMethod(separator, @@split).\n      let splitter = GetMethod(realm, separator, realm.intrinsics.SymbolSplit);\n\n      // b. If splitter is not undefined, then\n      if (!(splitter instanceof UndefinedValue)) {\n        // i. Return ? Call(splitter, separator, « O, limit »).\n        return Call(realm, splitter, separator, [O, limit]);\n      }\n    }\n\n    // 3. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 4. Let A be ArrayCreate(0).\n    let A = Create.ArrayCreate(realm, 0);\n\n    // 5. Let lengthA be 0.\n    let lengthA = 0;\n\n    // 6. If limit is undefined, let lim be 232-1; else let lim be ? ToUint32(limit).\n    let lim =\n      !limit || limit instanceof UndefinedValue ? Math.pow(2, 32) - 1 : To.ToUint32(realm, limit.throwIfNotConcrete());\n\n    // 7. Let s be the number of elements in S.\n    let s = S.length;\n\n    // 8. Let p be 0.\n    let p = 0;\n\n    // 9. Let R be ? ToString(separator).\n    let R = To.ToStringPartial(realm, separator);\n\n    // 10. If lim = 0, return A.\n    if (lim === 0) return A;\n\n    // 11. If separator is undefined, then\n    if (!separator || separator instanceof UndefinedValue) {\n      // a. Perform ! CreateDataProperty(A, \"0\", S).\n      Create.CreateDataProperty(realm, A, \"0\", new StringValue(realm, S));\n\n      // b. Return A.\n      return A;\n    }\n\n    // 12. If s = 0, then\n    if (s === 0) {\n      // a. Let z be SplitMatch(S, 0, R).\n      let z = SplitMatch(realm, S, 0, R);\n\n      // b. If z is not false, return A.\n      if (z !== false) return A;\n\n      // c. Perform ! CreateDataProperty(A, \"0\", S).\n      Create.CreateDataProperty(realm, A, \"0\", new StringValue(realm, S));\n      // d. Return A.\n      return A;\n    }\n\n    // 13. Let q be p.\n    let q = p;\n\n    // 14. Repeat, while q ≠ s\n    while (q !== s) {\n      // a. Let e be SplitMatch(S, q, R).\n      let e = SplitMatch(realm, S, q, R);\n\n      // b. If e is false, let q be q+1.\n      if (e === false) {\n        q++;\n      } else {\n        // c. Else e is an integer index ≤ s,\n        // i. If e = p, let q be q+1.\n        if (e === p) {\n          q++;\n        } else {\n          // ii. Else e ≠ p,\n          // 1. Let T be a String value equal to the substring of S consisting of the code units at indices p (inclusive) through q (exclusive).\n          let T = S.substring(p, q);\n\n          // 2. Perform ! CreateDataProperty(A, ! ToString(lengthA), T).\n          Create.CreateDataProperty(realm, A, new StringValue(realm, lengthA + \"\"), new StringValue(realm, T));\n\n          // 3. Increment lengthA by 1.\n          lengthA++;\n\n          // 4. If lengthA = lim, return A.\n          if (lengthA === lim) return A;\n\n          // 5. Let p be e.\n          p = e;\n\n          // 6. Let q be p.\n          q = p;\n        }\n      }\n    }\n\n    // 15. Let T be a String value equal to the substring of S consisting of the code units at indices p (inclusive) through s (exclusive).\n    let T = S.substring(p, s);\n\n    // 16. Perform ! CreateDataProperty(A, ! ToString(lengthA), T).\n    Create.CreateDataProperty(realm, A, new StringValue(realm, lengthA + \"\"), new StringValue(realm, T));\n\n    // 17. Return A.\n    return A;\n  });\n\n  // ECMA262 21.1.3.18\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    obj.defineNativeMethod(\"startsWith\", 1, (context, [searchString, position]) => {\n      // 1. Let O be ? RequireObjectCoercible(this value).\n      let O = RequireObjectCoercible(realm, context);\n\n      // 2. Let S be ? ToString(O).\n      let S = To.ToString(realm, O.throwIfNotConcrete());\n\n      // 3. Let isRegExp be ? IsRegExp(searchString).\n      let isRegExp = IsRegExp(realm, searchString);\n\n      // 4. If isRegExp is true, throw a TypeError exception.\n      if (isRegExp) {\n        throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"String.prototype\");\n      }\n\n      // 5. Let searchStr be ? ToString(searchString).\n      let searchStr = To.ToStringPartial(realm, searchString);\n\n      // 6. Let pos be ? ToInteger(position). (If position is undefined, this step produces the value 0.)\n      let pos = To.ToInteger(realm, position || realm.intrinsics.undefined);\n\n      // 7. Let len be the number of elements in S.\n      let len = S.length;\n\n      // 8. Let start be min(max(pos, 0), len).\n      let start = Math.min(Math.max(pos, 0), len);\n\n      // 9. Let searchLength be the number of elements in searchStr.\n      let searchLength = searchStr.length;\n\n      // 10. If searchLength+start is greater than len, return false.\n      if (searchLength + start > len) return realm.intrinsics.false;\n\n      // 11. If the sequence of elements of S starting at start of length searchLength is the same as the full element sequence of searchStr, return true.\n      if (S.substr(start, searchLength) === searchStr) return realm.intrinsics.true;\n\n      // 12. Otherwise, return false.\n      return realm.intrinsics.false;\n    });\n\n  // ECMA262 21.1.3.19\n  obj.defineNativeMethod(\"substring\", 2, (context, [start, end]) => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let len be the number of elements in S.\n    let len = S.length;\n\n    // 4. Let intStart be ? ToInteger(start).\n    let intStart = To.ToInteger(realm, start);\n\n    // 5. If end is undefined, let intEnd be len; else let intEnd be ? ToInteger(end).\n    let intEnd = !end || end instanceof UndefinedValue ? len : To.ToInteger(realm, end.throwIfNotConcrete());\n\n    // 6. Let finalStart be min(max(intStart, 0), len).\n    let finalStart = Math.min(Math.max(intStart, 0), len);\n\n    // 7. Let finalEnd be min(max(intEnd, 0), len).\n    let finalEnd = Math.min(Math.max(intEnd, 0), len);\n\n    // 8. Let from be min(finalStart, finalEnd).\n    let frm = Math.min(finalStart, finalEnd);\n\n    // 9. Let to be max(finalStart, finalEnd).\n    let to = Math.max(finalStart, finalEnd);\n\n    // 10. Return a String whose length is to - from, containing code units from S, namely the code units with indices from through to - 1, in ascending order.\n    return new StringValue(realm, S.slice(frm, to));\n  });\n\n  type toCaseTypes = \"LocaleLower\" | \"LocaleUpper\" | \"Lower\" | \"Upper\";\n  function toCase(type: toCaseTypes, context, locales) {\n    // 1. Let O be RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ToString(O)\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    if (realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) || realm.isCompatibleWith(\"mobile\")) {\n      locales = undefined;\n    } else {\n      // TODO #1013 filter locales for only serialisable values\n      if (locales) locales = locales.serialize();\n    }\n\n    if (realm.useAbstractInterpretation && (type === \"LocaleUpper\" || type === \"LocaleLower\")) {\n      // The locale is environment-dependent\n      AbstractValue.reportIntrospectionError(O);\n      throw new FatalError();\n    }\n\n    // Omit the rest of the arguments. Just use the native impl.\n    return new StringValue(realm, (S: any)[`to${type}Case`](locales));\n  }\n\n  // ECMA-262 21.1.3.20\n  // ECMA-402 13.1.2\n  obj.defineNativeMethod(\"toLocaleLowerCase\", 0, (context, [locales]) => {\n    return toCase(\"LocaleLower\", context, locales);\n  });\n\n  // ECMA-262 21.1.3.21\n  // ECMA-402 13.1.3\n  obj.defineNativeMethod(\"toLocaleUpperCase\", 0, (context, [locales]) => {\n    return toCase(\"LocaleUpper\", context, locales);\n  });\n\n  // ECMA262 21.1.3.22\n  obj.defineNativeMethod(\"toLowerCase\", 0, context => {\n    return toCase(\"Lower\", context);\n  });\n\n  // ECMA262 21.1.3.23\n  obj.defineNativeMethod(\"toString\", 0, context => {\n    const target = context instanceof ObjectValue ? context.$StringData : context;\n    if (target instanceof AbstractValue && target.getType() === StringValue) {\n      return target;\n    }\n    // 1. Return ? thisStringValue(this value).\n    return To.thisStringValue(realm, context);\n  });\n\n  // ECMA262 21.1.3.24\n  obj.defineNativeMethod(\"toUpperCase\", 0, context => {\n    return toCase(\"Upper\", context);\n  });\n\n  // ECMA262 21.1.3.25\n  obj.defineNativeMethod(\"trim\", 0, context => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Let T be a String value that is a copy of S with both leading and trailing white space removed. The definition of white space is the union of WhiteSpace and LineTerminator. When determining whether a Unicode code point is in Unicode general category “Zs”, code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in 6.1.4.\n    let T = S.trim();\n\n    // 4. Return T.\n    return new StringValue(realm, T);\n  });\n\n  // ECMA262 21.1.3.26\n  obj.defineNativeMethod(\"valueOf\", 0, context => {\n    // 1. Return ? thisStringValue(this value).\n    return To.thisStringValue(realm, context);\n  });\n\n  // ECMA262 21.1.3.27\n  obj.defineNativeMethod(realm.intrinsics.SymbolIterator, 0, context => {\n    // 1. Let O be ? RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ? ToString(O).\n    let S = To.ToString(realm, O.throwIfNotConcrete());\n\n    // 3. Return CreateStringIterator(S).\n    return Create.CreateStringIterator(realm, new StringValue(realm, S));\n  });\n\n  // B.2.3.1\n  obj.defineNativeMethod(\"substr\", 2, (context, [start, length]) => {\n    // 1. Let O be RequireObjectCoercible(this value).\n    let O = RequireObjectCoercible(realm, context);\n\n    // 2. Let S be ToString(O).\n    let S = To.ToStringPartial(realm, O);\n\n    // 3. ReturnIfAbrupt(S).\n\n    // 4. Let intStart be ToInteger(start).\n    let intStart = To.ToInteger(realm, start);\n\n    // 5. ReturnIfAbrupt(intStart).\n\n    // 6. If length is undefined, let end be +∞; otherwise let end be ToInteger(length).\n    let end;\n    if (!length || length instanceof UndefinedValue) {\n      end = Infinity;\n    } else {\n      end = To.ToInteger(realm, length.throwIfNotConcrete());\n    }\n\n    // 7. ReturnIfAbrupt(end).\n\n    // 8. Let size be the number of code units in S.\n    let size = S.length;\n\n    // 9. If intStart < 0, let intStart be max(size + intStart,0).\n    if (intStart < 0) intStart = Math.max(size + intStart, 0);\n\n    // 10. Let resultLength be min(max(end,0), size – intStart).\n    let resultLength = Math.min(Math.max(end, 0), size - intStart);\n\n    // 11. If resultLength ≤ 0, return the empty String \"\".\n    if (resultLength <= 0) return realm.intrinsics.emptyString;\n\n    // 12. Return a String containing resultLength consecutive code units from S beginning with the code unit at index intStart.\n    return new StringValue(realm, S.slice(intStart, intStart + resultLength));\n  });\n\n  // B.2.3.2\n  obj.defineNativeMethod(\"anchor\", 1, (context, [name]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. // 2. Return ? CreateHTML(S, \"a\", \"name\", name).\n    return Create.CreateHTML(realm, S, \"a\", \"name\", name);\n  });\n\n  // B.2.3.3\n  obj.defineNativeMethod(\"big\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"big\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"big\", \"\", \"\");\n  });\n\n  // B.2.3.4\n  obj.defineNativeMethod(\"blink\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"blink\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"blink\", \"\", \"\");\n  });\n\n  // B.2.3.5\n  obj.defineNativeMethod(\"bold\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"b\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"b\", \"\", \"\");\n  });\n\n  // B.2.3.6\n  obj.defineNativeMethod(\"fixed\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"tt\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"tt\", \"\", \"\");\n  });\n\n  // B.2.3.7\n  obj.defineNativeMethod(\"fontcolor\", 1, (context, [color]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"font\", \"color\", color).\n    return Create.CreateHTML(realm, S, \"font\", \"color\", color);\n  });\n\n  // B.2.3.8\n  obj.defineNativeMethod(\"fontsize\", 1, (context, [size]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"font\", \"size\", size).\n    return Create.CreateHTML(realm, S, \"font\", \"size\", size);\n  });\n\n  // B.2.3.9\n  obj.defineNativeMethod(\"italics\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"i\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"i\", \"\", \"\");\n  });\n\n  // B.2.3.10\n  obj.defineNativeMethod(\"link\", 1, (context, [url]) => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"a\", \"href\", url).\n    return Create.CreateHTML(realm, S, \"a\", \"href\", url);\n  });\n\n  // B.2.3.11\n  obj.defineNativeMethod(\"small\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"small\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"small\", \"\", \"\");\n  });\n\n  // B.2.3.12\n  obj.defineNativeMethod(\"strike\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"strike\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"strike\", \"\", \"\");\n  });\n\n  // B.2.3.13\n  obj.defineNativeMethod(\"sub\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"sub\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"sub\", \"\", \"\");\n  });\n\n  // B.2.3.14\n  obj.defineNativeMethod(\"sup\", 0, context => {\n    // 1. Let S be the this value.\n    let S = context;\n\n    // 2. Return ? CreateHTML(S, \"sup\", \"\", \"\").\n    return Create.CreateHTML(realm, S, \"sup\", \"\", \"\");\n  });\n\n  return obj;\n}\n"]}