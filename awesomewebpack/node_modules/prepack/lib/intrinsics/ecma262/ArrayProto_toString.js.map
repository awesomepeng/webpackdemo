{"version":3,"sources":["../../../src/intrinsics/ecma262/ArrayProto_toString.js"],"names":["realm","context","array","ToObject","isIntrinsicAndHasWidenedNumericProperty","isInPureScope","$GetOwnProperty","undefined","createTemporalFromBuildFunction","objNode","t","callExpression","memberExpression","identifier","func","intrinsics","ObjectProto_toString"],"mappings":";;;;;;kBAmBe,UAASA,KAAT,EAA4C;AACzD;AACA,SAAO,+BACLA,KADK,EAEL,0BAFK,EAGL,UAHK,EAIL,CAJK,EAKLC,WAAW;AACT;AACA,QAAIC,QAAQ,eAAGC,QAAH,CAAYH,KAAZ,EAAmBC,OAAnB,CAAZ;;AAEA;AACA;AACA;AACA,QACE,kBAAWG,uCAAX,CAAmDF,KAAnD,KACAF,MAAMK,aAAN,EADA,IAEAH,MAAMI,eAAN,CAAsB,UAAtB,MAAsCC,SAHxC,EAIE;AACA,aAAO,qBAAcC,+BAAd,CAA8CR,KAA9C,sBAAkE,CAACE,KAAD,CAAlE,EAA2E,CAAC,CAACO,OAAD,CAAD,KAChFC,EAAEC,cAAF,CAAiBD,EAAEE,gBAAF,CAAmBH,OAAnB,EAA4BC,EAAEG,UAAF,CAAa,UAAb,CAA5B,CAAjB,EAAwE,EAAxE,CADK,CAAP;AAGD;;AAED;AACA,QAAIC,OAAO,cAAId,KAAJ,EAAWE,KAAX,EAAkB,MAAlB,CAAX;;AAEA;AACA,QAAI,CAAC,oBAAWF,KAAX,EAAkBc,IAAlB,CAAL,EAA8BA,OAAOd,MAAMe,UAAN,CAAiBC,oBAAxB;;AAE9B;AACA,WAAO,gBAAKhB,KAAL,EAAYc,IAAZ,EAAkBZ,KAAlB,CAAP;AACD,GA9BI,EA+BL,KA/BK,CAAP;AAiCD,C;;AA1CD;;AACA;;AACA;;AACA;;AACA;;AACA;;IAAYQ,C","file":"ArrayProto_toString.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { AbstractValue, ArrayValue, NativeFunctionValue, StringValue } from \"../../values/index.js\";\nimport { To } from \"../../singletons.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { IsCallable } from \"../../methods/is.js\";\nimport * as t from \"babel-types\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 22.1.3.30\n  return new NativeFunctionValue(\n    realm,\n    \"Array.prototype.toString\",\n    \"toString\",\n    0,\n    context => {\n      // 1. Let array be ? ToObject(this value).\n      let array = To.ToObject(realm, context);\n\n      // If we have an object that is an unknown array with numeric properties, then\n      // we can return a temporal here as we know nothing of the array's properties.\n      // This should be safe to do, as we never expose the internals of the array.\n      if (\n        ArrayValue.isIntrinsicAndHasWidenedNumericProperty(array) &&\n        realm.isInPureScope() &&\n        array.$GetOwnProperty(\"toString\") === undefined\n      ) {\n        return AbstractValue.createTemporalFromBuildFunction(realm, StringValue, [array], ([objNode]) =>\n          t.callExpression(t.memberExpression(objNode, t.identifier(\"toString\")), [])\n        );\n      }\n\n      // 2. Let func be ? Get(array, \"join\").\n      let func = Get(realm, array, \"join\");\n\n      // 3. If IsCallable(func) is false, let func be the intrinsic function %ObjProto_toString%.\n      if (!IsCallable(realm, func)) func = realm.intrinsics.ObjectProto_toString;\n\n      // 4. Return ? Call(func, array).\n      return Call(realm, func, array);\n    },\n    false\n  );\n}\n"]}