{"version":3,"sources":["../../../src/intrinsics/ecma262/FunctionPrototype.js"],"names":["realm","obj","$Call","thisArgument","argsList","intrinsics","undefined","defineNativeProperty","zero","writable","emptyString","defineNativeMethod","func","thisArg","argList","createErrorThrowCompletion","TypeError","argArray","CreateListFromArrayLike","context","args","Target","F","BoundFunctionCreate","targetHasLength","L","targetLen","mightBeNumber","throwIfNotConcreteNumber","ToInteger","Math","max","length","DefinePropertyOrThrow","value","enumerable","configurable","targetName","SetFunctionName","SymbolHasInstance","V","_context","throwIfNotConcrete","name"],"mappings":"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","file":"FunctionPrototype.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { Functions, Properties } from \"../../singletons.js\";\nimport {\n  AbstractValue,\n  BooleanValue,\n  NullValue,\n  UndefinedValue,\n  NumberValue,\n  StringValue,\n  FunctionValue,\n  NativeFunctionValue,\n  ObjectValue,\n} from \"../../values/index.js\";\nimport { Call } from \"../../methods/call.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport { Get } from \"../../methods/get.js\";\nimport { IsCallable } from \"../../methods/is.js\";\nimport { HasOwnProperty, HasSomeCompatibleType } from \"../../methods/has.js\";\nimport { OrdinaryHasInstance } from \"../../methods/abstract.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm, obj: ObjectValue): void {\n  // ECMA262 19.2.3\n  obj.$Call = (thisArgument, argsList) => {\n    return realm.intrinsics.undefined;\n  };\n\n  // ECMA262 19.2.3\n  obj.defineNativeProperty(\"length\", realm.intrinsics.zero, { writable: false });\n\n  // ECMA262 19.2.3\n  obj.defineNativeProperty(\"name\", realm.intrinsics.emptyString, { writable: false });\n\n  // ECMA262 19.2.3.3\n  obj.defineNativeMethod(\"call\", 1, (func, [thisArg, ...argList]) => {\n    // 1. If IsCallable(func) is false, throw a TypeError exception.\n    if (IsCallable(realm, func) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n    }\n\n    // 2. Let argList be a new empty List.\n    // 3. If this method was called with more than one argument, then in left to right order,\n    //    starting with the second argument, append each argument as the last element of argList.\n    argList;\n\n    // TODO #1008 4. Perform PrepareForTailCall().\n\n    // 5. Return ? Call(func, thisArg, argList).\n    return Call(realm, func, thisArg, argList);\n  });\n\n  // ECMA262 19.2.3.1\n  obj.defineNativeMethod(\"apply\", 2, (func, [thisArg, argArray]) => {\n    // 1. If IsCallable(func) is false, throw a TypeError exception.\n    if (IsCallable(realm, func) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError, \"not callable\");\n    }\n\n    // 2. If argArray is null or undefined, then\n    if (HasSomeCompatibleType(argArray, NullValue, UndefinedValue)) {\n      // TODO #1008 a. Perform PrepareForTailCall().\n\n      // b. Return ? Call(func, thisArg).\n      return Call(realm, func, thisArg);\n    }\n\n    // 3. Let argList be ? CreateListFromArrayLike(argArray).\n    let argList = Create.CreateListFromArrayLike(realm, argArray);\n\n    // TODO #1008 4. Perform PrepareForTailCall().\n\n    // 5. Return ? Call(func, thisArg, argList).\n    return Call(realm, func, thisArg, argList);\n  });\n\n  // ECMA262 19.2.3.2\n  obj.defineNativeMethod(\"bind\", 1, (context, [thisArg, ...args]) => {\n    // 1. Let Target be the realm value.\n    let Target = context;\n\n    // 2. If IsCallable(Target) is false, throw a TypeError exception.\n    if (IsCallable(realm, Target) === false) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n    invariant(Target instanceof ObjectValue);\n\n    // 3. Let args be a new (possibly empty) List consisting of all of the argument values provided after thisArg in order.\n    args;\n\n    // 4. Let F be ? BoundFunctionCreate(Target, thisArg, args).\n    let F = Functions.BoundFunctionCreate(realm, Target, thisArg, args);\n\n    // 5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n    let targetHasLength = HasOwnProperty(realm, Target, new StringValue(realm, \"length\"));\n\n    let L;\n\n    // 6. If targetHasLength is true, then\n    if (targetHasLength === true) {\n      // a. Let targetLen be ? Get(Target, \"length\").\n      let targetLen = Get(realm, Target, new StringValue(realm, \"length\"));\n\n      // b. If Type(targetLen) is not Number, let L be 0.\n      if (!targetLen.mightBeNumber()) {\n        L = 0;\n      } else {\n        // c. Else,\n        targetLen = targetLen.throwIfNotConcreteNumber();\n        // i. Let targetLen be ToInteger(targetLen).\n        targetLen = To.ToInteger(realm, targetLen);\n\n        // ii. Let L be the larger of 0 and the result of targetLen minus the number of elements of args.\n        L = Math.max(0, targetLen - args.length);\n      }\n    } else {\n      // 7. Else let L be 0.\n      L = 0;\n    }\n\n    // 8. Perform ! DefinePropertyOrThrow(F, \"length\", PropertyDescriptor {[[Value]]: L, [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true}).\n    Properties.DefinePropertyOrThrow(realm, F, \"length\", {\n      value: new NumberValue(realm, L),\n      writable: false,\n      enumerable: false,\n      configurable: true,\n    });\n\n    // 9. Let targetName be ? Get(Target, \"name\").\n    let targetName = Get(realm, Target, new StringValue(realm, \"name\"));\n\n    // 10. If Type(targetName) is not String, let targetName be the empty string.\n    if (!(targetName instanceof StringValue)) targetName = realm.intrinsics.emptyString;\n\n    // 11. Perform SetFunctionName(F, targetName, \"bound\").\n    Functions.SetFunctionName(realm, F, targetName, \"bound\");\n\n    // 12. Return F.\n    return F;\n  });\n\n  // ECMA262 19.2.3.6\n  obj.defineNativeMethod(\n    realm.intrinsics.SymbolHasInstance,\n    1,\n    (context, [V]) => {\n      // 1. Let F be the this value.\n      let F = context;\n\n      // 2. Return ? OrdinaryHasInstance(F, V).\n      return new BooleanValue(realm, OrdinaryHasInstance(realm, F, V));\n    },\n    { writable: false, configurable: false }\n  );\n\n  // ECMA262 19.2.3.5\n  obj.defineNativeMethod(\"toString\", 0, _context => {\n    let context = _context.throwIfNotConcrete();\n    if (context instanceof NativeFunctionValue) {\n      let name = context.name;\n      if (name instanceof AbstractValue) {\n        return new StringValue(realm, `function () {[native code]}`);\n      } else {\n        invariant(typeof name === \"string\");\n        return new StringValue(realm, `function ${name}() { [native code] }`);\n      }\n    } else if (context instanceof FunctionValue) {\n      // TODO #1009: provide function source code\n      return new StringValue(realm, \"function () { }\");\n    } else {\n      // 3. Throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(\n        realm.intrinsics.TypeError,\n        new StringValue(realm, \"Function.prototype.toString is not generic\")\n      );\n    }\n  });\n}\n"]}