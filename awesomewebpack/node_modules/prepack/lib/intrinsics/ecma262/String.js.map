{"version":3,"sources":["../../../src/intrinsics/ecma262/String.js"],"names":["realm","func","context","value","argCount","NewTarget","s","intrinsics","emptyString","ToStringPartial","StringCreate","defineNativeMethod","codeUnits","length","elements","nextIndex","next","nextCU","ToUint16","push","String","fromCharCode","apply","isCompatibleWith","MOBILE_JSC_VERSION","codePoints","nextCP","ToNumber","ToInteger","createErrorThrowCompletion","RangeError","fromCodePoint","join","template","_substitutions","substitutions","numberOfSubstitutions","cooked","ToObject","raw","literalSegments","ToLength","stringElements","nextKey","ToString","nextSeg","nextSub"],"mappings":"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","file":"String.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { NativeFunctionValue, NumberValue, StringValue, SymbolValue } from \"../../values/index.js\";\nimport { Get, GetPrototypeFromConstructor, SymbolDescriptiveString } from \"../../methods/index.js\";\nimport { Create, To } from \"../../singletons.js\";\nimport invariant from \"../../invariant.js\";\n\nexport default function(realm: Realm): NativeFunctionValue {\n  // ECMA262 21.1.1\n  let func = new NativeFunctionValue(realm, \"String\", \"String\", 1, (context, [value], argCount, NewTarget) => {\n    let s: ?StringValue;\n\n    // 1. If no arguments were passed to this function invocation, let s be \"\".\n    if (argCount === 0) {\n      s = realm.intrinsics.emptyString;\n    } else {\n      // 2. Else,\n      // a. If NewTarget is undefined and Type(value) is Symbol, return SymbolDescriptiveString(value).\n      if (!NewTarget && value instanceof SymbolValue) {\n        return new StringValue(realm, SymbolDescriptiveString(realm, value));\n      }\n\n      // b. Let s be ? ToString(value).\n      s = new StringValue(realm, To.ToStringPartial(realm, value));\n    }\n\n    // 3. If NewTarget is undefined, return s.\n    if (!NewTarget) return s;\n\n    // 4. Return ? StringCreate(s, ? GetPrototypeFromConstructor(NewTarget, \"%StringPrototype%\")).\n    return Create.StringCreate(realm, s, GetPrototypeFromConstructor(realm, NewTarget, \"StringPrototype\"));\n  });\n\n  // ECMA262 21.1.2.1 ( ..._codeUnits_ )\n  func.defineNativeMethod(\"fromCharCode\", 1, (context, codeUnits, argCount) => {\n    // 1. Let codeUnits be a List containing the arguments passed to this function.\n    codeUnits;\n\n    // 2. Let length be the number of elements in codeUnits.\n    let length = argCount;\n\n    // 3. Let elements be a new empty List.\n    let elements = [];\n\n    // 4. Let nextIndex be 0.\n    let nextIndex = 0;\n\n    // 5. Repeat while nextIndex < length\n    while (nextIndex < length) {\n      // a. Let next be codeUnits[nextIndex].\n      let next = codeUnits[nextIndex];\n\n      // b. Let nextCU be ? ToUint16(next).\n      let nextCU = To.ToUint16(realm, next);\n\n      // c. Append nextCU to the end of elements.\n      elements.push(nextCU);\n\n      // d. Let nextIndex be nextIndex + 1.\n      nextIndex++;\n    }\n    // 6. Return the String value whose elements are, in order, the elements in the List elements. If length\n    //    is 0, the empty string is returned.\n    return new StringValue(realm, String.fromCharCode.apply(null, elements));\n  });\n\n  // ECMA262 21.1.2.2 ( ..._codePoints_ )\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"fromCodePoint\", 1, (context, codePoints, argCount) => {\n      // 1. Let codePoints be a List containing the arguments passed to this function.\n      codePoints;\n\n      // 2. Let length be the number of elements in codePoints.\n      let length = argCount;\n\n      // 3. Let elements be a new empty List.\n      let elements = [];\n\n      // 4. Let nextIndex be 0.\n      let nextIndex = 0;\n\n      // 5. Repeat while nextIndex < length\n      while (nextIndex < length) {\n        // a. Let next be codePoints[nextIndex].\n        let next = codePoints[nextIndex];\n\n        // b. Let nextCP be ? ToNumber(next).\n        let nextCP = To.ToNumber(realm, next);\n\n        // c. If SameValue(nextCP, ToInteger(nextCP)) is false, throw a RangeError exception.\n        if (nextCP !== To.ToInteger(realm, nextCP)) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"SameValue(nextCP, To.ToInteger(nextCP)) is false\"\n          );\n        }\n\n        // d. If nextCP < 0 or nextCP > 0x10FFFF, throw a RangeError exception.\n        if (nextCP < 0 || nextCP > 0x10ffff) {\n          throw realm.createErrorThrowCompletion(\n            realm.intrinsics.RangeError,\n            \"SameValue(nextCP, To.ToInteger(nextCP)) is false\"\n          );\n        }\n\n        // e. Append the elements of the UTF16Encoding of nextCP to the end of elements.\n        elements.push(String.fromCodePoint(nextCP));\n\n        // f. Let nextIndex be nextIndex + 1.\n        nextIndex++;\n      }\n\n      // 6. Return the String value whose elements are, in order, the elements in the List elements. If length\n      //    is 0, the empty string is returned.\n      return new StringValue(realm, elements.join(\"\"));\n    });\n\n  // ECMA262 21.1.2.4\n  if (!realm.isCompatibleWith(realm.MOBILE_JSC_VERSION) && !realm.isCompatibleWith(\"mobile\"))\n    func.defineNativeMethod(\"raw\", 1, (context, [template, ..._substitutions], argCount) => {\n      let substitutions = _substitutions;\n      // 1. Let substitutions be a List consisting of all of the arguments passed to this function, starting with the second argument. If fewer than two arguments were passed, the List is empty.\n      substitutions = argCount < 2 ? [] : substitutions;\n\n      // 2. Let numberOfSubstitutions be the number of elements in substitutions.\n      let numberOfSubstitutions = substitutions.length;\n\n      // 3. Let cooked be ? ToObject(template).\n      let cooked = To.ToObject(realm, template);\n\n      // 4. Let raw be ? ToObject(? Get(cooked, \"raw\")).\n      let raw = To.ToObject(realm, Get(realm, cooked, \"raw\"));\n\n      // 5. Let literalSegments be ? ToLength(? Get(raw, \"length\")).\n      let literalSegments = To.ToLength(realm, Get(realm, raw, \"length\"));\n\n      // 6. If literalSegments ≤ 0, return the empty string.\n      if (literalSegments <= 0) return realm.intrinsics.emptyString;\n\n      // 7. Let stringElements be a new empty List.\n      let stringElements = \"\";\n\n      // 8. Let nextIndex be 0.\n      let nextIndex = 0;\n\n      // 9. Repeat\n      while (true) {\n        // a. Let nextKey be ! ToString(nextIndex).\n        let nextKey = To.ToString(realm, new NumberValue(realm, nextIndex));\n\n        // b. Let nextSeg be ? ToString(? Get(raw, nextKey)).\n        let nextSeg = To.ToStringPartial(realm, Get(realm, raw, nextKey));\n\n        // c. Append in order the code unit elements of nextSeg to the end of stringElements.\n        stringElements = stringElements + nextSeg;\n\n        // d. If nextIndex + 1 = literalSegments, then\n        if (nextIndex + 1 === literalSegments) {\n          // i. Return the String value whose code units are, in order, the elements in the List stringElements. If stringElements has no elements, the empty string is returned.\n          return new StringValue(realm, stringElements);\n        }\n\n        let next;\n        // e. If nextIndex < numberOfSubstitutions, let next be substitutions[nextIndex].\n        if (nextIndex < numberOfSubstitutions) next = substitutions[nextIndex];\n        else {\n          // f. Else, let next be the empty String.\n          next = realm.intrinsics.emptyString;\n        }\n        // g. Let nextSub be ? ToString(next).\n        let nextSub = To.ToStringPartial(realm, next);\n\n        // h. Append in order the code unit elements of nextSub to the end of stringElements.\n        stringElements = stringElements + nextSub;\n\n        // i. Let nextIndex be nextIndex + 1.\n        nextIndex = nextIndex + 1;\n      }\n      invariant(false);\n    });\n\n  return func;\n}\n"]}