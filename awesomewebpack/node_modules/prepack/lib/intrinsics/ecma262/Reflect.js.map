{"version":3,"sources":["../../../src/intrinsics/ecma262/Reflect.js"],"names":["realm","obj","intrinsics","ObjectPrototype","defineNativeMethod","context","target","thisArgument","argumentsList","createErrorThrowCompletion","TypeError","args","CreateListFromArrayLike","_newTarget","newTarget","_target","propertyKey","attributes","throwIfNotConcrete","key","ToPropertyKey","desc","ToPropertyDescriptor","$DefineOwnProperty","$Delete","_receiver","receiver","$Get","$GetOwnProperty","FromPropertyDescriptor","$GetPrototypeOf","mightNotBeObject","mightBeObject","$HasProperty","$IsExtensible","keys","$OwnPropertyKeys","CreateArrayFromList","$PreventExtensions","V","$Set","_proto","proto","$SetPrototypeOf"],"mappings":";;;;;;kBAgBe,UAASA,KAAT,EAAoC;AACjD,MAAIC,MAAM,uBAAgBD,KAAhB,EAAuBA,MAAME,UAAN,CAAiBC,eAAxC,EAAyD,SAAzD,CAAV;;AAEA;AACAF,MAAIG,kBAAJ,CAAuB,OAAvB,EAAgC,CAAhC,EAAmC,CAACC,OAAD,EAAU,CAACC,MAAD,EAASC,YAAT,EAAuBC,aAAvB,CAAV,KAAoD;AACrF;AACA,QAAI,CAAC,wBAAWR,KAAX,EAAkBM,MAAlB,CAAL,EAAgC;AAC9B,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,OAAO,mBAAOC,uBAAP,CAA+BZ,KAA/B,EAAsCQ,aAAtC,CAAX;;AAEA;;AAEA;AACA,WAAO,kBAAKR,KAAL,EAAYM,MAAZ,EAAoBC,YAApB,EAAkCI,IAAlC,CAAP;AACD,GAbD;;AAeA;AACAV,MAAIG,kBAAJ,CAAuB,WAAvB,EAAoC,CAApC,EAAuC,CAACC,OAAD,EAAU,CAACC,MAAD,EAASE,aAAT,EAAwBK,UAAxB,CAAV,KAAkD;AACvF,QAAIC,YAAYD,UAAhB;AACA;AACA,QAAI,CAAC,2BAAcb,KAAd,EAAqBM,MAArB,CAAL,EAAmC;AACjC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,CAACI,SAAL,EAAgB;AACdA,kBAAYR,MAAZ;AACD,KAFD,MAEO,IAAI,CAAC,2BAAcN,KAAd,EAAqBc,SAArB,CAAL,EAAsC;AAC3C;AACA,YAAMd,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIC,OAAO,mBAAOC,uBAAP,CAA+BZ,KAA/B,EAAsCQ,aAAtC,CAAX;;AAEA;AACA,WAAO,uBAAUR,KAAV,EAAiBM,MAAjB,EAAyBK,IAAzB,EAA+BG,SAA/B,CAAP;AACD,GApBD;;AAsBA;AACAb,MAAIG,kBAAJ,CAAuB,gBAAvB,EAAyC,CAAzC,EAA4C,CAACC,OAAD,EAAU,CAACU,OAAD,EAAUC,WAAV,EAAuBC,UAAvB,CAAV,KAAiD;AAC3F,QAAIX,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIS,MAAM,eAAGC,aAAH,CAAiBpB,KAAjB,EAAwBgB,WAAxB,CAAV;;AAEA;AACA,QAAIK,OAAO,eAAGC,oBAAH,CAAwBtB,KAAxB,EAA+BiB,UAA/B,CAAX;;AAEA;AACA,WAAO,wBAAiBjB,KAAjB,EAAwBM,OAAOiB,kBAAP,CAA0BJ,GAA1B,EAA+BE,IAA/B,CAAxB,CAAP;AACD,GAhBD;;AAkBA;AACApB,MAAIG,kBAAJ,CAAuB,gBAAvB,EAAyC,CAAzC,EAA4C,CAACC,OAAD,EAAU,CAACU,OAAD,EAAUC,WAAV,CAAV,KAAqC;AAC/E,QAAIV,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIS,MAAM,eAAGC,aAAH,CAAiBpB,KAAjB,EAAwBgB,WAAxB,CAAV;;AAEA;AACA,WAAO,wBAAiBhB,KAAjB,EAAwBM,OAAOkB,OAAP,CAAeL,GAAf,CAAxB,CAAP;AACD,GAbD;;AAeA;AACAlB,MAAIG,kBAAJ,CAAuB,KAAvB,EAA8B,CAA9B,EAAiC,CAACC,OAAD,EAAU,CAACU,OAAD,EAAUC,WAAV,EAAuBS,SAAvB,CAAV,KAAgD;AAC/E,QAAIC,WAAWD,SAAf;AACA,QAAInB,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIS,MAAM,eAAGC,aAAH,CAAiBpB,KAAjB,EAAwBgB,WAAxB,CAAV;;AAEA;AACA,QAAI,CAACU,QAAL,EAAe;AACb;AACAA,iBAAWpB,MAAX;AACD;;AAED;AACA,WAAOA,OAAOqB,IAAP,CAAYR,GAAZ,EAAiBO,QAAjB,CAAP;AACD,GApBD;;AAsBA;AACAzB,MAAIG,kBAAJ,CAAuB,0BAAvB,EAAmD,CAAnD,EAAsD,CAACC,OAAD,EAAU,CAACU,OAAD,EAAUC,WAAV,CAAV,KAAqC;AACzF,QAAIV,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIS,MAAM,eAAGC,aAAH,CAAiBpB,KAAjB,EAAwBgB,WAAxB,CAAV;;AAEA;AACA,QAAIK,OAAOf,OAAOsB,eAAP,CAAuBT,GAAvB,CAAX;;AAEA;AACA,WAAO,uBAAWU,sBAAX,CAAkC7B,KAAlC,EAAyCqB,IAAzC,CAAP;AACD,GAhBD;;AAkBA;AACApB,MAAIG,kBAAJ,CAAuB,gBAAvB,EAAyC,CAAzC,EAA4C,CAACC,OAAD,EAAU,CAACU,OAAD,CAAV,KAAwB;AAClE,QAAIT,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,WAAOJ,OAAOwB,eAAP,EAAP;AACD,GAVD;;AAYA;AACA7B,MAAIG,kBAAJ,CAAuB,KAAvB,EAA8B,CAA9B,EAAiC,CAACC,OAAD,EAAU,CAACC,MAAD,EAASU,WAAT,CAAV,KAAoC;AACnE;AACA,QAAIV,OAAOyB,gBAAP,EAAJ,EAA+B;AAC7B,UAAIzB,OAAO0B,aAAP,EAAJ,EAA4B1B,OAAOY,kBAAP;AAC5B,YAAMlB,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIS,MAAM,eAAGC,aAAH,CAAiBpB,KAAjB,EAAwBgB,WAAxB,CAAV;;AAEA;AACA,WAAO,wBAAiBhB,KAAjB,EAAwBM,OAAO2B,YAAP,CAAoBd,GAApB,CAAxB,CAAP;AACD,GAZD;;AAcA;AACAlB,MAAIG,kBAAJ,CAAuB,cAAvB,EAAuC,CAAvC,EAA0C,CAACC,OAAD,EAAU,CAACU,OAAD,CAAV,KAAwB;AAChE,QAAIT,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,WAAO,wBAAiBV,KAAjB,EAAwBM,OAAO4B,aAAP,EAAxB,CAAP;AACD,GAVD;;AAYA;AACAjC,MAAIG,kBAAJ,CAAuB,SAAvB,EAAkC,CAAlC,EAAqC,CAACC,OAAD,EAAU,CAACU,OAAD,CAAV,KAAwB;AAC3D,QAAIT,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIyB,OAAO7B,OAAO8B,gBAAP,EAAX;;AAEA;AACA,WAAO,mBAAOC,mBAAP,CAA2BrC,KAA3B,EAAkCmC,IAAlC,CAAP;AACD,GAbD;;AAeA;AACAlC,MAAIG,kBAAJ,CAAuB,mBAAvB,EAA4C,CAA5C,EAA+C,CAACC,OAAD,EAAU,CAACU,OAAD,CAAV,KAAwB;AACrE,QAAIT,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,WAAO,wBAAiBV,KAAjB,EAAwBM,OAAOgC,kBAAP,EAAxB,CAAP;AACD,GAVD;;AAYA;AACArC,MAAIG,kBAAJ,CAAuB,KAAvB,EAA8B,CAA9B,EAAiC,CAACC,OAAD,EAAU,CAACU,OAAD,EAAUC,WAAV,EAAuBuB,CAAvB,EAA0Bd,SAA1B,CAAV,KAAmD;AAClF,QAAIC,WAAWD,SAAf;AACA,QAAInB,SAASS,QAAQG,kBAAR,EAAb;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAIS,MAAM,eAAGC,aAAH,CAAiBpB,KAAjB,EAAwBgB,WAAxB,CAAV;;AAEA;AACA,QAAI,CAACU,QAAL,EAAe;AACb;AACAA,iBAAWpB,MAAX;AACD;;AAED;AACA,WAAO,wBAAiBN,KAAjB,EAAwBM,OAAOkC,IAAP,CAAYrB,GAAZ,EAAiBoB,CAAjB,EAAoBb,QAApB,CAAxB,CAAP;AACD,GApBD;;AAsBA;AACAzB,MAAIG,kBAAJ,CAAuB,gBAAvB,EAAyC,CAAzC,EAA4C,CAACC,OAAD,EAAU,CAACU,OAAD,EAAU0B,MAAV,CAAV,KAAgC;AAC1E,QAAInC,SAASS,QAAQG,kBAAR,EAAb;AACA,QAAIwB,QAAQD,OAAOvB,kBAAP,EAAZ;;AAEA;AACA,QAAI,EAAEZ,oCAAF,CAAJ,EAAsC;AACpC,YAAMN,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,QAAI,EAAEgC,mCAAF,KAAmC,EAAEA,iCAAF,CAAvC,EAAsE;AACpE,YAAM1C,MAAMS,0BAAN,CAAiCT,MAAME,UAAN,CAAiBQ,SAAlD,CAAN;AACD;;AAED;AACA,WAAO,wBAAiBV,KAAjB,EAAwBM,OAAOqC,eAAP,CAAuBD,KAAvB,CAAxB,CAAP;AACD,GAhBD;;AAkBA,SAAOzC,GAAP;AACD,C;;AA5OD;;AACA;;AACA","file":"Reflect.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow strict-local */\n\nimport type { Realm } from \"../../realm.js\";\nimport { BooleanValue, ObjectValue, NullValue } from \"../../values/index.js\";\nimport { Call, Construct, IsCallable, IsConstructor } from \"../../methods/index.js\";\nimport { Create, Properties, To } from \"../../singletons.js\";\n\nexport default function(realm: Realm): ObjectValue {\n  let obj = new ObjectValue(realm, realm.intrinsics.ObjectPrototype, \"Reflect\");\n\n  // ECMA262 26.1.1\n  obj.defineNativeMethod(\"apply\", 3, (context, [target, thisArgument, argumentsList]) => {\n    // 1. If IsCallable(target) is false, throw a TypeError exception.\n    if (!IsCallable(realm, target)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let args be ? CreateListFromArrayLike(argumentsList).\n    let args = Create.CreateListFromArrayLike(realm, argumentsList);\n\n    // TODO #1008 3. Perform PrepareForTailCall().\n\n    // 4. Return ? Call(target, thisArgument, args).\n    return Call(realm, target, thisArgument, args);\n  });\n\n  // ECMA262 26.1.2\n  obj.defineNativeMethod(\"construct\", 2, (context, [target, argumentsList, _newTarget]) => {\n    let newTarget = _newTarget;\n    // 1. If IsConstructor(target) is false, throw a TypeError exception.\n    if (!IsConstructor(realm, target)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If newTarget is not present, let newTarget be target.\n    if (!newTarget) {\n      newTarget = target;\n    } else if (!IsConstructor(realm, newTarget)) {\n      // 3. Else if IsConstructor(newTarget) is false, throw a TypeError exception.\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 4. Let args be ? CreateListFromArrayLike(argumentsList).\n    let args = Create.CreateListFromArrayLike(realm, argumentsList);\n\n    // 5. Return ? Construct(target, args, newTarget).\n    return Construct(realm, target, args, newTarget);\n  });\n\n  // ECMA262 26.1.3\n  obj.defineNativeMethod(\"defineProperty\", 3, (context, [_target, propertyKey, attributes]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = To.ToPropertyKey(realm, propertyKey);\n\n    // 3. Let desc be ? ToPropertyDescriptor(attributes).\n    let desc = To.ToPropertyDescriptor(realm, attributes);\n\n    // 4. Return ? target.[[DefineOwnProperty]](key, desc).\n    return new BooleanValue(realm, target.$DefineOwnProperty(key, desc));\n  });\n\n  // ECMA262 26.1.4\n  obj.defineNativeMethod(\"deleteProperty\", 2, (context, [_target, propertyKey]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = To.ToPropertyKey(realm, propertyKey);\n\n    // 3. Return ? target.[[Delete]](key).\n    return new BooleanValue(realm, target.$Delete(key));\n  });\n\n  // ECMA262 26.1.5\n  obj.defineNativeMethod(\"get\", 2, (context, [_target, propertyKey, _receiver]) => {\n    let receiver = _receiver;\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = To.ToPropertyKey(realm, propertyKey);\n\n    // 3. If receiver is not present, then\n    if (!receiver) {\n      // a. Let receiver be target.\n      receiver = target;\n    }\n\n    // 4. Return ? target.[[Get]](key, receiver).\n    return target.$Get(key, receiver);\n  });\n\n  // ECMA262 26.1.6\n  obj.defineNativeMethod(\"getOwnPropertyDescriptor\", 2, (context, [_target, propertyKey]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = To.ToPropertyKey(realm, propertyKey);\n\n    // 3. Let desc be ? target.[[GetOwnProperty]](key).\n    let desc = target.$GetOwnProperty(key);\n\n    // 4. Return FromPropertyDescriptor(desc).\n    return Properties.FromPropertyDescriptor(realm, desc);\n  });\n\n  // ECMA262 26.1.7\n  obj.defineNativeMethod(\"getPrototypeOf\", 1, (context, [_target]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Return ? target.[[GetPrototypeOf]]().\n    return target.$GetPrototypeOf();\n  });\n\n  // ECMA262 26.1.8\n  obj.defineNativeMethod(\"has\", 2, (context, [target, propertyKey]) => {\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (target.mightNotBeObject()) {\n      if (target.mightBeObject()) target.throwIfNotConcrete();\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = To.ToPropertyKey(realm, propertyKey);\n\n    // 3. Return ? target.[[HasProperty]](key).\n    return new BooleanValue(realm, target.$HasProperty(key));\n  });\n\n  // ECMA262 26.1.9\n  obj.defineNativeMethod(\"isExtensible\", 1, (context, [_target]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Return ? target.[[IsExtensible]]().\n    return new BooleanValue(realm, target.$IsExtensible());\n  });\n\n  // ECMA262 26.1.10\n  obj.defineNativeMethod(\"ownKeys\", 1, (context, [_target]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let keys be ? target.[[OwnPropertyKeys]]().\n    let keys = target.$OwnPropertyKeys();\n\n    // 3. Return CreateArrayFromList(keys).\n    return Create.CreateArrayFromList(realm, keys);\n  });\n\n  // ECMA262 26.1.11\n  obj.defineNativeMethod(\"preventExtensions\", 1, (context, [_target]) => {\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Return ? target.[[PreventExtensions]]().\n    return new BooleanValue(realm, target.$PreventExtensions());\n  });\n\n  // ECMA262 26.1.12\n  obj.defineNativeMethod(\"set\", 3, (context, [_target, propertyKey, V, _receiver]) => {\n    let receiver = _receiver;\n    let target = _target.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. Let key be ? ToPropertyKey(propertyKey).\n    let key = To.ToPropertyKey(realm, propertyKey);\n\n    // 3. If receiver is not present, then\n    if (!receiver) {\n      // a. Let receiver be target.\n      receiver = target;\n    }\n\n    // 5. Return ? target.[[Set]](key, V, receiver).\n    return new BooleanValue(realm, target.$Set(key, V, receiver));\n  });\n\n  // ECMA262 26.1.13\n  obj.defineNativeMethod(\"setPrototypeOf\", 2, (context, [_target, _proto]) => {\n    let target = _target.throwIfNotConcrete();\n    let proto = _proto.throwIfNotConcrete();\n\n    // 1. If Type(target) is not Object, throw a TypeError exception.\n    if (!(target instanceof ObjectValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 2. If Type(proto) is not Object and proto is not null, throw a TypeError exception.\n    if (!(proto instanceof ObjectValue) && !(proto instanceof NullValue)) {\n      throw realm.createErrorThrowCompletion(realm.intrinsics.TypeError);\n    }\n\n    // 3. Return ? target.[[SetPrototypeOf]](proto).\n    return new BooleanValue(realm, target.$SetPrototypeOf(proto));\n  });\n\n  return obj;\n}\n"]}