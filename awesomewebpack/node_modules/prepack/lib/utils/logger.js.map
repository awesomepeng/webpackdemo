{"version":3,"sources":["../../src/utils/logger.js"],"names":["Logger","constructor","realm","internalDebug","_hasErrors","tryQuery","f","defaultValue","context","isStrict","env","$GlobalEnv","lexicalEnvironment","variableEnvironment","pushContext","oldErrorHandler","errorHandler","d","severity","result","effects","evaluateForEffects","e","intrinsics","undefined","value","popContext","logCompletion","res","console","error","name","Error","object","err","ToStringPartial","stack","message","nativeStack","properties","get","descriptor","$ErrorData","contextStack","logError","_log","logWarning","logInformation","loc","expressionLocation","intrinsicName","diagnostic","handleError","hasErrors"],"mappings":"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","file":"logger.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport { Realm, ExecutionContext } from \"../realm.js\";\nimport { CompilerDiagnostic, FatalError, type Severity } from \"../errors.js\";\nimport { Get, InstanceofOperator } from \"../methods/index.js\";\nimport { Completion, ThrowCompletion } from \"../completions.js\";\nimport { ObjectValue, StringValue, Value } from \"../values/index.js\";\nimport { To } from \"../singletons.js\";\nimport invariant from \"../invariant.js\";\n\nexport class Logger {\n  constructor(realm: Realm, internalDebug: boolean) {\n    this.realm = realm;\n    this._hasErrors = false;\n    this.internalDebug = internalDebug;\n  }\n\n  realm: Realm;\n  _hasErrors: boolean;\n  internalDebug: boolean;\n\n  // Wraps a query that might potentially execute user code.\n  tryQuery<T>(f: () => T, defaultValue: T): T {\n    let realm = this.realm;\n    let context = new ExecutionContext();\n    context.isStrict = realm.isStrict;\n    let env = realm.$GlobalEnv;\n    context.lexicalEnvironment = env;\n    context.variableEnvironment = env;\n    context.realm = realm;\n    realm.pushContext(context);\n    // We use partial evaluation so that we can throw away any state mutations\n    let oldErrorHandler = realm.errorHandler;\n    realm.errorHandler = d => {\n      if (d.severity === \"Information\" || d.severity === \"Warning\") return \"Recover\";\n      return \"Fail\";\n    };\n    try {\n      let result;\n      let effects = realm.evaluateForEffects(\n        () => {\n          try {\n            result = f();\n          } catch (e) {\n            if (e instanceof Completion) {\n              result = defaultValue;\n            } else if (e instanceof FatalError) {\n              result = defaultValue;\n            } else {\n              throw e;\n            }\n          }\n          return realm.intrinsics.undefined;\n        },\n        undefined,\n        \"tryQuery\"\n      );\n      invariant(effects.result.value === realm.intrinsics.undefined);\n      return ((result: any): T);\n    } finally {\n      realm.errorHandler = oldErrorHandler;\n      realm.popContext(context);\n    }\n  }\n\n  logCompletion(res: Completion): void {\n    let realm = this.realm;\n    let value = res.value;\n    if (this.internalDebug) console.error(`=== ${res.constructor.name} ===`);\n    if (\n      this.tryQuery(\n        () => value instanceof ObjectValue && InstanceofOperator(realm, value, realm.intrinsics.Error),\n        false\n      )\n    ) {\n      let object = ((value: any): ObjectValue);\n      try {\n        let err = new FatalError(\n          this.tryQuery(() => To.ToStringPartial(realm, Get(realm, object, \"message\")), \"(unknown message)\")\n        );\n        err.stack = this.tryQuery(() => To.ToStringPartial(realm, Get(realm, object, \"stack\")), \"(unknown stack)\");\n        console.error(err.message);\n        console.error(err.stack);\n        if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n      } catch (err) {\n        let message = object.properties.get(\"message\");\n        console.error(\n          message && message.descriptor && message.descriptor.value instanceof StringValue\n            ? message.descriptor.value.value\n            : \"(no message available)\"\n        );\n        console.error(err.stack);\n        if (object.$ErrorData) {\n          console.error(object.$ErrorData.contextStack);\n        }\n      }\n    } else {\n      try {\n        value = To.ToStringPartial(realm, value);\n      } catch (err) {\n        value = err.message;\n      }\n      console.error(value);\n      if (this.internalDebug && res instanceof ThrowCompletion) console.error(res.nativeStack);\n    }\n    this._hasErrors = true;\n  }\n\n  logError(value: Value, message: string): void {\n    this._log(value, message, \"RecoverableError\");\n    this._hasErrors = true;\n  }\n\n  logWarning(value: Value, message: string): void {\n    this._log(value, message, \"Warning\");\n  }\n\n  logInformation(message: string): void {\n    this._log(this.realm.intrinsics.undefined, message, \"Information\");\n  }\n\n  _log(value: Value, message: string, severity: Severity): void {\n    let loc = value.expressionLocation;\n    if (value.intrinsicName) {\n      message = `${message}\\nintrinsic name: ${value.intrinsicName}`;\n    }\n    let diagnostic = new CompilerDiagnostic(message, loc, \"PP9000\", severity);\n    if (this.realm.handleError(diagnostic) === \"Fail\") throw new FatalError();\n  }\n\n  hasErrors(): boolean {\n    return this._hasErrors;\n  }\n}\n"]}