{"version":3,"sources":["../../src/utils/JSONTokenizer.js"],"names":["data","isLegal","x","undefined","pushData","stack","push","JSON","stringify","visited","Set","length","pop","has","TypeError","add","Array","isArray","i","value","reversedStack","key","reverse"],"mappings":";;;;;;AAWA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;kBACgBA,IAAD,IAAsC;AACnD;AACA,MAAIC,UAAUC,KAAKA,MAAMC,SAAN,IAAmB,OAAOD,CAAP,KAAa,UAAhC,IAA8C,OAAOA,CAAP,KAAa,QAA9E;AACA,2BAAUD,QAAQD,IAAR,CAAV;AACA,MAAII,WAAW,CAACC,KAAD,EAAQH,CAAR,KAAcG,MAAMC,IAAN,CAAW,OAAOJ,CAAP,KAAa,QAAb,IAAyBA,MAAM,IAA/B,GAAsCA,CAAtC,GAA0CK,KAAKC,SAAL,CAAeN,CAAf,CAArD,CAA7B;AACA,MAAIG,QAAQ,EAAZ;AACAD,WAASC,KAAT,EAAgBL,IAAhB;AACA,MAAIS,UAAU,IAAIC,GAAJ,EAAd;AACA,SAAO,MAAM;AACX,WAAOL,MAAMM,MAAN,GAAe,CAAtB,EAAyB;AACvBX,aAAOK,MAAMO,GAAN,EAAP;AACA,UAAI,OAAOZ,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,+BAAU,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,SAAS,IAA/C;AACA,UAAIS,QAAQI,GAAR,CAAYb,IAAZ,CAAJ,EAAuB,MAAM,IAAIc,SAAJ,CAAc,uCAAd,CAAN;AACvBL,cAAQM,GAAR,CAAYf,IAAZ;AACA,UAAIgB,MAAMC,OAAN,CAAcjB,IAAd,CAAJ,EAAyB;AACvBK,cAAMC,IAAN,CAAW,GAAX;AACA,aAAK,IAAIY,IAAIlB,KAAKW,MAAL,GAAc,CAA3B,EAA8BO,KAAK,CAAnC,EAAsCA,GAAtC,EAA2C;AACzC,cAAIC,QAAQnB,KAAKkB,CAAL,CAAZ;AACAd,mBAASC,KAAT,EAAgBJ,QAAQkB,KAAR,IAAiBA,KAAjB,GAAyB,IAAzC;AACA,cAAID,IAAI,CAAR,EAAWb,MAAMC,IAAN,CAAW,GAAX;AACZ;AACDD,cAAMC,IAAN,CAAW,GAAX;AACD,OARD,MAQO;AACLD,cAAMC,IAAN,CAAW,GAAX;AACA,YAAIc,gBAAgB,EAApB;AACA,aAAK,IAAIC,GAAT,IAAgBrB,IAAhB,EAAsB;AACpB;AACA,cAAI,OAAOqB,GAAP,KAAe,QAAnB,EAA6B;AAC7B,cAAIF,QAAQnB,KAAKqB,GAAL,CAAZ;AACA,cAAI,CAACpB,QAAQkB,KAAR,CAAL,EAAqB;AACrB,cAAIC,cAAcT,MAAd,GAAuB,CAA3B,EAA8BS,cAAcd,IAAd,CAAmB,GAAnB;AAC9Bc,wBAAcd,IAAd,CAAmBC,KAAKC,SAAL,CAAea,GAAf,CAAnB;AACAD,wBAAcd,IAAd,CAAmB,GAAnB;AACAF,mBAASgB,aAAT,EAAwBD,KAAxB;AACD;AACDd,cAAMC,IAAN,CAAW,GAAGc,cAAcE,OAAd,EAAd;AACAjB,cAAMC,IAAN,CAAW,GAAX;AACD;AACF;AACF,GAhCD;AAiCD,C,EA7DD","file":"JSONTokenizer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport invariant from \"../invariant.js\";\n\n// JSON.stringify is not the right choice when writing out giant objects\n// to disk. This is an alternative that produces a stream of tokens incrementally\n// instead of building a giant in-memory representation first.\n// The exported function returns a function that, when called repeatedly,\n// provides all the strings that when concatenated together produce the\n// result JSON.stringified would have produced on the data.\n// After all strings have been provided, the final answer will be undefined.\nexport default (data: any): (() => void | string) => {\n  // $FlowFixMe: \"symbol\" not yet supported by Flow\n  let isLegal = x => x !== undefined && typeof x !== \"function\" && typeof x !== \"symbol\";\n  invariant(isLegal(data));\n  let pushData = (stack, x) => stack.push(typeof x === \"object\" && x !== null ? x : JSON.stringify(x));\n  let stack = [];\n  pushData(stack, data);\n  let visited = new Set();\n  return () => {\n    while (stack.length > 0) {\n      data = stack.pop();\n      if (typeof data === \"string\") return data;\n      invariant(typeof data === \"object\" && data !== null);\n      if (visited.has(data)) throw new TypeError(\"Converting circular structure to JSON\");\n      visited.add(data);\n      if (Array.isArray(data)) {\n        stack.push(\"]\");\n        for (let i = data.length - 1; i >= 0; i--) {\n          let value = data[i];\n          pushData(stack, isLegal(value) ? value : null);\n          if (i > 0) stack.push(\",\");\n        }\n        stack.push(\"[\");\n      } else {\n        stack.push(\"}\");\n        let reversedStack = [];\n        for (let key in data) {\n          // $FlowFixMe: \"symbol\" not yet supported by Flow\n          if (typeof key === \"symbol\") continue;\n          let value = data[key];\n          if (!isLegal(value)) continue;\n          if (reversedStack.length > 0) reversedStack.push(\",\");\n          reversedStack.push(JSON.stringify(key));\n          reversedStack.push(\":\");\n          pushData(reversedStack, value);\n        }\n        stack.push(...reversedStack.reverse());\n        stack.push(\"{\");\n      }\n    }\n  };\n};\n"]}