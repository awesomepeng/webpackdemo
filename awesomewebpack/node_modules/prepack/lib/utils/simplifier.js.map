{"version":3,"sources":["../../src/utils/simplifier.js"],"names":["simplifyAndRefineAbstractValue","t","realm","isCondition","value","savedHandler","errorHandler","savedIsReadOnly","isReadOnly","isRootSimplification","statistics","simplificationAttempts","inSimplificationPath","diagnostic","errorCode","message","result","simplify","simplifications","e","name","includes","abstractValueImpliesCounter","getType","implies","intrinsics","true","impliesNot","false","loc","expressionLocation","op","kind","x0","args","x00","xx","negate","y0","x","y","equals","mightNotBeTrue","mightNotBeFalse","instantRender","enabled","xa","xb","ya","yb","nullOrUndefined","rewrite","z","mightNotBeNull","mightNotBeUndefined","createFromBuildFunction","n","callFunc","identifier","callExpression","createFromLogicalOp","distributeConditional","createFromBinaryOp","undefined","simplifyEquality","c0","c","mightBeFalse","mightBeTrue","withCondition","withInverseCondition","notc","createFromUnaryOp","mightBeNumber","cs","xc","createFromConditionalOp","yc","pathConditions","length","abstractValue","concreteValues","remainingConcreteValues","concreteValue","push","createAbstractConcreteUnion","create","condition","arg","leftArgs","slice","rightArgs","i","equality","simplified","v","cond","xy","mightBeUndefined","makeBoolean","sxx","sxy","mightBeNull","null","yx","yy","ToBoolean","unsimplifiedNegation","computeUnary","invertedComparison","left","right","invertedLogicalOp"],"mappings":"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","file":"simplifier.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/* @flow */\n\nimport type { BabelNodeSourceLocation } from \"babel-types\";\nimport { FatalError, InfeasiblePathError } from \"../errors.js\";\nimport { ValuesDomain } from \"../domains/index.js\";\nimport invariant from \"../invariant.js\";\nimport { Realm } from \"../realm.js\";\nimport { AbstractValue, BooleanValue, ConcreteValue, Value } from \"../values/index.js\";\nimport { Path, To } from \"../singletons.js\";\nimport EmptyValue from \"../values/EmptyValue\";\nimport * as t from \"babel-types\";\n\nexport default function simplifyAndRefineAbstractValue(\n  realm: Realm,\n  isCondition: boolean, // The value is only used after converting it to a Boolean\n  value: AbstractValue\n): Value {\n  let savedHandler = realm.errorHandler;\n  let savedIsReadOnly = realm.isReadOnly;\n  realm.isReadOnly = true;\n  let isRootSimplification = false;\n  realm.statistics.simplificationAttempts++;\n\n  if (!realm.inSimplificationPath) {\n    realm.inSimplificationPath = isRootSimplification = true;\n  }\n  try {\n    realm.errorHandler = diagnostic => {\n      if (diagnostic.errorCode === \"PP0029\") {\n        throw new FatalError(`${diagnostic.errorCode}: ${diagnostic.message}`);\n      }\n      throw new FatalError();\n    };\n    let result = simplify(realm, value, isCondition);\n    if (result !== value) realm.statistics.simplifications++;\n    return result;\n  } catch (e) {\n    if (e.name === \"Invariant Violation\") throw e;\n    if (e instanceof FatalError && typeof e.message === \"string\" && e.message.includes(\"PP0029\")) {\n      if (isRootSimplification) {\n        return value;\n      }\n      throw e;\n    }\n    return value;\n  } finally {\n    if (isRootSimplification) {\n      realm.abstractValueImpliesCounter = 0;\n      realm.inSimplificationPath = false;\n    }\n    realm.errorHandler = savedHandler;\n    realm.isReadOnly = savedIsReadOnly;\n  }\n}\n\nfunction simplify(realm, value: Value, isCondition: boolean = false): Value {\n  if (value instanceof ConcreteValue) return value;\n  invariant(value instanceof AbstractValue);\n  if (isCondition || value.getType() === BooleanValue) {\n    if (Path.implies(value)) return realm.intrinsics.true;\n    if (Path.impliesNot(value)) return realm.intrinsics.false;\n  }\n  let loc = value.expressionLocation;\n  let op = value.kind;\n  switch (op) {\n    case \"!\": {\n      let [x0] = value.args;\n      invariant(x0 instanceof AbstractValue);\n      if (x0.kind === \"!\") {\n        invariant(x0 instanceof AbstractValue);\n        let [x00] = x0.args;\n        let xx = simplify(realm, x00, true);\n        if (isCondition || xx.getType() === BooleanValue) return xx;\n      }\n      return negate(realm, x0, loc, value, isCondition);\n    }\n    case \"||\":\n    case \"&&\": {\n      let [x0, y0] = value.args;\n      let x = simplify(realm, x0, isCondition);\n      let y = simplify(realm, y0, isCondition);\n      if (x instanceof AbstractValue && x.equals(y)) return x;\n      // true && y <=> y\n      // true || y <=> true\n      if (!x.mightNotBeTrue()) return op === \"&&\" ? y : x;\n      // (x == false) && y <=> x\n      // false || y <=> y\n      if (!x.mightNotBeFalse()) return op === \"||\" ? y : x;\n      if (isCondition || (x.getType() === BooleanValue && y.getType() === BooleanValue)) {\n        // (x: boolean) && true <=> x\n        // x || true <=> true\n        if (!y.mightNotBeTrue()) return op === \"&&\" ? x : realm.intrinsics.true;\n        // (x: boolean) && false <=> false\n        // (x: boolean) || false <=> x\n        if (!y.mightNotBeFalse()) return op === \"||\" ? x : realm.intrinsics.false;\n      }\n      if (\n        op === \"||\" &&\n        y instanceof AbstractValue &&\n        y.kind === \"||\" &&\n        x.equals(y.args[0]) &&\n        !y.args[1].mightNotBeTrue()\n      )\n        return y;\n      if (realm.instantRender.enabled) {\n        if (op === \"||\" && x0 instanceof AbstractValue && y0 instanceof AbstractValue) {\n          if (x0.kind === \"===\" && y0.kind === \"===\") {\n            let [xa, xb] = x0.args;\n            let [ya, yb] = y0.args;\n            if (xa.equals(ya) && !xb.equals(yb) && nullOrUndefined(xb) && nullOrUndefined(yb)) return rewrite(xa);\n            else if (xb.equals(yb) && !xa.equals(ya) && nullOrUndefined(xa) && nullOrUndefined(ya)) return rewrite(xb);\n            else if (xa.equals(yb) && !xb.equals(ya) && nullOrUndefined(xb) && nullOrUndefined(ya)) return rewrite(xa);\n            else if (xb.equals(ya) && !xa.equals(yb) && nullOrUndefined(xa) && nullOrUndefined(yb)) return rewrite(xb);\n            function nullOrUndefined(z: Value) {\n              return !z.mightNotBeNull() || !z.mightNotBeUndefined();\n            }\n            function rewrite(z: Value) {\n              return AbstractValue.createFromBuildFunction(\n                realm,\n                BooleanValue,\n                [xa],\n                ([n]) => {\n                  let callFunc = t.identifier(\"global.__cannotBecomeObject\");\n                  return t.callExpression(callFunc, [n]);\n                },\n                { kind: \"global.__cannotBecomeObject(A)\" }\n              );\n            }\n          }\n        }\n      }\n      if (x.equals(x0) && y.equals(y0)) return value;\n      return AbstractValue.createFromLogicalOp(realm, (value.kind: any), x, y, loc, isCondition, true);\n    }\n    case \"<\":\n    case \"<=\":\n    case \">\":\n    case \">=\":\n      return distributeConditional(realm, value, isCondition, args =>\n        AbstractValue.createFromBinaryOp(realm, op, args[0], args[1], loc, undefined, isCondition)\n      );\n    case \"==\":\n    case \"!=\":\n    case \"===\":\n    case \"!==\":\n      return simplifyEquality(realm, value);\n    case \"conditional\": {\n      let [c0, x0, y0] = value.args;\n      let c = simplify(realm, c0, true);\n      let x, y;\n      if (c0 instanceof AbstractValue && c.mightBeFalse() && c.mightBeTrue()) {\n        try {\n          x = Path.withCondition(c0, () => simplify(realm, x0, isCondition));\n        } catch (e) {\n          if (e instanceof InfeasiblePathError) {\n            // We now know that c0 cannot be be true on this path\n            return simplify(realm, y0, isCondition);\n          }\n          throw e;\n        }\n        try {\n          y = Path.withInverseCondition(c0, () => simplify(realm, y0, isCondition));\n        } catch (e) {\n          if (e instanceof InfeasiblePathError) {\n            // We now know that c0 cannot be be false on this path\n            return x;\n          }\n          throw e;\n        }\n      }\n      if (x === undefined) x = simplify(realm, x0, isCondition);\n      if (y === undefined) y = simplify(realm, y0, isCondition);\n      if (!c.mightNotBeTrue()) return x;\n      if (!c.mightNotBeFalse()) return y;\n      invariant(c instanceof AbstractValue);\n      if (Path.implies(c)) return x;\n      let notc = AbstractValue.createFromUnaryOp(realm, \"!\", c, true, loc, isCondition, true);\n      if (!notc.mightNotBeTrue()) return y;\n      if (!notc.mightNotBeFalse()) return x;\n      invariant(notc instanceof AbstractValue);\n      if (Path.implies(notc)) return y;\n      if (!isCondition) {\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"===\", value, x))) return x;\n        if (!x.mightBeNumber() && Path.implies(AbstractValue.createFromBinaryOp(realm, \"!==\", value, x))) return y;\n        if (!y.mightBeNumber() && Path.implies(AbstractValue.createFromBinaryOp(realm, \"!==\", value, y))) return x;\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"===\", value, y))) return y;\n      }\n      // c ? x : x <=> x\n      if (x.equals(y)) return x;\n      // x ? x : y <=> x || y\n      let cs = isCondition ? c : simplify(realm, c0);\n      if (cs.equals(x)) return AbstractValue.createFromLogicalOp(realm, \"||\", x, y, loc, isCondition, true);\n      // y ? x : y <=> y && x\n      if (cs.equals(y)) return AbstractValue.createFromLogicalOp(realm, \"&&\", y, x, loc, isCondition, true);\n      // c ? (c ? xx : xy) : y <=> c ? xx : y\n      if (x instanceof AbstractValue && x.kind === \"conditional\") {\n        let [xc, xx] = x.args;\n        if (c.equals(xc))\n          return AbstractValue.createFromConditionalOp(realm, c, xx, y, value.expressionLocation, isCondition, true);\n      }\n      // c ? x : (c ? y : z) : z <=> c ? x : z\n      if (y instanceof AbstractValue && y.kind === \"conditional\") {\n        let [yc, , z] = y.args;\n        if (c.equals(yc))\n          return AbstractValue.createFromConditionalOp(realm, c, x, z, value.expressionLocation, isCondition, true);\n      }\n      if (isCondition || (x.getType() === BooleanValue && y.getType() === BooleanValue)) {\n        // c ? true : false <=> c\n        if (!x.mightNotBeTrue() && !y.mightNotBeFalse()) return c;\n        // c ? false : true <=> !c\n        if (!x.mightNotBeFalse() && !y.mightNotBeTrue())\n          return AbstractValue.createFromUnaryOp(realm, \"!\", c, true, loc, true);\n      }\n      if (c.equals(c0) && x.equals(x0) && y.equals(y0)) return value;\n      return AbstractValue.createFromConditionalOp(realm, c, x, y, value.expressionLocation, isCondition, true);\n    }\n    case \"abstractConcreteUnion\": {\n      // The union of an abstract value with one or more concrete values.\n      if (realm.pathConditions.length === 0) return value;\n      let [abstractValue, ...concreteValues] = value.args;\n      invariant(abstractValue instanceof AbstractValue);\n      let remainingConcreteValues = [];\n      for (let concreteValue of concreteValues) {\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"!==\", value, concreteValue))) continue;\n        if (Path.implies(AbstractValue.createFromBinaryOp(realm, \"===\", value, concreteValue))) return concreteValue;\n        remainingConcreteValues.push(concreteValue);\n      }\n      if (remainingConcreteValues.length === 0) return abstractValue;\n      if (remainingConcreteValues.length === concreteValues.length) return value;\n      return AbstractValue.createAbstractConcreteUnion(realm, abstractValue, ...remainingConcreteValues);\n    }\n    default:\n      return value;\n  }\n}\n\nfunction distributeConditional(\n  realm: Realm,\n  value: AbstractValue,\n  isCondition: boolean,\n  create: (Array<Value>) => Value\n): Value {\n  // Find a conditional argument\n  let condition;\n  let args = value.args;\n  for (let arg of args)\n    if (arg instanceof AbstractValue && arg.kind === \"conditional\") {\n      if (condition === undefined) condition = arg.args[0];\n      else if (condition !== arg.args[0]) return value; // giving up, multiple conditions involved\n    }\n\n  if (condition === undefined) return value; // no conditional found, nothing to do\n\n  // We have at least one conditional argument; if there are more than one, they all share the same condition\n  let leftArgs = args.slice(0);\n  let rightArgs = args.slice(0);\n  for (let i = 0; i < args.length; i++) {\n    let arg = args[i];\n    if (arg instanceof AbstractValue && arg.kind === \"conditional\") {\n      leftArgs[i] = arg.args[1];\n      rightArgs[i] = arg.args[2];\n    }\n  }\n\n  return AbstractValue.createFromConditionalOp(\n    realm,\n    condition,\n    create(leftArgs),\n    create(rightArgs),\n    condition.expressionLocation,\n    isCondition,\n    true\n  );\n}\n\nfunction simplifyEquality(realm: Realm, equality: AbstractValue): Value {\n  let loc = equality.expressionLocation;\n  let op = equality.kind;\n  let [x, y] = equality.args;\n  if (y instanceof EmptyValue) return equality;\n  if (x instanceof ConcreteValue) [x, y] = [y, x];\n  if (x instanceof AbstractValue && x.kind === \"conditional\" && (!y.mightNotBeUndefined() || !y.mightNotBeNull())) {\n    function simplified(v: Value) {\n      return v instanceof AbstractValue ? v.kind !== op : true;\n    }\n    // try to simplify \"(cond ? xx : xy) op undefined/null\" to just \"cond\" or \"!cond\"\n    let [cond, xx, xy] = x.args;\n    invariant(cond instanceof AbstractValue); // otherwise the the conditional should not have been created\n    if (op === \"===\" || op === \"!==\") {\n      if (!y.mightNotBeUndefined()) {\n        // if xx === undefined && xy !== undefined then cond <=> x === undefined\n        if (!xx.mightNotBeUndefined() && !xy.mightBeUndefined())\n          return op === \"===\" ? makeBoolean(realm, cond, loc) : negate(realm, cond, loc);\n        // if xx !== undefined && xy === undefined then !cond <=> x === undefined\n        if (!xx.mightBeUndefined() && !xy.mightNotBeUndefined())\n          return op === \"===\" ? negate(realm, cond, loc) : makeBoolean(realm, cond, loc);\n        // distribute equality test, creating more simplication opportunities\n        let sxx = AbstractValue.createFromBinaryOp(realm, op, xx, realm.intrinsics.undefined, xx.expressionLocation);\n        let sxy = AbstractValue.createFromBinaryOp(realm, op, xy, realm.intrinsics.undefined, xy.expressionLocation);\n        if (simplified(sxx) || simplified(sxy))\n          return AbstractValue.createFromConditionalOp(realm, cond, sxx, sxy, equality.expressionLocation, true);\n      }\n      if (!y.mightNotBeNull()) {\n        // if xx === null && xy !== null then cond <=> x === null\n        if (!xx.mightNotBeNull() && !xy.mightBeNull())\n          return op === \"===\" ? makeBoolean(realm, cond, loc) : negate(realm, cond, loc);\n        // if xx !== null && xy === null then !cond <=> x === null\n        if (!xx.mightBeNull() && !xy.mightNotBeNull())\n          return op === \"===\" ? negate(realm, cond, loc) : makeBoolean(realm, cond, loc);\n        // distribute equality test, creating more simplication opportunities\n        let sxx = AbstractValue.createFromBinaryOp(realm, op, xx, realm.intrinsics.null, xx.expressionLocation);\n        let sxy = AbstractValue.createFromBinaryOp(realm, op, xy, realm.intrinsics.null, xy.expressionLocation);\n        if (simplified(sxx) || simplified(sxy))\n          return AbstractValue.createFromConditionalOp(realm, cond, sxx, sxy, equality.expressionLocation, true);\n      }\n    } else {\n      invariant(op === \"==\" || op === \"!=\");\n      // if xx cannot be undefined/null and xy is undefined/null then !cond <=> x == undefined/null\n      if (!xx.mightBeUndefined() && !xx.mightBeNull() && (!xy.mightNotBeUndefined() || !xy.mightNotBeNull()))\n        return op === \"==\" ? negate(realm, cond, loc) : makeBoolean(realm, cond, loc);\n      // if xx is undefined/null and xy cannot be undefined/null then cond <=> x == undefined/null\n      if ((!xx.mightNotBeUndefined() || !xx.mightNotBeNull()) && !xy.mightBeUndefined() && !xy.mightBeNull())\n        return op === \"==\" ? makeBoolean(realm, cond, loc) : negate(realm, cond, loc);\n      // distribute equality test, creating more simplication opportunities\n      let sxx = AbstractValue.createFromBinaryOp(realm, op, xx, y, xx.expressionLocation);\n      let sxy = AbstractValue.createFromBinaryOp(realm, op, xy, y, xy.expressionLocation);\n      if (simplified(sxx) || simplified(sxy))\n        return AbstractValue.createFromConditionalOp(realm, cond, sxx, sxy, equality.expressionLocation, true);\n    }\n  } else {\n    if (op === \"===\") {\n      if (x instanceof AbstractValue && x.kind === \"conditional\") {\n        let [cond, xx, xy] = x.args;\n        // ((cond ? xx : xy) === y) && xx === y && xy !== y <=> cond\n        if (xx.equals(y) && !xy.equals(y)) return cond;\n        // ((!cond ? xx : xy) === y) && xx !== y && xy === y <=> !cond\n        if (!xx.equals(y) && xy.equals(y)) return negate(realm, cond, loc);\n      } else if (y instanceof AbstractValue && y.kind === \"conditional\") {\n        let [cond, yx, yy] = y.args;\n        // (x === (cond ? yx : yy) === y) && x === yx && x !== yy <=> cond\n        if (yx.equals(x) && !yy.equals(x)) return cond;\n        // (x === (!cond ? yx : yy) === y) && x !== yx && x === yy <=> !cond\n        if (!x.equals(yx) && x.equals(yy)) return negate(realm, cond, loc);\n      }\n    }\n  }\n  return equality;\n}\n\nfunction makeBoolean(realm: Realm, value: Value, loc: ?BabelNodeSourceLocation = undefined): Value {\n  if (value.getType() === BooleanValue) return value;\n  if (value instanceof ConcreteValue) return new BooleanValue(realm, To.ToBoolean(realm, value));\n  invariant(value instanceof AbstractValue);\n  let v = AbstractValue.createFromUnaryOp(realm, \"!\", value, true, value.expressionLocation);\n  if (v instanceof ConcreteValue) return new BooleanValue(realm, !To.ToBoolean(realm, v));\n  invariant(v instanceof AbstractValue);\n  return AbstractValue.createFromUnaryOp(realm, \"!\", v, true, loc || value.expressionLocation);\n}\n\nfunction negate(\n  realm: Realm,\n  value: Value,\n  loc: ?BabelNodeSourceLocation = undefined,\n  unsimplifiedNegation: void | Value = undefined,\n  isCondition?: boolean\n): Value {\n  if (value instanceof ConcreteValue) return ValuesDomain.computeUnary(realm, \"!\", value);\n  invariant(value instanceof AbstractValue);\n  value = simplify(realm, value, true);\n  if (!value.mightNotBeTrue()) return realm.intrinsics.false;\n  if (!value.mightNotBeFalse()) return realm.intrinsics.true;\n  invariant(value instanceof AbstractValue);\n  if (value.kind === \"!\") {\n    let [x] = value.args;\n    if (isCondition || x.getType() === BooleanValue) return simplify(realm, x, true);\n    if (unsimplifiedNegation !== undefined) return unsimplifiedNegation;\n    return makeBoolean(realm, x, loc);\n  }\n  // If NaN is not an issue, invert binary ops\n  if (value.args.length === 2 && !value.args[0].mightBeNumber() && !value.args[1].mightBeNumber()) {\n    let invertedComparison;\n    switch (value.kind) {\n      case \"===\":\n        invertedComparison = \"!==\";\n        break;\n      case \"==\":\n        invertedComparison = \"!=\";\n        break;\n      case \"!==\":\n        invertedComparison = \"===\";\n        break;\n      case \"!=\":\n        invertedComparison = \"==\";\n        break;\n      case \"<\":\n        invertedComparison = \">=\";\n        break;\n      case \"<=\":\n        invertedComparison = \">\";\n        break;\n      case \">\":\n        invertedComparison = \"<=\";\n        break;\n      case \">=\":\n        invertedComparison = \"<\";\n        break;\n      default:\n        break;\n    }\n    if (invertedComparison !== undefined) {\n      let left = simplify(realm, value.args[0]);\n      let right = simplify(realm, value.args[1]);\n      return AbstractValue.createFromBinaryOp(realm, invertedComparison, left, right, loc || value.expressionLocation);\n    }\n    let invertedLogicalOp;\n    switch (value.kind) {\n      case \"&&\":\n        invertedLogicalOp = \"||\";\n        break;\n      case \"||\":\n        invertedLogicalOp = \"&&\";\n        break;\n      default:\n        break;\n    }\n    if (invertedLogicalOp !== undefined) {\n      let left = negate(realm, value.args[0]);\n      let right = negate(realm, value.args[1]);\n      return AbstractValue.createFromLogicalOp(\n        realm,\n        invertedLogicalOp,\n        left,\n        right,\n        loc || value.expressionLocation,\n        true\n      );\n    }\n  }\n  if (unsimplifiedNegation !== undefined) return unsimplifiedNegation;\n  return AbstractValue.createFromUnaryOp(realm, \"!\", value, true, loc || value.expressionLocation, true);\n}\n"]}