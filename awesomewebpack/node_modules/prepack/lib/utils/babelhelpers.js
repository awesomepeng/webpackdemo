"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.protoExpression = exports.constructorExpression = exports.emptyExpression = exports.nullExpression = exports.voidExpression = undefined;
exports.getAsPropertyNameExpression = getAsPropertyNameExpression;
exports.memberExpressionHelper = memberExpressionHelper;
exports.stringOfLocation = stringOfLocation;

var _babelTypes = require("babel-types");

var t = _interopRequireWildcard(_babelTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

const voidExpression = exports.voidExpression = t.unaryExpression("void", t.numericLiteral(0), true);
const nullExpression = exports.nullExpression = t.nullLiteral();
const emptyExpression = exports.emptyExpression = t.identifier("__empty");
const constructorExpression = exports.constructorExpression = t.identifier("__constructor");
const protoExpression = exports.protoExpression = t.identifier("__proto__");

function getAsPropertyNameExpression(key, canBeIdentifier = true) {
  // If key is a non-negative numeric string literal, parse it and set it as a numeric index instead.
  let index = Number.parseInt(key, 10);
  if (index >= 0 && index.toString() === key) {
    return t.numericLiteral(index);
  }

  if (canBeIdentifier) {
    // TODO #1020: revert this when Unicode identifiers are supported by all targetted JavaScript engines
    let keyIsAscii = /^[\u0000-\u007f]*$/.test(key);
    if (t.isValidIdentifier(key) && keyIsAscii) return t.identifier(key);
  }

  return t.stringLiteral(key);
}

function memberExpressionHelper(object, property) {
  let propertyExpression;
  let computed;
  if (typeof property === "string") {
    propertyExpression = getAsPropertyNameExpression(property);
    computed = !t.isIdentifier(propertyExpression);
  } else if (t.isStringLiteral(property)) {
    propertyExpression = getAsPropertyNameExpression(property.value);
    computed = !t.isIdentifier(propertyExpression);
  } else {
    propertyExpression = property;
    computed = true;
  }
  return t.memberExpression(object, propertyExpression, computed);
}

function stringOfLocation(location) {
  return `${location.start.line}:${location.start.column} ${location.end.line}:${location.end.line}`;
}
//# sourceMappingURL=babelhelpers.js.map