'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware');

var _errorOverlayMiddleware2 = _interopRequireDefault(_errorOverlayMiddleware);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorOverlayPlugin = function () {
  function ErrorOverlayPlugin() {
    _classCallCheck(this, ErrorOverlayPlugin);
  }

  _createClass(ErrorOverlayPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var className = this.constructor.name;

      if (compiler.options.mode !== 'development') return;

      compiler.hooks.entryOption.tap(className, function (context, entry) {
        var chunkPath = require.resolve('./entry');
        adjustEntry(entry, chunkPath);
      });

      compiler.hooks.afterResolvers.tap(className, function (_ref) {
        var options = _ref.options;

        if (options.devServer) {
          var originalBefore = options.devServer.before;
          options.devServer.before = function (app) {
            if (originalBefore) {
              originalBefore(app);
            }
            app.use((0, _errorOverlayMiddleware2.default)());
          };
        }
      });
    }
  }]);

  return ErrorOverlayPlugin;
}();

function adjustEntry(entry, chunkPath) {
  if (typeof entry === 'string') {
    throw new Error('We currently do not inject our entry code into single-file anonymous entries.\nPlease use a multi-main (array) or object-form `entry` setting for now.');
  }

  if (Array.isArray(entry)) {
    if (!entry.includes(chunkPath)) {
      entry.unshift(chunkPath);
    }
  } else {
    Object.keys(entry).forEach(function (entryName) {
      entry[entryName] = adjustEntry(entry[entryName], chunkPath);
    });
  }

  return entry;
}

module.exports = ErrorOverlayPlugin;